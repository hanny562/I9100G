Index: kernel/arch/arm/plat-omap/omap_device.c
===================================================================
--- kernel.orig/arch/arm/plat-omap/omap_device.c	2011-05-28 00:29:42.089599369 +0900
+++ kernel/arch/arm/plat-omap/omap_device.c	2011-05-28 00:30:47.847098898 +0900
@@ -954,7 +954,7 @@
 	}
 
 	/* Do the actual scaling */
-	ret = omap_voltage_scale(voltdm);
+	ret = omap_voltage_scale(voltdm, volt);
 out:
 	if (cpu_is_omap44xx())
 		read_unlock_irqrestore(&dpll_cascading_lock, flags);
Index: kernel/arch/arm/mach-omap2/omap4-mpuss-lowpower.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/omap4-mpuss-lowpower.c	2011-05-28 00:29:27.279598276 +0900
+++ kernel/arch/arm/mach-omap2/omap4-mpuss-lowpower.c	2011-05-28 00:30:47.847098898 +0900
@@ -774,7 +774,11 @@
 	} else {
 		pwrdm_set_next_pwrst(cpu0_pwrdm, PWRDM_POWER_ON);
 		pwrdm_set_next_pwrst(mpuss_pd, PWRDM_POWER_ON);
-		if (!omap4_lpmode)
+		/*
+		 * L4 Secure dispatcher is disabled during DPLL cascade 
+		 * to resolve the race condition with GPS UART1 safe mode.
+		 */
+		if (!in_dpll_cascading)
 			omap4_secure_dispatcher(0x21, 4, 0, 0, 0, 0, 0);
 	}
 
Index: kernel/arch/arm/mach-omap2/dpll-44xx.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/dpll-44xx.c	2011-05-28 00:29:42.089599369 +0900
+++ kernel/arch/arm/mach-omap2/dpll-44xx.c	2011-05-28 00:30:47.847098898 +0900
@@ -512,47 +512,6 @@
 	return clk->dpll_data->last_rounded_rate;
 }
 
-void omap4_dpll_low_power_cascade_check_timer(struct work_struct *dwork)
-{
-	struct clk *dpll_mpu_m2_ck, *dpll_core_m2_ck;
-	int delay;
-
-	 /*
-	  * It is invalid to enter into DPLL cascading
-	  * with both CPU cores online.
-	  *
-	  * If CPU1 remains online due to higher-than-normal system activity 
-	  * then the 'check' function will schedule itself to be re-run in one 
-	  * second later to check again if CPU1 is offline or not.  
-	  * This will continue until either CPU1 goes offline or
-	  * ASoC requests for DPLL cascade to be exited.
-	  */ 
-
-	dpll_mpu_m2_ck = clk_get(NULL, "dpll_mpu_m2_ck");
-	dpll_core_m2_ck = clk_get(NULL, "dpll_core_m2_ck");
-
-	if (num_online_cpus() > 1 || clk_get_rate(dpll_core_m2_ck) > 400000000
-			|| clk_get_rate(dpll_mpu_m2_ck) > 300000000) {
-		delay = usecs_to_jiffies(LP_DELAY);
-		return schedule_delayed_work_on(0, &lpmode_work, delay);
- 	} else
-		omap4_dpll_low_power_cascade_enter();
-}
-
-int omap4_dpll_low_power_cascade_check_entry()
-{
-	int delay = usecs_to_jiffies(LP_DELAY);
-
-	INIT_DELAYED_WORK_DEFERRABLE(&lpmode_work,
-			omap4_dpll_low_power_cascade_check_timer);
-
-	dpll_core_clk = clk_get(NULL, "dpll_core_m2_ck");
-	if(!dpll_core_clk)
-		pr_err("[%s] fail to get emif1_fck clock\n", __func__);
-
-	return schedule_delayed_work_on(0, &lpmode_work, delay);
-}
-
 int dpll_cascading_blocker_hold(struct device *dev)
 {
 	struct dpll_cascading_blocker *blocker;
@@ -584,6 +543,9 @@
 	list_add(&blocker->node, &dpll_cascading_blocker_list);
 
 	if (list_was_empty && in_dpll_cascading) {
+		/* DPLL cascade stability check: Add printk for testing purpose. */
+		printk("%s:%d Before DPLL exit dev_name = %s\n",
+				__func__,__LINE__,dev_name(dev));
 		omap4_dpll_low_power_cascade_exit();
 		in_dpll_cascading = false;
 	}
@@ -627,6 +589,9 @@
 	if (list_empty(&dpll_cascading_blocker_list)
 			&& !in_dpll_cascading) {
 		in_dpll_cascading = true;
+		/* DPLL cascade stability check: Add printk for testing purpose. */
+		printk("%s:%d Before DPLL enter dev_name = %s\n",
+				__func__,__LINE__,dev_name(dev));
 		omap4_dpll_low_power_cascade_enter();
 	}
 
@@ -668,6 +633,8 @@
 	struct clockdomain *emu_sys_44xx_clkdm, *abe_44xx_clkdm;
 	struct voltagedomain *vdd_mpu, *vdd_iva, *vdd_core;
 
+	pr_info("[%s]\n", __func__);
+
 	dpll_abe_ck = clk_get(NULL, "dpll_abe_ck");
 	dpll_mpu_ck = clk_get(NULL, "dpll_mpu_ck");
 	div_mpu_hs_clk = clk_get(NULL, "div_mpu_hs_clk");
Index: kernel/drivers/staging/omap_hsi/hsi_driver_int.c
===================================================================
--- kernel.orig/drivers/staging/omap_hsi/hsi_driver_int.c	2011-05-28 00:29:27.279598276 +0900
+++ kernel/drivers/staging/omap_hsi/hsi_driver_int.c	2011-05-28 00:30:47.847098898 +0900
@@ -375,6 +375,8 @@
 	/* Check CAWAKE line status */
 	if (cawake_status) {
 		dev_dbg(hsi_ctrl->dev, "CAWAKE rising edge detected\n");
+		/* DPLL cascade stability check: Add printk for testing purpose. */
+		printk("%s:%d CAWAKE rising edge detected\n",__func__,__LINE__);		
 
 		/* Check for possible mismatch (race condition) */
 		if (unlikely(pport->cawake_status)) {
@@ -399,6 +401,8 @@
 		spin_lock(&hsi_ctrl->lock);
 	} else {
 		dev_dbg(hsi_ctrl->dev, "CAWAKE falling edge detected\n");
+		/* DPLL cascade stability check: Add printk for testing purpose. */
+		printk("%s:%d CAWAKE falling edge detected\n",__func__,__LINE__);		
 			     if (hsi_is_dma_read_int_pending(hsi_ctrl)) {
 			           dev_dbg(hsi_ctrl->dev, "Pending DMA Read interrupt "
 			                               "before CAWAKE->L, exiting "
@@ -416,7 +420,7 @@
 		}
 		pport->cawake_status = 0;
 
-	      hsi_set_pm_default(hsi_ctrl);
+		hsi_set_pm_default(hsi_ctrl);
 		spin_unlock(&hsi_ctrl->lock);
 		hsi_port_event_handler(pport, HSI_EVENT_CAWAKE_DOWN, NULL);
 		spin_lock(&hsi_ctrl->lock);
Index: kernel/drivers/staging/omap_hsi/hsi_driver.c
===================================================================
--- kernel.orig/drivers/staging/omap_hsi/hsi_driver.c	2011-05-28 00:30:24.098349270 +0900
+++ kernel/drivers/staging/omap_hsi/hsi_driver.c	2011-05-28 00:30:47.847098898 +0900
@@ -44,7 +44,12 @@
 #define HSI_RESETDONE_MAX_RETRIES	5 /* Max 5*L4 Read cycles waiting for */
 					  /* reset to complete */
 #define HSI_RESETDONE_NORMAL_RETRIES	1 /* Reset should complete in 1 R/W */
-					  /* cycle */
+	
+struct workqueue_struct *hsi_dpll_wq;
+struct delayed_work hsi_dpll_work;
+
+static int hsi_dpll_block = 0;
+static int hsi_dpll_release = 0;
 
 void hsi_save_ctx(struct hsi_dev *hsi_ctrl)
 {
@@ -636,8 +641,10 @@
 		dev_dbg(dev, "Disabling clocks with HST FSM not IDLE !\n");
 
 	/* Allow Fclk to change */
-	if (dpll_cascading_blocker_release(dev) < 0)
-		dev_warn(dev, "Error releasing DPLL cascading constraint\n");
+	if (hsi_dpll_release) {
+		if (dpll_cascading_blocker_release(dev) < 0)
+			dev_warn(dev, "Error releasing DPLL cascading constraint\n");
+	}
 
 #ifndef USE_PM_RUNTIME_FOR_HSI
 	hsi_runtime_suspend(dev);
@@ -680,8 +687,11 @@
 	}
 
 	/* Prevent Fclk change */
-	if (dpll_cascading_blocker_hold(dev) < 0)
-		dev_warn(dev, "Error holding DPLL cascading constraint\n");
+	if (hsi_dpll_block) {
+		if (dpll_cascading_blocker_hold(dev) < 0)
+			dev_warn(dev, "Error holding DPLL cascading constraint\n");
+			hsi_dpll_release = 1;
+	}
 
 #ifndef USE_PM_RUNTIME_FOR_HSI
 	omap_device_enable(pd);
@@ -766,6 +776,16 @@
 	hsi_ports_exit(hsi_ctrl, hsi_ctrl->max_p);
 }
 
+/*
+ * DPLL cascade constraints are disabled during boot-up for HSI
+ * to resolve system OFF mode issue. 
+ * REVIST: It needs to be handled properly during boot-up with DPLL-cascade.
+ */
+static void hsi_dpll_work_func(struct work_struct *work)
+{
+	hsi_dpll_block = 1;
+}
+
 /* HSI Platform Device probing & hsi_device registration */
 static int __init hsi_platform_device_probe(struct platform_device *pd)
 {
@@ -847,9 +867,25 @@
 
 	/* From here no need for HSI HW access */
 	hsi_clocks_disable(hsi_ctrl->dev, __func__);
+	
+	/* From here no need for HSI HW access */
+	hsi_clocks_disable(hsi_ctrl->dev, __func__);
+
+	/* the timer just fires off a work queue request.  we need a thread
+	   to avoid dpll-cascade constraints during boot-up */
+	hsi_dpll_wq = create_singlethread_workqueue("hs_dpll_wq");
+	if (!hsi_dpll_wq) {
+		err = -ENOMEM;
+		pr_err("%s: could not create workqueue for hsi_dpll_wq\n", __func__);
+		goto err_create_workqueue;
+	}
+	/* this is the thread function we run on the work queue */
+	INIT_DELAYED_WORK(&hsi_dpll_work, hsi_dpll_work_func);
+	queue_delayed_work(hsi_dpll_wq, &hsi_dpll_work, msecs_to_jiffies(25000)); 
 
 	return err;
 
+err_create_workqueue:
 rollback3:
 	hsi_debug_remove_ctrl(hsi_ctrl);
 rollback2:
Index: kernel/drivers/serial/omap-serial.c
===================================================================
--- kernel.orig/drivers/serial/omap-serial.c	2011-05-28 00:30:45.247098189 +0900
+++ kernel/drivers/serial/omap-serial.c	2011-05-28 00:30:47.847098898 +0900
@@ -1316,6 +1316,13 @@
 	 * fifo. This delay is ~1 byte time @ 115.2k
 	 */
 	udelay(80);
+	/*
+	 * Issue: OFF mode is not hitting
+	 * FIXME: Temporarly disabled UART active check on the line
+	 * REVIST: Auto-RTS, Needs to be handled properly 
+	 * 	   during uart suspend and resume paths. 
+	 */ 
+#if 0
 
 	if (omap_uart_active(up->port.line, 0)) {
 		fifo_suspendbrks++;
@@ -1331,6 +1338,7 @@
 	}
 
 	serial_out(up, UART_IER, up->ier);
+#endif
 
 	if (up)
 		uart_suspend_port(&serial_omap_reg, &up->port);
Index: kernel/arch/arm/mach-omap2/serial.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/serial.c	2011-05-28 00:30:45.247098189 +0900
+++ kernel/arch/arm/mach-omap2/serial.c	2011-05-28 00:30:47.847098898 +0900
@@ -520,7 +520,14 @@
 			 * fifo. This delay is ~1 byte time @ 115.2k
 			 */
 			udelay(80);
-#ifdef CONFIG_SERIAL_OMAP
+			/*
+	 		 * Issue: OFF mode is not hitting
+	 		 * FIXME: Temporarly disabled UART active check on the line
+	 		 * REVIST: Auto-RTS, Needs to be handled properly 
+		 	 * during uart suspend and resume paths. 
+	 		 */ 
+//#ifdef CONFIG_SERIAL_OMAP
+#if 0
 			if (omap_uart_active(num, 0)) {
 				omap_uart_block_sleep(uart);
 				omap_uart_disable_rtspullup(uart);
Index: kernel/arch/arm/mach-omap2/smartreflex.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/smartreflex.c	2011-05-28 00:29:42.089599369 +0900
+++ kernel/arch/arm/mach-omap2/smartreflex.c	2011-05-28 00:30:47.847098898 +0900
@@ -172,10 +172,12 @@
 		}
 	}
 	switch (sys_clk_speed) {
+	case 12288000:
+		sr->clk_length = 0x3d;
+		break;	
 	case 12000000:
 		sr->clk_length = SRCLKLENGTH_12MHZ_SYSCLK;
 		break;
-	case 12288000:
 	case 13000000:
 		sr->clk_length = SRCLKLENGTH_13MHZ_SYSCLK;
 		break;
