From: Miguel Vadillo <vadillo@ti.com>
Date: Wed, 23 Mar 2011 01:19:04 +0000 (-0500)
Subject: syslink: ipu_pm: enable/disable wd in runtime
X-Git-Tag: android-2.6.35-2.3-omap4.13.1~82
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=7036e2a3f6553ba57b16371753bbfaa564196dce

syslink: ipu_pm: enable/disable wd in runtime

Add the possibility to enable and disable in
runtime the wd feature.

In order to disable watchdog timer the flag wdt_allowed
should be set to 0 and wd will be disabled.

Set the flag back to 1 to re-enable the wd feature.

This flag is located in the member pm_flags of the sms struct
and it is the 7 bit X0000000b.

Also changing the name of the pm_flags members to match
the kernel code convention.

Change-Id: I6dde896886784a8858dc42a5ceb480f43e3f12b9
Signed-off-by: Miguel Vadillo <vadillo@ti.com>
---

Index: kernel/drivers/dsp/syslink/ipu_pm/ipu_pm.c
===================================================================
--- kernel.orig/drivers/dsp/syslink/ipu_pm/ipu_pm.c	2011-05-10 20:14:49.000000000 +0900
+++ kernel/drivers/dsp/syslink/ipu_pm/ipu_pm.c	2011-05-10 20:14:56.000000000 +0900
@@ -2613,14 +2613,14 @@
 	if (first_time) {
 		/* Enable/disable ipu hibernation*/
 #ifdef CONFIG_SYSLINK_IPU_SELF_HIBERNATION
-		handle->rcb_table->pm_flags.hibernateAllowed = 1;
+		handle->rcb_table->pm_flags.hibernate_allowed = 1;
 		/* turn on ducati hibernation timer */
 		ipu_pm_timer_state(PM_HIB_TIMER_ON);
 #else
-		handle->rcb_table->pm_flags.hibernateAllowed = 0;
+		handle->rcb_table->pm_flags.hibernate_allowed = 0;
 #endif
 		pr_debug("hibernateAllowed=%d\n",
-				handle->rcb_table->pm_flags.hibernateAllowed);
+				handle->rcb_table->pm_flags.hibernate_allowed);
 		first_time = 0;
 		cm_write_mod_reg(HW_AUTO,
 				 OMAP4430_CM2_CORE_MOD,
@@ -2688,7 +2688,7 @@
 #ifdef CONFIG_SYSLINK_IPU_SELF_HIBERNATION
 	/* turn on ducati hibernation timer */
 	if ((params->hib_timer_state == PM_HIB_TIMER_OFF) &&
-		global_rcb->pm_flags.hibernateAllowed)
+		global_rcb->pm_flags.hibernate_allowed)
 		ipu_pm_timer_state(PM_HIB_TIMER_ON);
 #endif
 	mutex_unlock(ipu_pm_state.gate_handle);
@@ -3142,14 +3142,17 @@
 		if (params->hib_timer_state == PM_HIB_TIMER_ON) {
 			pr_debug("Starting hibernation, waking up M3 cores");
 			handle->rcb_table->state_flag |= (SYS_PROC_HIB |
-					APP_PROC_HIB | ENABLE_IPU_HIB);
+							  APP_PROC_HIB |
+							  ENABLE_IPU_HIB);
 #ifdef CONFIG_DUCATI_WATCH_DOG
-			if (sys_rproc->dmtimer != NULL)
-				omap_dm_timer_set_load(sys_rproc->dmtimer, 1,
-						params->wdt_time);
-			params->hib_timer_state = PM_HIB_TIMER_WDRESET;
-		} else if (params->hib_timer_state ==
-			PM_HIB_TIMER_WDRESET) {
+			if (global_rcb->pm_flags.wdt_allowed) {
+				if (sys_rproc->dmtimer != NULL)
+					omap_dm_timer_set_load(
+							sys_rproc->dmtimer, 1,
+							params->wdt_time);
+				params->hib_timer_state = PM_HIB_TIMER_WDRESET;
+			}
+		} else if (params->hib_timer_state == PM_HIB_TIMER_WDRESET) {
 			/* notify devh to begin error recovery here */
 			pr_debug("Timer ISR: Trigger WD reset + recovery\n");
 			ipu_pm_recover_schedule();
@@ -3179,7 +3182,7 @@
 		 * having to rebuild the kernel.
 		 * Very useful when debugging IPU.
 		 */
-		if (!global_rcb->pm_flags.hibernateAllowed)
+		if (!global_rcb->pm_flags.hibernate_allowed)
 			break;
 
 		if (params->hib_timer_state == PM_HIB_TIMER_RESET) {
@@ -3196,6 +3199,10 @@
 					(void *)sys_rproc->dmtimer);
 			if (retval < 0)
 				pr_warn("request_irq status: %x\n", retval);
+#ifdef CONFIG_DUCATI_WATCH_DOG
+			/* Enable Watchdog */
+			global_rcb->pm_flags.wdt_allowed = 1;
+#endif
 			/*
 			 * store the dmtimer handle locally to use during
 			 * free_irq as dev_id token in cases where the remote
Index: kernel/drivers/dsp/syslink/ipu_pm/ipu_pm.h
===================================================================
--- kernel.orig/drivers/dsp/syslink/ipu_pm/ipu_pm.h	2011-05-10 20:14:20.000000000 +0900
+++ kernel/drivers/dsp/syslink/ipu_pm/ipu_pm.h	2011-05-10 20:14:56.000000000 +0900
@@ -362,14 +362,15 @@
 };
 
 struct ipu_pm_override {
-	unsigned hibernateAllowed:1;
-	unsigned retentionAllowed:1;
-	unsigned inactiveAllowed:1;
-	unsigned cmAutostateAllowed:1;
-	unsigned deepSleepAllowed:1;
-	unsigned wfiAllowed:1;
-	unsigned idleAllowed:1;
-	unsigned reserved:24;
+	unsigned hibernate_allowed:1;
+	unsigned retention_allowed:1;
+	unsigned inactive_allowed:1;
+	unsigned cm_autostate_allowed:1;
+	unsigned deep_sleep_allowed:1;
+	unsigned wfi_allowed:1;
+	unsigned idle_allowed:1;
+	unsigned wdt_allowed:1;
+	unsigned reserved:23;
 	unsigned highbit:1;
 };
 
