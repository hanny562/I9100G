Index: Kernel/drivers/sensors/optical/gp2a.c
===================================================================
--- Kernel.orig/drivers/sensors/optical/gp2a.c	2011-02-07 18:56:00.427781658 +0530
+++ Kernel/drivers/sensors/optical/gp2a.c	2011-02-08 19:24:23.537782154 +0530
@@ -49,6 +49,10 @@
  *  to the chip.  When both are disabled, we remove power from the chip.
  *  In suspend, we remove power if light is disabled but not if proximity is
  *  enabled (proximity is allowed to wakeup from suspend).
+ *  
+ *  While disabling POWER we also take into consideration that the REVISION is 
+ *  not 4. In case of Revision 4 if power is disabled the bus will not be freed 
+ *  properly and it will cause all the sensors to fail.
  *
  *  There are no ioctls for either driver interfaces.  Output is via
  *  input device framework and control via sysfs attributes.
@@ -229,8 +233,10 @@
 	} else if (!new_value && (gp2a->power_state & LIGHT_ENABLED)) {
 		gp2a_light_disable(gp2a);
 		gp2a->power_state &= ~LIGHT_ENABLED;
-		if (!gp2a->power_state)
+		#if (CONFIG_SAMSUNG_OMAP4_TAB_REV != 4)		
+		if (!gp2a->power_state)		
 			gp2a->pdata->power(false);
+		#endif
 	}
 	mutex_unlock(&gp2a->power_lock);
 	return size;
@@ -270,8 +276,12 @@
 		disable_irq(gp2a->irq);
 		gp2a_i2c_write(gp2a, REGS_OPMOD, &reg_defaults[0]);
 		gp2a->power_state &= ~PROXIMITY_ENABLED;
+
+		#if (CONFIG_SAMSUNG_OMAP4_TAB_REV != 4)		
 		if (!gp2a->power_state)
 			gp2a->pdata->power(false);
+		#endif
+
 	}
 	mutex_unlock(&gp2a->power_lock);
 	return size;
@@ -411,14 +421,12 @@
 			__func__, pdata->p_out, rc);
 		return rc;
 	}
-
 	rc = gpio_direction_input(pdata->p_out);
 	if (rc < 0) {
 		pr_err("%s: failed to set gpio %d as input (%d)\n",
 			__func__, pdata->p_out, rc);
-		goto err_gpio_direction_input;
+		goto err_gpio_direction_input;	
 	}
-
 	irq = gpio_to_irq(pdata->p_out);
 	rc = request_irq(irq,
 			 gp2a_irq_handler,
@@ -441,7 +449,7 @@
 	goto done;
 
 err_request_irq:
-err_gpio_direction_input:
+err_gpio_direction_input:		
 	gpio_free(pdata->p_out);
 done:
 	return rc;
@@ -466,7 +474,6 @@
 			__func__, OMAP4TAB_GP2A_PS_ON, ret);
 		return ret;
 	}
-
 	ret = gpio_direction_input(OMAP4TAB_GP2A_PS_ON);
 	if (ret < 0) {
 		pr_err("%s: failed to set gpio %d as input (%d)\n",
@@ -590,7 +597,7 @@
 err_input_register_device_proximity:
 err_input_allocate_device_proximity:
 	free_irq(gp2a->irq, 0);
-	gpio_free(gp2a->pdata->p_out);
+	gpio_free(gp2a->pdata->p_out);	
 err_setup_irq:
 	mutex_destroy(&gp2a->power_lock);
 	wake_lock_destroy(&gp2a->prx_wake_lock);
@@ -610,8 +617,12 @@
 	struct gp2a_data *gp2a = i2c_get_clientdata(client);
 	if (gp2a->power_state & LIGHT_ENABLED)
 		gp2a_light_disable(gp2a);
+
+	#if (CONFIG_SAMSUNG_OMAP4_TAB_REV != 4)	
 	if (gp2a->power_state == LIGHT_ENABLED)
 		gp2a->pdata->power(false);
+	#endif
+
 	return 0;
 }
 
@@ -620,8 +631,12 @@
 	/* Turn power back on if we were before suspend. */
 	struct i2c_client *client = to_i2c_client(dev);
 	struct gp2a_data *gp2a = i2c_get_clientdata(client);
+	
+	#if (CONFIG_SAMSUNG_OMAP4_TAB_REV != 4)
 	if (gp2a->power_state == LIGHT_ENABLED)
 		gp2a->pdata->power(true);
+	#endif
+
 	if (gp2a->power_state & LIGHT_ENABLED)
 		gp2a_light_enable(gp2a);
 	return 0;
@@ -642,8 +657,11 @@
 		gp2a->power_state = 0;
 		if (gp2a->power_state & LIGHT_ENABLED)
 			gp2a_light_disable(gp2a);
+		#if (CONFIG_SAMSUNG_OMAP4_TAB_REV != 4)		
 		gp2a->pdata->power(false);
+		#endif
 	}
+
 	destroy_workqueue(gp2a->wq);
 	mutex_destroy(&gp2a->power_lock);
 	wake_lock_destroy(&gp2a->prx_wake_lock);
