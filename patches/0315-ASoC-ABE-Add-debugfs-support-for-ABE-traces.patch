From: Misael Lopez Cruz <misael.lopez@ti.com>
Date: Tue, 26 Apr 2011 17:34:09 +0000 (-0500)
Subject: ASoC: ABE: Add debugfs support for ABE traces
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=7160862b638b508bdf6861df80447e0578c51ccc

ASoC: ABE: Add debugfs support for ABE traces

Implement debugfs support for Audio Backend traces.

Change-Id: I2383b46da72e70927ac09caff81ec1a3deda0b6e
Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>
Signed-off-by: Sebastien Guiriec <s-guiriec@ti.com>
Signed-off-by: Misael Lopez Cruz <misael.lopez@ti.com>
---

Index: kernel/arch/arm/plat-omap/include/plat/memory.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/memory.h	2011-04-29 12:20:50.880855466 +0900
+++ kernel/arch/arm/plat-omap/include/plat/memory.h	2011-04-29 12:46:55.027104823 +0900
@@ -93,8 +93,11 @@
 #define CONFIG_FB_OMAP_CONSISTENT_DMA_SIZE 2
 #endif
 
+#define OMAP_ABE_CONSISTENT_DMA_SIZE 2
+
 #define CONSISTENT_DMA_SIZE \
-	(((CONFIG_FB_OMAP_CONSISTENT_DMA_SIZE + 1) & ~1) * 1024 * 1024)
+	((((CONFIG_FB_OMAP_CONSISTENT_DMA_SIZE + 1) & ~1) * 1024 * 1024) + \
+	OMAP_ABE_CONSISTENT_DMA_SIZE * 1024 * 1024)
 
 #endif
 
Index: kernel/sound/soc/omap/omap-abe-dsp.c
===================================================================
--- kernel.orig/sound/soc/omap/omap-abe-dsp.c	2011-04-29 12:22:34.469604264 +0900
+++ kernel/sound/soc/omap/omap-abe-dsp.c	2011-04-29 12:46:55.107104812 +0900
@@ -38,6 +38,8 @@
 #include <linux/slab.h>
 #include <linux/pm_runtime.h>
 #include <linux/dma-mapping.h>
+#include <linux/wait.h>
+#include <linux/debugfs.h>
 #ifdef CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
 #endif
@@ -118,6 +120,11 @@
 
 #define ABE_ROUTES_UL		14
 
+/* size in bytes of debug options */
+#define ABE_DBG_FLAG1_SIZE	0
+#define ABE_DBG_FLAG2_SIZE	0
+#define ABE_DBG_FLAG3_SIZE	0
+
 /* TODO: fine tune for ping pong - buffer is 2 periods of 12k each*/
 static const struct snd_pcm_hardware omap_abe_hardware = {
 	.info			= SNDRV_PCM_INFO_MMAP |
@@ -191,6 +198,35 @@
 #endif
 	int early_suspended;
 	int dpll_cascading;
+
+#ifdef CONFIG_DEBUG_FS
+	/* its intended we can switch on/off individual debug items */
+	u32 dbg_format1; /* TODO: match flag names here to debug format flags */
+	u32 dbg_format2;
+	u32 dbg_format3;
+
+	u32 dbg_buffer_bytes;
+	u32 dbg_circular;
+	u32 dbg_buffer_msecs;  /* size of buffer in secs */
+	u32 dbg_elem_bytes;
+	dma_addr_t dbg_buffer_addr;
+	wait_queue_head_t wait;
+	int dbg_reader_offset;
+	int dbg_dma_offset;
+	int dbg_complete;
+	struct dentry *debugfs_root;
+	struct dentry *debugfs_fmt1;
+	struct dentry *debugfs_fmt2;
+	struct dentry *debugfs_fmt3;
+	struct dentry *debugfs_size;
+	struct dentry *debugfs_data;
+	struct dentry *debugfs_circ;
+	struct dentry *debugfs_elem_bytes;
+	char *dbg_buffer;
+	struct omap_pcm_dma_data *dma_data;
+	int dma_ch;
+	int dma_req;
+#endif
 };
 
 static struct abe_data *abe;
@@ -1908,6 +1944,303 @@
 	return 0;
 }
 
+#ifdef CONFIG_DEBUG_FS
+
+static int abe_dbg_get_dma_pos(struct abe_data *abe)
+{
+	return omap_get_dma_dst_pos(abe->dma_ch) - abe->dbg_buffer_addr;
+}
+
+static void abe_dbg_dma_irq(int ch, u16 stat, void *data)
+{
+
+}
+
+static int abe_dbg_start_dma(struct abe_data *abe, int circular)
+{
+	struct omap_dma_channel_params dma_params;
+	struct platform_device *pdev = abe->pdev;
+	int err;
+
+	/* TODO: start the DMA in either :-
+	 *
+	 * 1) circular buffer mode where the DMA will restart when it get to
+	 *    the end of the buffer.
+	 * 2) default mode, where DMA stops at the end of the buffer.
+	 */
+	abe->dma_req = OMAP44XX_DMA_ABE_REQ_7;
+	err = omap_request_dma(abe->dma_req, "ABE debug",
+			       abe_dbg_dma_irq, abe, &abe->dma_ch);
+	if (abe->dbg_circular) {
+		/*
+		 * Link channel with itself so DMA doesn't need any
+		 * reprogramming while looping the buffer
+		 */
+		omap_dma_link_lch(abe->dma_ch, abe->dma_ch);
+	}
+
+	memset(&dma_params, 0, sizeof(dma_params));
+	dma_params.data_type		= OMAP_DMA_DATA_TYPE_S32;
+	dma_params.trigger		= abe->dma_req;
+	dma_params.sync_mode		= OMAP_DMA_SYNC_FRAME;
+	dma_params.src_amode		= OMAP_DMA_AMODE_DOUBLE_IDX;
+	dma_params.dst_amode		= OMAP_DMA_AMODE_POST_INC;
+	dma_params.src_or_dst_synch	= OMAP_DMA_SRC_SYNC;
+	dma_params.src_start		= D_DEBUG_FIFO_ADDR +
+					  ABE_DMEM_BASE_ADDRESS_L3;
+	dma_params.dst_start		= abe->dbg_buffer_addr;
+	dma_params.src_port		= OMAP_DMA_PORT_MPUI;
+	dma_params.src_ei		= 1;
+	dma_params.src_fi		= 1 - abe->dbg_elem_bytes;
+
+	/* 128 bytes shifted into words */
+	dma_params.elem_count	= abe->dbg_elem_bytes >> 2;
+	dma_params.frame_count	= abe->dbg_buffer_bytes / abe->dbg_elem_bytes;
+	omap_set_dma_params(abe->dma_ch, &dma_params);
+
+	omap_enable_dma_irq(abe->dma_ch, OMAP_DMA_FRAME_IRQ);
+	omap_set_dma_src_burst_mode(abe->dma_ch, OMAP_DMA_DATA_BURST_16);
+	omap_set_dma_dest_burst_mode(abe->dma_ch, OMAP_DMA_DATA_BURST_16);
+
+	abe->dbg_reader_offset = 0;
+
+	pm_runtime_get_sync(&pdev->dev);
+	omap_start_dma(abe->dma_ch);
+	return 0;
+}
+
+static void abe_dbg_stop_dma(struct abe_data *abe)
+{
+	struct platform_device *pdev = abe->pdev;
+
+	while (omap_get_dma_active_status(abe->dma_ch))
+		omap_stop_dma(abe->dma_ch);
+
+	if (abe->dbg_circular)
+		omap_dma_unlink_lch(abe->dma_ch, abe->dma_ch);
+	omap_free_dma(abe->dma_ch);
+	pm_runtime_put_sync(&pdev->dev);
+}
+
+static int abe_open_data(struct inode *inode, struct file *file)
+{
+	struct abe_data *abe = inode->i_private;
+
+	abe->dbg_elem_bytes = 128; /* size of debug data per tick */
+
+	if (abe->dbg_format1)
+		abe->dbg_elem_bytes += ABE_DBG_FLAG1_SIZE;
+	if (abe->dbg_format2)
+		abe->dbg_elem_bytes += ABE_DBG_FLAG2_SIZE;
+	if (abe->dbg_format3)
+		abe->dbg_elem_bytes += ABE_DBG_FLAG3_SIZE;
+
+	abe->dbg_buffer_bytes = abe->dbg_elem_bytes * 4 *
+				abe->dbg_buffer_msecs;
+
+	abe->dbg_buffer = dma_alloc_writecombine(&abe->pdev->dev,
+				abe->dbg_buffer_bytes, &abe->dbg_buffer_addr,
+				GFP_KERNEL);
+	if (abe->dbg_buffer == NULL)
+		return -ENOMEM;
+
+	file->private_data = inode->i_private;
+	abe->dbg_complete = 0;
+	abe_dbg_start_dma(abe, abe->dbg_circular);
+
+	return 0;
+}
+
+static int abe_release_data(struct inode *inode, struct file *file)
+{
+	struct abe_data *abe = inode->i_private;
+
+	abe_dbg_stop_dma(abe);
+
+	dma_free_writecombine(&abe->pdev->dev, abe->dbg_buffer_bytes,
+				      abe->dbg_buffer, abe->dbg_buffer_addr);
+	return 0;
+}
+
+static ssize_t abe_copy_to_user(struct abe_data *abe, char __user *user_buf,
+			       size_t count)
+{
+	/* check for reader buffer wrap */
+	if (abe->dbg_reader_offset + count > abe->dbg_buffer_bytes) {
+		int size = abe->dbg_buffer_bytes - abe->dbg_reader_offset;
+
+		/* wrap */
+		if (copy_to_user(user_buf,
+			abe->dbg_buffer + abe->dbg_reader_offset, size))
+			return -EFAULT;
+
+		/* need to just return if non circular */
+		if (!abe->dbg_circular) {
+			abe->dbg_complete = 1;
+			return count;
+		}
+
+		if (copy_to_user(user_buf,
+			abe->dbg_buffer, count - size))
+			return -EFAULT;
+		abe->dbg_reader_offset = count - size;
+		return count;
+	} else {
+		/* no wrap */
+		if (copy_to_user(user_buf,
+			abe->dbg_buffer + abe->dbg_reader_offset, count))
+			return -EFAULT;
+		abe->dbg_reader_offset += count;
+
+		if (!abe->dbg_circular &&
+				abe->dbg_reader_offset == abe->dbg_buffer_bytes)
+			abe->dbg_complete = 1;
+
+		return count;
+	}
+}
+
+static ssize_t abe_read_data(struct file *file, char __user *user_buf,
+			       size_t count, loff_t *ppos)
+{
+	ssize_t ret = 0;
+	struct abe_data *abe = file->private_data;
+	DECLARE_WAITQUEUE(wait, current);
+	int dma_offset, bytes;
+	/* TODO: do not use abe global structure to assign pdev */
+	struct platform_device *pdev = abe->pdev;
+
+	add_wait_queue(&abe->wait, &wait);
+	do {
+		set_current_state(TASK_INTERRUPTIBLE);
+		/* TODO: Check if really needed. Or adjust sleep delay
+		 * If not delay trace is not working */
+		msleep_interruptible(1);
+		dma_offset = abe_dbg_get_dma_pos(abe);
+
+		/* is DMA finished ? */
+		if (abe->dbg_complete)
+			break;
+
+		/* get maximum amount of debug bytes we can read */
+		if (dma_offset >= abe->dbg_reader_offset) {
+			/* dma ptr is ahead of reader */
+			bytes = dma_offset - abe->dbg_reader_offset;
+		} else {
+			/* dma ptr is behind reader */
+			bytes = dma_offset + abe->dbg_buffer_bytes -
+				abe->dbg_reader_offset;
+		}
+
+		if (count > bytes)
+			count = bytes;
+
+		if (count > 0) {
+			ret = abe_copy_to_user(abe, user_buf, count);
+			if (count < bytes)
+				dev_dbg(&pdev->dev, "ABE Trace Max:%x Data:%x\n", count, bytes);
+			break;
+		}
+
+		if (file->f_flags & O_NONBLOCK) {
+			ret = -EAGAIN;
+			break;
+		}
+
+		if (signal_pending(current)) {
+			ret = -ERESTARTSYS;
+			break;
+		}
+
+		schedule();
+
+	} while (1);
+
+	__set_current_state(TASK_RUNNING);
+	remove_wait_queue(&abe->wait, &wait);
+
+	return ret;
+}
+
+static const struct file_operations abe_data_fops = {
+	.open = abe_open_data,
+	.read = abe_read_data,
+	.release = abe_release_data,
+};
+
+static void abe_init_debugfs(struct abe_data *abe)
+{
+	struct platform_device *pdev = abe->pdev;
+
+	
+	abe->debugfs_root = debugfs_create_dir("omap4-abe", NULL);
+	if (!abe->debugfs_root) {
+		dev_warn(&pdev->dev, "failed to create debugfs directory\n");
+		return;
+	}
+
+	abe->debugfs_fmt1 = debugfs_create_bool("format1", 0644,
+						 abe->debugfs_root,
+						 &abe->dbg_format1);
+	if (!abe->debugfs_fmt1)
+		dev_warn(&pdev->dev, "failed to create format1 debugfs file\n");
+
+	abe->debugfs_fmt2 = debugfs_create_bool("format2", 0644,
+						 abe->debugfs_root,
+						 &abe->dbg_format2);
+	if (!abe->debugfs_fmt2)
+		dev_warn(&pdev->dev, "failed to create format2 debugfs file\n");
+
+	abe->debugfs_fmt3 = debugfs_create_bool("format3", 0644,
+						 abe->debugfs_root,
+						 &abe->dbg_format3);
+	if (!abe->debugfs_fmt3)
+		dev_warn(&pdev->dev, "failed to create format3 debugfs file\n");
+
+	abe->debugfs_elem_bytes = debugfs_create_u32("element_bytes", 0604,
+						 abe->debugfs_root,
+						 &abe->dbg_elem_bytes);
+	if (!abe->debugfs_elem_bytes)
+		dev_warn(&pdev->dev, "failed to create element size debugfs file\n");
+
+	abe->debugfs_size = debugfs_create_u32("msecs", 0644,
+						 abe->debugfs_root,
+						 &abe->dbg_buffer_msecs);
+	if (!abe->debugfs_size)
+		dev_warn(&pdev->dev, "failed to create buffer size debugfs file\n");
+
+	abe->debugfs_circ = debugfs_create_bool("circular", 0644,
+						 abe->debugfs_root,
+						 &abe->dbg_circular);
+	if (!abe->debugfs_size)
+		dev_warn(&pdev->dev, "failed to create circular mode debugfs file\n");
+
+	abe->debugfs_data = debugfs_create_file("debug", 0644,
+						 abe->debugfs_root,
+						 abe, &abe_data_fops);
+	if (!abe->debugfs_data)
+		dev_warn(&pdev->dev, "failed to create data debugfs file\n");
+
+	abe->dbg_buffer_msecs = 500;
+	init_waitqueue_head(&abe->wait);
+}
+
+static void abe_cleanup_debugfs(struct abe_data *abe)
+{
+	debugfs_remove_recursive(abe->debugfs_root);
+}
+
+#else
+
+static inline void abe_init_debugfs(struct abe_data *abe)
+{
+}
+
+static inline void abe_cleanup_debugfs(struct abe_data *abe)
+{
+}
+#endif
+
 static int abe_probe(struct snd_soc_platform *platform)
 {
 	abe_init_engine(platform);
@@ -2360,7 +2693,9 @@
 	if (ret)
 		goto err;
 
-		return 0;
+	abe_init_debugfs(abe);
+
+	return 0;
 
 err:
 #ifdef CONFIG_HAS_EARLYSUSPEND
@@ -2377,6 +2712,7 @@
 #ifdef CONFIG_HAS_EARLYSUSPEND
 		unregister_early_suspend(&abe->early_suspend);
 #endif
+	abe_cleanup_debugfs(abe);
 	snd_soc_unregister_platform(&pdev->dev);
 	kfree(priv);
 	return 0;
Index: kernel/sound/soc/omap/omap-abe-dsp.h
===================================================================
--- kernel.orig/sound/soc/omap/omap-abe-dsp.h	2011-04-29 12:22:34.469604264 +0900
+++ kernel/sound/soc/omap/omap-abe-dsp.h	2011-04-29 12:46:55.127104432 +0900
@@ -26,6 +26,7 @@
 
 /* Pong start offset of DMEM */
 #define ABE_DMEM_BASE_ADDRESS_MPU	0x40180000L
+#define ABE_DMEM_BASE_ADDRESS_L3	0x49080000L
 /* Ping pong buffer DMEM offset */
 #define ABE_DMEM_BASE_OFFSET_PING_PONG	0x4000
 
