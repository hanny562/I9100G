diff -Naur Kern_bckp/arch/arm/configs/android_omap4tab_rev04_defconfig Kernel/arch/arm/configs/android_omap4tab_rev04_defconfig
--- Kern_bckp/arch/arm/configs/android_omap4tab_rev04_defconfig	2011-02-10 23:57:09.180588508 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev04_defconfig	2011-02-11 00:30:30.549369504 +0530
@@ -2094,6 +2094,7 @@
 #
 # Kernel hacking
 #
+# CONFIG_KERNEL_LOGGING is not set
 # CONFIG_PRINTK_TIME is not set
 # CONFIG_ENABLE_WARN_DEPRECATED is not set
 # CONFIG_ENABLE_MUST_CHECK is not set
diff -Naur Kern_bckp/arch/arm/configs/android_omap4tab_rev05_defconfig Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig
--- Kern_bckp/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-02-10 23:57:09.180588508 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-02-11 00:32:25.729337294 +0530
@@ -2096,6 +2096,7 @@
 #
 # Kernel hacking
 #
+# CONFIG_KERNEL_LOGGING is not set
 # CONFIG_PRINTK_TIME is not set
 # CONFIG_ENABLE_WARN_DEPRECATED is not set
 # CONFIG_ENABLE_MUST_CHECK is not set
diff -Naur Kern_bckp/arch/arm/kernel/setup.c Kernel/arch/arm/kernel/setup.c
--- Kern_bckp/arch/arm/kernel/setup.c	2011-02-10 23:57:09.060593867 +0530
+++ Kernel/arch/arm/kernel/setup.c	2011-02-11 03:44:37.389369332 +0530
@@ -88,6 +88,13 @@
 unsigned int elf_hwcap;
 EXPORT_SYMBOL(elf_hwcap);
 
+#ifdef CONFIG_KERNEL_LOGGING
+/*
+ * kernel logging On/Off
+ */
+unsigned long logging_mode = 3;// 0= nothing, 1=ram logging only, 2=serial only, 3=both
+EXPORT_SYMBOL(logging_mode);
+#endif
 
 #ifdef MULTI_CPU
 struct processor processor;
diff -Naur Kern_bckp/arch/arm/kernel/traps.c Kernel/arch/arm/kernel/traps.c
--- Kern_bckp/arch/arm/kernel/traps.c	2011-02-10 23:57:09.060593867 +0530
+++ Kernel/arch/arm/kernel/traps.c	2011-02-11 00:13:29.719338544 +0530
@@ -260,6 +260,80 @@
 
 DEFINE_SPINLOCK(die_lock);
 
+#ifdef CONFIG_KERNEL_LOGGING
+#define LOGGING_RAM_MASK    1
+
+extern void __iomem * log_buf_base;
+extern unsigned long logging_mode;
+
+void dump_ram_buffer(void)
+{
+	char *bufAddr=NULL;
+	unsigned temp, index;
+	int i;
+	int max_limit=1048567;
+
+	if(!log_buf_base)
+		return;
+
+	//printk("**** Kernel ram buffer logging start \n");
+	bufAddr = (((char *)log_buf_base) +8);
+
+	/* We are reading from the ram buffer and writing to serial port using printk.
+	  In turn printk will be writing to the ram buffer. To ensure this recursive writing
+	  does not happen disable the ram buffer logging
+	 */
+	logging_mode &= (~LOGGING_RAM_MASK);
+	index = *((unsigned long *)log_buf_base);
+	if (index <0)
+	{
+		logging_mode |= (LOGGING_RAM_MASK);
+		return;
+	}
+
+	/*
+	find out if the buffer is already overwritten
+	As this cant be done reliably, safely assume that if 3 consequtive characters are null
+	then the buffer is not overwritten
+	*/
+	if((bufAddr[index] == 0x00) && (bufAddr[index+1] == 0x00) && (bufAddr[index+2] == 0x00))
+	{
+		max_limit=index;
+		index=0;
+	}
+
+	temp = index;
+	for (i=0;i<=max_limit;i++, index++)
+	{
+		if(index > 1048567)
+		{
+		//printk("*** starting of the buffer ***\n");
+		index =0;
+		temp = index;
+		}
+		if(bufAddr[index] == '\n')
+		{
+			if(index == 1048567)
+			{
+				bufAddr[index-1] = '\n';
+				bufAddr[index] = '\0';
+			}
+			else
+			{
+				index++;
+				i++;
+				bufAddr[index] = '\0';
+			}
+		printk("%s", &bufAddr[temp]);
+		temp = index+1;
+		}
+	}
+	logging_mode |= (LOGGING_RAM_MASK);
+	//printk("**** Kernel ram buffer logging done\n");
+}
+EXPORT_SYMBOL(dump_ram_buffer);
+#endif
+
 /*
  * This function is protected against re-entrancy.
  */
diff -Naur Kern_bckp/init/main.c Kernel/init/main.c
--- Kern_bckp/init/main.c	2011-02-10 23:57:13.607073806 +0530
+++ Kernel/init/main.c	2011-02-11 03:38:04.149372330 +0530
@@ -6,7 +6,7 @@
  *  GK 2/5/95  -  Changed to support mounting root fs via NFS
  *  Added initrd & change_root: Werner Almesberger & Hans Lermen, Feb '96
  *  Moan early if gcc is old, avoiding bogus kernels - Paul Gortmaker, May '96
- *  Simplified starting of init:  Michael A. Griffith <grif@acm.org> 
+ *  Simplified starting of init:  Michael A. Griffith <grif@acm.org>
  */
 
 #include <linux/types.h>
@@ -536,6 +536,11 @@
 	vmalloc_init();
 }
 
+#ifdef CONFIG_KERNEL_LOGGING
+void __iomem * log_buf_base = NULL;
+EXPORT_SYMBOL(log_buf_base);
+#endif
+
 asmlinkage void __init start_kernel(void)
 {
 	char * command_line;
@@ -699,6 +704,10 @@
 	taskstats_init_early();
 	delayacct_init();
 
+#ifdef CONFIG_KERNEL_LOGGING
+	log_buf_base = ioremap(0x9CE00000, 1024*1024);
+#endif
+
 	check_bugs();
 
 	acpi_early_init(); /* before LAPIC and SMP init */
diff -Naur Kern_bckp/kernel/panic.c Kernel/kernel/panic.c
--- Kern_bckp/kernel/panic.c	2011-02-10 23:57:07.770588976 +0530
+++ Kernel/kernel/panic.c	2011-02-11 03:20:59.048121699 +0530
@@ -77,12 +77,17 @@
  *
  *	This function never returns.
  */
+#ifdef CONFIG_KERNEL_LOGGING
+extern void dump_ram_buffer(void);
+#endif
 NORET_TYPE void panic(const char * fmt, ...)
 {
 	static char buf[1024];
 	va_list args;
 	long i;
-
+#ifdef CONFIG_KERNEL_LOGGING
+	dump_ram_buffer();
+#endif
 	/*
 	 * It's possible to come here directly from a panic-assertion and
 	 * not have preempt disabled. Some functions called from here want
diff -Naur Kern_bckp/kernel/printk.c Kernel/kernel/printk.c
--- Kern_bckp/kernel/printk.c	2011-02-10 23:57:07.770588976 +0530
+++ Kernel/kernel/printk.c	2011-02-11 01:09:11.198088335 +0530
@@ -592,6 +592,56 @@
 	_call_console_drivers(start_print, end, msg_level);
 }
 
+#ifdef CONFIG_KERNEL_LOGGING
+extern void __iomem * log_buf_base;
+static unsigned long * log_index;
+static int ioremapped = 0;
+static char *logging_buffer = NULL;
+#define LOGGING_RAMBUF_SIZE  (1024*1024)
+static int b_first_call_after_booting = 0;
+#define LOGGING_RAMBUF_DATA_SIZE  ((1024*1024)-8)
+#define LOGGING_INDEX_MASK	((1 << 20) - 1)
+#define LOGGING_BUF(idx) (logging_buffer[(idx) & LOGGING_INDEX_MASK])
+#define LOGGING_RAM_MASK	1
+#endif
+extern unsigned long logging_mode;
+#define PRINTK_MASK		2
+
+#ifdef CONFIG_KERNEL_LOGGING
+static void emit_log_char_RAMbuf(char* src, int len)
+{
+	int chunk=0;
+	int offset=0;
+
+	if((logging_mode & LOGGING_RAM_MASK) && (!ioremapped && log_buf_base  ))
+	{
+		logging_buffer = (char *)(log_buf_base+8);
+		log_index = (unsigned long *)log_buf_base;
+		(*log_index) = 0;
+		ioremapped=1;
+	}
+
+	if((ioremapped) && (logging_mode & LOGGING_RAM_MASK))
+	{
+		do {
+			if((*log_index + len) > 1048568)
+				chunk = 1048568 - *log_index;
+			else
+				chunk = len;
+
+			memcpy((void *)&LOGGING_BUF((*log_index)),src+offset, chunk);
+			*log_index += chunk;
+			len -= chunk;
+			offset += chunk;
+
+			if((*log_index) == 1048568)
+				(*log_index)=0;
+
+		}while(len > 0);
+	}
+}
+#endif
+
 static void emit_log_char(char c)
 {
 	LOG_BUF(log_end) = c;
@@ -839,6 +889,29 @@
 			emit_log_char('<');
 			emit_log_char(current_log_level + '0');
 			emit_log_char('>');
+#ifdef CONFIG_KERNEL_LOGGING
+			{
+				char tbuf[3];
+
+				// check kernel start
+				if( (b_first_call_after_booting == 0) &&
+					(logging_mode & LOGGING_RAM_MASK) &&
+					(!ioremapped && log_buf_base  ) )
+				{
+//					char tempStar[] = "********************************************\n";
+					char tempChar[] = "============== start kernel logging !! ==============\n";
+
+					b_first_call_after_booting = 1;
+
+//					emit_log_char_RAMbuf(tempStar, sizeof(tempStar));
+					emit_log_char_RAMbuf(tempChar, sizeof(tempChar));
+//					emit_log_char_RAMbuf(tempStar, sizeof(tempStar));
+				}
+
+				sprintf(tbuf, "<%1d>",default_message_loglevel);
+				emit_log_char_RAMbuf(tbuf, 3);
+			}
+#endif
 			printed_len += 3;
 			new_text_line = 0;
 
@@ -857,6 +930,9 @@
 
 				for (tp = tbuf; tp < tbuf + tlen; tp++)
 					emit_log_char(*tp);
+#ifdef CONFIG_KERNEL_LOGGING
+				emit_log_char_RAMbuf(tbuf, tlen);
+#endif
 				printed_len += tlen;
 			}
 
@@ -867,13 +943,16 @@
 		emit_log_char(*p);
 		if (*p == '\n')
 			new_text_line = 1;
+#ifdef CONFIG_KERNEL_LOGGING
+				emit_log_char_RAMbuf(printk_buf, strlen(printk_buf));
+#endif
 	}
 
 	/*
 	 * Try to acquire and then immediately release the
 	 * console semaphore. The release will do all the
 	 * actual magic (print out buffers, wake up klogd,
-	 * etc). 
+	 * etc).
 	 *
 	 * The acquire_console_semaphore_for_printk() function
 	 * will release 'logbuf_lock' regardless of whether it
diff -Naur Kern_bckp/lib/Kconfig.debug Kernel/lib/Kconfig.debug
--- Kern_bckp/lib/Kconfig.debug	2011-02-10 23:57:13.279364278 +0530
+++ Kernel/lib/Kconfig.debug	2011-02-11 00:37:10.369372375 +0530
@@ -1,3 +1,8 @@
+config KERNEL_LOGGING
+        bool "Enable RamDump Logging"
+        default n
+        help
+          Logging printk messages to RAM about 1M.
 
 config PRINTK_TIME
 	bool "Show timing information on printks"
