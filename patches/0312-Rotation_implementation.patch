Index: kernel/arch/arm/plat-omap/dma.c
===================================================================
--- kernel.orig/arch/arm/plat-omap/dma.c	2011-04-14 15:04:18.188255379 +0530
+++ kernel/arch/arm/plat-omap/dma.c	2011-04-14 15:06:20.247014771 +0530
@@ -423,6 +423,22 @@
 }
 EXPORT_SYMBOL(omap_set_dma_dest_burst_mode);
 
+
+void omap_dma_set_prefetch(int lch, int enable)
+{
+	u32 l;
+
+	l = dma_read(CCR(lch));
+	l &= ~(1 << 23);
+	if (enable) {
+		l |= (1 << 23);
+		l &= 0xfeffffff;
+	}
+	dma_write(l, CCR(lch));
+}
+EXPORT_SYMBOL(omap_dma_set_prefetch);
+
+
 void omap_enable_dma_irq(int lch, u16 bits)
 {
 	dma_chan[lch].enabled_irqs |= bits;
Index: kernel/arch/arm/plat-omap/include/plat/dma.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/dma.h	2011-04-14 15:04:48.850740021 +0530
+++ kernel/arch/arm/plat-omap/include/plat/dma.h	2011-04-14 15:06:20.247014771 +0530
@@ -405,6 +405,7 @@
 extern void omap_set_dma_dest_burst_mode(int lch,
 					 enum omap_dma_burst_mode burst_mode);
 
+extern void omap_dma_set_prefetch(int lch, int enable);
 extern void omap_set_dma_params(int lch,
 				struct omap_dma_channel_params *params);
 
Index: kernel/drivers/gpu/pvr/omaplfb/omaplfb_linux.c
===================================================================
--- kernel.orig/drivers/gpu/pvr/omaplfb/omaplfb_linux.c	2011-04-14 15:05:10.090765263 +0530
+++ kernel/drivers/gpu/pvr/omaplfb/omaplfb_linux.c	2011-04-14 15:06:20.247014771 +0530
@@ -31,6 +31,7 @@
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/fb.h>
+#include <linux/delay.h>
 #include <asm/io.h>
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
@@ -63,6 +64,10 @@
 #endif
 #endif
 
+#include <plat/display.h>
+#include <plat/dma.h>
+#include <linux/wait.h>
+#include <mach/tiler.h>
 
 #include "img_defs.h"
 #include "servicesext.h"
@@ -70,6 +75,10 @@
 #include "omaplfb.h"
 #include "pvrmodule.h"
 
+
+struct vid_Tiler_dma tiler_dma_tx;
+struct oly_mgr_flds ovlDatafld;
+
 MODULE_SUPPORTED_DEVICE(DEVNAME);
 
 #if defined(CONFIG_OUTER_CACHE)  /* Kernel config option */
@@ -179,10 +188,11 @@
 	struct fb_info * framebuffer = psDevInfo->psLINFBInfo;
 	struct omapfb_info *ofbi = FB2OFB(framebuffer);
 	unsigned long fb_offset;
-	int i;
-
+	struct fb_var_screeninfo *var = &framebuffer->var;
+	int i,rotation;
+	unsigned int paddr = 0;
 	fb_offset = aPhyAddr - psDevInfo->sSystemBuffer.sSysAddr.uiAddr;
-
+	rotation = (var->rotate + ofbi->rotation[i]) % 4;
 	for(i = 0; i < ofbi->num_overlays ; i++)
 	{
 		struct omap_dss_device *display = NULL;
@@ -193,12 +203,16 @@
 
 		overlay = ofbi->overlays[i];
 		manager = overlay->manager;
-		overlay->get_overlay_info( overlay, &overlay_info );
-
+		overlay->get_overlay_info(overlay, &overlay_info );
 		overlay_info.paddr = framebuffer->fix.smem_start + fb_offset;
 		overlay_info.vaddr = framebuffer->screen_base + fb_offset;
+		if (ofbi->rotation_type ==  OMAP_DSS_ROT_TILER) {
+			/* copy from 1d to 2d shall happen only once */
+			if(i == 0)
+				paddr = copy1DTo2D(overlay_info.paddr);
+			overlay_info.paddr = paddr;
+		}
 		overlay->set_overlay_info(overlay, &overlay_info);
-
 		if (manager) {
 			display = manager->device;
 			/* No display attached to this overlay, don't update */
@@ -207,7 +221,6 @@
 			driver = display->driver;
 			manager->apply(manager);
 		}
-
 		if (dss_ovl_manually_updated(overlay)) {
 			if (driver->sched_update)
 				driver->sched_update(display, 0, 0,
@@ -314,7 +327,6 @@
 	odev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, odev);
 	omaplfb_create_sysfs(odev);
-
 	return 0;
 }
 
@@ -510,6 +522,115 @@
 #endif
 }
 
+int tiler_fb_mem_init(struct fb_info *fbi){
+
+	enum tiler_fmt fmt;
+	int rc = -1;
+	int cnt;
+	int bytespp;
+	int stride;
+	struct fb_var_screeninfo *var = &fbi->var;
+	ovlDatafld.width = var->xres;
+	ovlDatafld.height = var->yres;
+	switch (var->bits_per_pixel) {
+		case 16:
+		fmt = TILFMT_16BIT;
+		bytespp = 2;
+		break;
+
+		case 32:
+		fmt = TILFMT_32BIT;
+		bytespp = 4;
+		break;
+
+		default:
+			printk(KERN_ERR "DSSMGR-OLY: Invalid Mirror Color Format\n");
+			goto failed;
+			break;
+	}
+	cnt = 2;
+	tiler_alloc_packed(&cnt, fmt, ovlDatafld.width, ovlDatafld.height,
+					(void **) ovlDatafld.copy_buf,
+					(void **) ovlDatafld.copy_buf_alloc, 1);
+	if (cnt != 2)
+		printk(KERN_ERR "DSSMGR-OLY: Failed to allocate memory Alloc\n");
+	else
+		rc = 0;
+		printk("Memory allocation finished \n");
+
+	ovlDatafld.copy_buf_idx = 0;
+	ovlDatafld.dma_en = (ovlDatafld.width * bytespp) / 4; /* 32 bit ES */
+	ovlDatafld.dma_fn = ovlDatafld.height;
+	ovlDatafld.dma_src_fi = (var->xres * bytespp) - (ovlDatafld.dma_en * 4) + 1;
+	stride = tiler_stride(tiler_get_natural_addr((void *)ovlDatafld.copy_buf[0]));
+	ovlDatafld.dma_dst_fi = stride - (ovlDatafld.dma_en * 4) + 1;
+
+failed:
+	return rc;
+}
+ void omap_vout_Tiler_dma_tx_callback(int lch, u16 ch_status, void *data)
+{
+	struct vid_Tiler_dma *t = (struct vid_Tiler_dma *) data;
+	t->tx_status = 1;
+	wake_up_interruptible(&t->wait);
+}
+
+void dma_init(){
+	int ret = -1;
+	tiler_dma_tx.dev_id = OMAP_DMA_NO_DEVICE;
+	tiler_dma_tx.dma_ch = -1;
+	tiler_dma_tx.req_status = DMA_CHAN_ALLOTED;
+
+	ret = omap_request_dma(tiler_dma_tx.dev_id, "Tiler DMA TX",
+			omap_vout_Tiler_dma_tx_callback,
+			(void *) &tiler_dma_tx, &tiler_dma_tx.dma_ch);
+
+	if (ret < 0) {
+		tiler_dma_tx.req_status = DMA_CHAN_NOT_ALLOTED;
+		printk("error in DMA init");
+	}
+	init_waitqueue_head(&tiler_dma_tx.wait);
+}
+
+//Need to pass src address from where we have to start copy.
+unsigned int copy1DTo2D(int phyadd){
+
+	u32 src_paddr;
+	u32 dst_paddr;
+	ovlDatafld.copy_buf_idx = (ovlDatafld.copy_buf_idx) ? 0 : 1;
+	src_paddr = phyadd; //data->info[s_idx].paddr;
+	dst_paddr = ovlDatafld.copy_buf[ovlDatafld.copy_buf_idx];
+
+	omap_set_dma_transfer_params(tiler_dma_tx.dma_ch, OMAP_DMA_DATA_TYPE_S32,
+			ovlDatafld.dma_en, ovlDatafld.dma_fn, OMAP_DMA_SYNC_ELEMENT,tiler_dma_tx.dev_id, 0x0);
+
+	omap_set_dma_src_params(tiler_dma_tx.dma_ch, 0, OMAP_DMA_AMODE_DOUBLE_IDX,
+			src_paddr, 1, ovlDatafld.dma_src_fi);
+
+	omap_set_dma_src_data_pack(tiler_dma_tx.dma_ch, 1); //venky
+	omap_set_dma_src_burst_mode(tiler_dma_tx.dma_ch, OMAP_DMA_DATA_BURST_16);
+	omap_set_dma_dest_params(tiler_dma_tx.dma_ch, 0, OMAP_DMA_AMODE_DOUBLE_IDX,
+			dst_paddr, 1, ovlDatafld.dma_dst_fi);
+	omap_set_dma_dest_data_pack(tiler_dma_tx.dma_ch, 1); //venky
+	omap_set_dma_dest_burst_mode(tiler_dma_tx.dma_ch, OMAP_DMA_DATA_BURST_16);
+	omap_dma_set_prio_lch(tiler_dma_tx.dma_ch,DMA_CH_PRIO_HIGH,DMA_CH_PRIO_HIGH);//venky - Set read and write priority
+	omap_dma_set_prefetch(tiler_dma_tx.dma_ch,1);//venky:Setting prefetch
+
+	omap_dma_set_global_params(DMA_DEFAULT_ARB_RATE, 0xFF, 0);//Venky - Increased FIFO Depth
+
+	omap_start_dma(tiler_dma_tx.dma_ch);
+
+	wait_event_interruptible_timeout(tiler_dma_tx.wait, tiler_dma_tx.tx_status,
+							DMA_TX_TIMEOUT);
+
+	if (!tiler_dma_tx.tx_status) {
+		printk(KERN_WARNING "DSSMGR-OLY: DMA timeout\n");
+	omap_stop_dma(tiler_dma_tx.dma_ch);
+	return -EIO;
+	}
+	return dst_paddr;
+}
+
 late_initcall(OMAPLFB_Init);
 module_exit(OMAPLFB_Cleanup);
 
Index: kernel/drivers/video/omap2/dss/dispc.c
===================================================================
--- kernel.orig/drivers/video/omap2/dss/dispc.c	2011-04-14 15:05:34.160733507 +0530
+++ kernel/drivers/video/omap2/dss/dispc.c	2011-04-14 15:06:20.258235531 +0530
@@ -3220,6 +3220,8 @@
 	/* Reset the Tiler burst bit */
 	REG_FLD_MOD(dispc_reg_att[plane], 0x0, 29, 29); /*BURSTTYPE */
 
+	REG_FLD_MOD(dispc_reg_att[plane], 0x0, 29, 29); /*BURSTTYPE */
+
 	if (rotation_type == OMAP_DSS_ROT_TILER) {
 #ifdef CONFIG_TILER_OMAP
 		int bpp = color_mode_to_bpp(color_mode) / 8;
Index: kernel/drivers/video/omap2/omapfb/omapfb-main.c
===================================================================
--- kernel.orig/drivers/video/omap2/omapfb/omapfb-main.c	2011-04-14 15:05:47.880756468 +0530
+++ kernel/drivers/video/omap2/omapfb/omapfb-main.c	2011-04-14 15:06:20.268231916 +0530
@@ -35,6 +35,7 @@
 #include <plat/display.h>
 #include <plat/vram.h>
 #include <plat/vrfb.h>
+#include <plat/dma.h>
 #ifdef CONFIG_TILER_OMAP
 #include <mach/tiler.h>
 #endif
@@ -1065,8 +1066,10 @@
 	else
 		mirror = ofbi->mirror;
 
-	info.paddr = data_start_p;
-	info.vaddr = data_start_v;
+	if(ofbi->rotation_type != OMAP_DSS_ROT_TILER) {
+		info.paddr = data_start_p;
+		info.vaddr = data_start_v;
+	}
 	info.screen_width = screen_width;
 	info.width = xres;
 	info.height = yres;
@@ -1126,7 +1129,11 @@
 	struct omap_overlay *ovl;
 	u16 outw, outh, w, h;
 	u16 posx, posy;
-	int i;
+	int i, j;
+	struct omap_overlay_info overlay_info;
+	static int tilerMemAlloc = 0;
+	int useTiler = 0;
+	unsigned int paddr = 0;
 	/* Assigning default values */
 	outw = var->xres;
 	outh = var->yres;
@@ -1138,21 +1145,56 @@
 
 	WARN_ON(!atomic_read(&ofbi->region->lock_count));
 
-	for (i = 0; i < ofbi->num_overlays; i++) {
-		ovl = ofbi->overlays[i];
+		for (i = 0; i < ofbi->num_overlays ; i++) {
+			rotation  +=  (var->rotate + ofbi->rotation[i]) % 4;
+			if (rotation != 0)
+				useTiler = 1;
+		}
+		if (useTiler) {
+			/*Allocate the Tiler memory and requesting for dma channel.*/
+			if (!tilerMemAlloc) {
+				tiler_fb_mem_init(fbi);
+				tilerMemAlloc = 1;
+				dma_init();
+				ofbi->rotation_type = OMAP_DSS_ROT_TILER;
+				printk("tilerMemAlloc  = %d\n", tilerMemAlloc);
+			}
+		}
+		else {
+			if (tilerMemAlloc) {
+				for (j = 0; j < 2; j++) {
+					printk("addr: %x\n", ovlDatafld.copy_buf[j]);
+					if (ovlDatafld.copy_buf[j])
+						r = tiler_free(ovlDatafld.copy_buf[j]);
+					if (r != 0)
+						printk("tiler free failed %d\n", j);
+				}
+			tilerMemAlloc = 0;
+			omap_free_dma(tiler_dma_tx.dma_ch);
+			printk(" tilerMemAlloc = %d\n", tilerMemAlloc);
+			ofbi->rotation_type = OMAP_DSS_ROT_DMA;
+			}
+		}
 
-		DBG("apply_changes, fb %d, ovl %d\n", ofbi->id, ovl->id);
+		for (i = 0; i < ofbi->num_overlays; i++) {
+			ovl = ofbi->overlays[i];
 
-		if (ofbi->region->size == 0) {
-			/* the fb is not available. disable the overlay */
-			omapfb_overlay_enable(ovl, 0);
-			if (!init && ovl->manager)
-				ovl->manager->apply(ovl->manager);
-			continue;
-		}
+			DBG("apply_changes, fb %d, ovl %d\n", ofbi->id, ovl->id);
+			if (ofbi->region->size == 0) {
+				/* the fb is not available. disable the overlay */
+				omapfb_overlay_enable(ovl, 0);
+				if (!init && ovl->manager)
+					ovl->manager->apply(ovl->manager);
+				continue;
+			}
 
 		rotation = (var->rotate + ofbi->rotation[i]) % 4;
-
+		if (useTiler) {
+			/* copy from 1d to 2d shall happen only once */
+			if (i == 0)
+				paddr = copy1DTo2D(ovl->info.paddr);
+			ovl->info.paddr = paddr;
+		}
 		/* Rotation not supported if framebuffer is not in tiler
 		 * memory for omap4430.
 		 */
@@ -1638,7 +1680,6 @@
 #ifdef CONFIG_TILER_OMAP
 	u16 h = 0, w = 0;
 #endif
-
 	rg = ofbi->region;
 
 	rg->paddr = 0;
Index: kernel/drivers/video/omap2/omapfb/omapfb.h
===================================================================
--- kernel.orig/drivers/video/omap2/omapfb/omapfb.h	2011-04-14 15:06:02.900760424 +0530
+++ kernel/drivers/video/omap2/omapfb/omapfb.h	2011-04-14 15:06:20.268231916 +0530
@@ -42,6 +42,7 @@
 #endif
 
 #define FB2OFB(fb_info) ((struct omapfb_info *)(fb_info->par))
+#define DMA_TX_TIMEOUT 10000000
 
 /* max number of overlays to which a framebuffer data can be direct */
 #define OMAPFB_MAX_OVL_PER_FB 3
@@ -109,6 +110,33 @@
 	struct fb_bitfield transp;
 };
 
+enum dma_channel_state {
+	DMA_CHAN_NOT_ALLOTED,
+	DMA_CHAN_ALLOTED,
+};
+
+struct oly_mgr_flds {
+int width;
+int height;
+int mode;
+unsigned long copy_buf[2];
+unsigned long copy_buf_alloc[2];
+int copy_dst_idx;
+int copy_buf_idx;
+int dma_en;
+int dma_fn;
+int dma_src_fi;
+int dma_dst_fi;
+};
+
+struct vid_Tiler_dma {
+	int dev_id;
+	int dma_ch;
+	int req_status;
+	int tx_status;
+	wait_queue_head_t wait;
+};
+
 void set_fb_fix(struct fb_info *fbi);
 int check_fb_var(struct fb_info *fbi, struct fb_var_screeninfo *var);
 int omapfb_realloc_fbmem(struct fb_info *fbi, unsigned long size, int type);
@@ -128,6 +156,16 @@
 int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 		u16 posx, u16 posy, u16 outw, u16 outh);
 
+int tiler_fb_mem_init(struct fb_info *fbi);
+
+void dma_init(void);
+
+unsigned int copy1DTo2D(int phyadd);
+
+extern struct vid_Tiler_dma tiler_dma_tx;
+extern  struct oly_mgr_flds ovlDatafld;
+
+
 /* find the display connected to this fb, if any */
 static inline struct omap_dss_device *fb2display(struct fb_info *fbi)
 {
