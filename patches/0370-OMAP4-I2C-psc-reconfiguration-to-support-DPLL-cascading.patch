From 30a928f67a9a31cc383bfd9ad78ef77e261462dd Mon Sep 17 00:00:00 2001
From: Madhusudhan Chikkature <madhu.cr@ti.com>
Date: Fri, 13 May 2011 15:51:08 -0500
Subject: [PATCH] OMAP4:I2C psc reconfiguration to support DPLL cascading

The I2C clocks change from 96MHz to 48MHz in dpll cascading
mode.The I2C driver is registerd with DPLL cascading and
the change in clocks is handled.The device speed of > 1Mbps
is not supported in DPLL cascading mode.

Change-Id: I54eb4c75116cc6241b3832fdb9d2de56d5a8bab2
Signed-off-by: Madhusudhan Chikkature <madhu.cr@ti.com>
---
 drivers/i2c/busses/i2c-omap.c |  127 +++++++++++++++++++++++++++++++++++++++++
 1 files changed, 127 insertions(+), 0 deletions(-)

Index: kernel/drivers/i2c/busses/i2c-omap.c
===================================================================
--- kernel.orig/drivers/i2c/busses/i2c-omap.c	2011-05-21 00:24:32.277095825 +0900
+++ kernel/drivers/i2c/busses/i2c-omap.c	2011-05-21 00:44:26.068389115 +0900
@@ -40,6 +40,8 @@
 #include <linux/slab.h>
 #include <linux/i2c-omap.h>
 #include <linux/pm_runtime.h>
+#include <linux/notifier.h>
+#include <plat/clock.h>
 
 /* I2C controller revisions */
 #define OMAP_I2C_REV_2			0x20
@@ -171,6 +173,9 @@
 #define I2C_OMAP_ERRATA_I207		(1 << 0)
 #define I2C_OMAP3_1P153			(1 << 1)
 
+#define OMAP_I2C_MASTER_CLOCK		96000000
+#define OMAP_I2C_DPLL_CLOCK		49152000
+
 struct omap_i2c_dev {
 	struct device		*dev;
 	void __iomem		*base;		/* virtual */
@@ -202,6 +207,11 @@
 	u16			syscstate;
 	u16			westate;
 	u16			errata;
+	struct notifier_block	nb;
+	int                     dpll_entry;
+	int                     dpll_exit;
+	unsigned long		i2c_fclk_rate;
+	spinlock_t		dpll_lock;
 };
 
 const static u8 reg_map[] = {
@@ -350,6 +360,35 @@
 	pm_runtime_put_sync(&pdev->dev);
 }
 
+static int i2c_dpll_notifier(struct notifier_block *nb,
+	unsigned long val, void *data) {
+	struct omap_i2c_dev *dev =
+		container_of(nb, struct omap_i2c_dev, nb);
+	struct clk_notifier_data *cnd = (struct clk_notifier_data *)data;
+
+	spin_lock(&dev->dpll_lock);
+
+	if (val == CLK_POST_RATE_CHANGE &&
+		cnd->old_rate == OMAP_I2C_DPLL_CLOCK) {
+			dev->dpll_entry = 1;
+	} else if (val == CLK_PRE_RATE_CHANGE &&
+			cnd->old_rate == OMAP_I2C_DPLL_CLOCK) {
+		/*
+		 * If the device is not idle in the DPLL exit
+		 * wait for the bus to become free.
+		 * FIXME: Can not sleep here.
+		 */
+		if (dev->idle == 0)
+			while (omap_i2c_read_reg(dev,
+				OMAP_I2C_STAT_REG) & OMAP_I2C_STAT_BB);
+		dev->dpll_exit = 1;
+	}
+
+	spin_unlock(&dev->dpll_lock);
+
+	return 0;
+}
+
 static int omap_i2c_init(struct omap_i2c_dev *dev)
 {
 	u16 psc = 0, scll = 0, sclh = 0, buf = 0;
@@ -455,6 +494,7 @@
 			internal_clk = 4000;
 		fclk = clk_get(dev->dev, "fck");
 		fclk_rate = clk_get_rate(fclk) / 1000;
+		dev->i2c_fclk_rate = fclk_rate;
 
 		/* Compute prescaler divisor */
 		psc = fclk_rate / internal_clk;
@@ -666,6 +706,59 @@
 	return -EIO;
 }
 
+static void
+omap_i2c_dpll_configure(struct omap_i2c_dev *dev,
+			struct omap_i2c_bus_platform_data *pdata,
+			unsigned long fclk_rate) {
+	unsigned long internal_clk;
+
+	u16 psc = 0, scll = 0, sclh = 0;
+	u16 fsscll = 0, fssclh = 0, hsscll = 0, hssclh = 0;
+
+	if ((pdata->features & I2C_HAS_FASTMODE_PLUS)
+			&& dev->speed > 1000)
+		internal_clk = 96000;
+	else if (dev->speed > 400)
+		internal_clk = 19200;
+	else if (dev->speed > 100)
+		internal_clk = 9600;
+	else
+		internal_clk = 4000;
+
+	psc = fclk_rate / internal_clk;
+	psc = psc - 1;
+
+	if (dev->speed > 400) {
+		unsigned long scl;
+
+		/* For first phase of HS mode */
+		scl = internal_clk / 400;
+		fsscll = scl - (scl / 3) - 7;
+		fssclh = (scl / 3) - 5;
+
+		/* For second phase of HS mode */
+		scl = fclk_rate / dev->speed;
+		hsscll = scl - (scl / 3) - 7;
+		hssclh = (scl / 3) - 5;
+	} else if (dev->speed > 100) {
+		unsigned long scl;
+
+		/* Fast mode */
+		scl = internal_clk / dev->speed;
+		fsscll = scl - (scl / 3) - 7;
+		fssclh = (scl / 3) - 5;
+	} else {
+		/* Standard mode */
+		fsscll = internal_clk / (dev->speed * 2) - 7;
+		fssclh = internal_clk / (dev->speed * 2) - 5;
+	}
+	scll = (hsscll << OMAP_I2C_SCLL_HSSCLL) | fsscll;
+	sclh = (hssclh << OMAP_I2C_SCLH_HSSCLH) | fssclh;
+
+	dev->pscstate = psc;
+	dev->scllstate = scll;
+	dev->sclhstate = sclh;
+}
 
 /*
  * Prepare controller for a transaction and call omap_i2c_xfer_msg
@@ -677,6 +770,11 @@
 	struct omap_i2c_dev *dev = i2c_get_adapdata(adap);
 	int i;
 	int r;
+	struct platform_device *pdev;
+	struct omap_i2c_bus_platform_data *pdata;
+
+	pdev = container_of(dev->dev, struct platform_device, dev);
+	pdata = pdev->dev.platform_data;
 
 	/*
 	 * hwspinlock is used to time share the I2C module between A9 and Ducati
@@ -685,6 +783,24 @@
 	 */
 
 	omap_i2c_hwspinlock_lock(dev);
+
+	spin_lock(&dev->dpll_lock);
+	if (dev->dpll_entry == 1) {
+		dev->dpll_entry = 0;
+		/*
+		 * FIXME: Speed > 1000 can not be supported
+		 * in DPLL cascading mode.
+		 */
+		if (dev->speed > 1000)
+			return -1;
+		omap_i2c_dpll_configure(dev, pdata, OMAP_I2C_DPLL_CLOCK / 1000);
+
+	} else if (dev->dpll_exit == 1) {
+		dev->dpll_exit = 0;
+		omap_i2c_dpll_configure(dev, pdata, dev->i2c_fclk_rate);
+	}
+	spin_unlock(&dev->dpll_lock);
+
 	omap_i2c_unidle(dev);
 	enable_irq(dev->irq);
 
@@ -1012,6 +1128,7 @@
 	struct i2c_adapter	*adap;
 	struct resource		*mem, *irq, *ioarea;
 	struct omap_i2c_bus_platform_data *pdata = pdev->dev.platform_data;
+	struct clk *fclks;
 	irq_handler_t isr;
 	int r;
 	u32 speed = 0;
@@ -1106,6 +1223,16 @@
 				       (1000 * speed / 8);
 	}
 
+	/* Register notifiers to support DPLL cascading */
+	if (cpu_is_omap44xx()) {
+		fclks = clk_get(dev->dev, "fck");
+		dev->nb.notifier_call = i2c_dpll_notifier;
+		dev->nb.next = NULL;
+		clk_notifier_register(fclks, &dev->nb);
+		clk_put(fclks);
+		spin_lock_init(&dev->dpll_lock);
+	}
+
 	/* reset ASAP, clearing any IRQs */
 	omap_i2c_init(dev);
 
