Index: kernel/drivers/video/omap2/dss/hdmi.c
===================================================================
--- kernel.orig/drivers/video/omap2/dss/hdmi.c	2011-06-21 21:13:54.000000000 +0530
+++ kernel/drivers/video/omap2/dss/hdmi.c	2011-06-23 09:46:56.210815650 +0530
@@ -58,6 +58,7 @@
 #endif
 
 
+bool hdmi_suspend;
 static int hdmi_enable_video(struct omap_dss_device *dssdev);
 static void hdmi_disable_video(struct omap_dss_device *dssdev);
 static int hdmi_suspend_video(struct omap_dss_device *dssdev);
@@ -126,6 +127,7 @@
 static int in_reset;
 #define HDMI_IN_RESET		0x1000
 static bool hdmi_connected;
+static bool in_dispc_digit_reset;
 
 #define HDMI_PLLCTRL		0x58006200
 #define HDMI_PHY		0x58006300
@@ -139,6 +141,7 @@
 static u8 edid_set;
 static u8 header[8] = {0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0};
 static u8 custom_set;
+static bool in_hdmi_restart;
 
 enum hdmi_ioctl_cmds {
 	HDMI_ENABLE,
@@ -329,6 +332,7 @@
 	struct platform_device *pdev;
 	void (*hdmi_start_frame_cb)(void);
 	void (*hdmi_stop_frame_cb)(void);
+	void (*hdmi_irq_cb)(int status);
 } hdmi;
 
 struct hdmi_cm {
@@ -336,6 +340,26 @@
 	int mode;
 };
 struct omap_video_timings edid_timings;
+void hdmi_sync_lost_isr(void *arg, unsigned int irqstatus)
+{
+	if (in_dispc_digit_reset)
+		return;
+	else
+		in_dispc_digit_reset = true;
+
+	if (irqstatus & DISPC_IRQ_SYNC_LOST_DIGIT &&
+	    hdmi_connected &&
+	    hdmi_power == HDMI_POWER_FULL) {
+		DSSINFO("\nStopping Digital channel...\n");
+		HDMI_W1_StopVideoFrame(HDMI_WP);
+		dispc_enable_digit_out(0);
+		mdelay(20);
+		DSSINFO("Stating Digital channel...\n");
+		HDMI_W1_StartVideoFrame(HDMI_WP);
+		dispc_enable_digit_out(1);
+	}
+	in_dispc_digit_reset = false;
+}
 
 /* Set / Release 48MHz phy clock, L3-200 MHz and c-state constraints */
 static int hdmi_set_48Mhz_l3_cstr(struct omap_dss_device *dssdev, bool enable)
@@ -371,6 +395,11 @@
 			DSSERR("Unable to %s core cstr\n",
 			       enable ? "set" : "remove");
 #endif
+		/* register / unregister SYNC_LOST_DIGIT ISR*/
+		enable ? omap_dispc_register_isr(hdmi_sync_lost_isr, dssdev,
+					DISPC_IRQ_SYNC_LOST_DIGIT) :
+			omap_dispc_unregister_isr(hdmi_sync_lost_isr, dssdev,
+				       DISPC_IRQ_SYNC_LOST_DIGIT);
 	}
 
 err:
@@ -619,6 +648,7 @@
 							audio_power_store);
 static DEVICE_ATTR(code, S_IRUGO, hdmi_code_show, NULL);
 
+extern hdcp_disable_ctl(void);
 static int set_hdmi_hot_plug_status(struct omap_dss_device *dssdev, bool onoff)
 {
 	int ret = 0;
@@ -1030,12 +1060,14 @@
 
 static int hdmi_panel_suspend(struct omap_dss_device *dssdev)
 {
+	hdmi_suspend = true;
 	hdmi_suspend_video(dssdev);
 	return 0;
 }
 
 static int hdmi_panel_resume(struct omap_dss_device *dssdev)
 {
+	hdmi_suspend = false;
 	hdmi_resume_video(dssdev);
 	return 0;
 }
@@ -1114,6 +1146,8 @@
 
 	hdmi.hdmi_start_frame_cb = 0;
 	hdmi.hdmi_stop_frame_cb = 0;
+	hdmi.hdmi_irq_cb = 0;
+	in_hdmi_restart = false;
 
 	hdmi_enable_clocks(0);
 	/* Get the major number for this module */
@@ -1393,6 +1427,7 @@
 		/* signal suspend request to audio */
 		hdmi_notify_pwrchange(HDMI_EVENT_POWEROFF);
 
+		DSSINFO("Audio powering OFf...\n");
 		/* allow audio power to go off */
 		res = wait_event_interruptible_timeout(audio_wq,
 			!audio_on, msecs_to_jiffies(1000));
@@ -1462,6 +1497,34 @@
 	return hdmi_rxdet();
 }
 
+static void hdmi_notify_status(struct omap_dss_device *dssdev, bool onoff)
+{
+	bool notify = !audio_on && !onoff;
+	/* turn off hdmi audio if ON */
+	if (!onoff)
+		hdmi_audio_power_off();
+	else {
+		mutex_unlock(&hdmi.lock_aux);
+		hdmi_notify_pwrchange(HDMI_EVENT_POWERON);
+		mutex_unlock(&hdmi.lock);
+		mdelay(100);
+		mutex_lock(&hdmi.lock);
+		mutex_lock(&hdmi.lock_aux);
+	}
+
+	set_hdmi_hot_plug_status(dssdev, onoff ? true : false);
+
+	/* Allow suffecient delay to stabilize the Digital channel
+	 * from sync lost digit errors
+	 */
+	mutex_unlock(&hdmi.lock_aux);
+	mutex_unlock(&hdmi.lock);
+	mdelay(100);
+	mutex_lock(&hdmi.lock);
+	if (notify)
+		hdmi_notify_pwrchange(HDMI_EVENT_POWEROFF);
+	mutex_lock(&hdmi.lock_aux);
+}
 static void hdmi_work_queue(struct work_struct *ws)
 {
 	struct hdmi_work_struct *work =
@@ -1470,7 +1533,6 @@
 	int r = work->r;
 	unsigned long time;
 	static ktime_t last_connect, last_disconnect;
-	bool notify;
 	int action = 0;
 
 	mutex_lock(&hdmi.lock);
@@ -1486,7 +1548,11 @@
 		"hdmi_power = %d", r, dssdev->state, hdmi_power);
 	if (r & (HDMI_CONNECT | HDMI_DISCONNECT))
 		action = (hdmi_is_connected()) ? HDMI_CONNECT : HDMI_DISCONNECT;
-	printk("action ::: %d\n",action);
+
+	DSSDBG("\n\n");
+	DSSINFO("<%s> action = %d, r = 0x%x, hdmi_power = %d,"
+		" hdmi_connected = %d",
+		__func__, action, r, hdmi_power, hdmi_connected);
 	if (action & HDMI_DISCONNECT) {
 		/* cancel auto-notify */
 		mutex_unlock(&hdmi.lock_aux);
@@ -1509,21 +1575,7 @@
 		if (hdmi_connected)
 			goto done;
 
-		
-		/* turn audio power off */
-		notify = !audio_on; /* notification is sent if audio is on */
-		hdmi_audio_power_off();
-
-		set_hdmi_hot_plug_status(dssdev, false);
-		/* ignore return value for now */
-
-		mutex_unlock(&hdmi.lock_aux);
-		mutex_unlock(&hdmi.lock);
-		mdelay(100);
-		mutex_lock(&hdmi.lock);
-		if (notify)
-			hdmi_notify_pwrchange(HDMI_EVENT_POWEROFF);
-		mutex_lock(&hdmi.lock_aux);
+		hdmi_notify_status(dssdev, false);
 
 		if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
 			/* HDMI is disabled, no need to process */
@@ -1558,15 +1610,9 @@
 	if (action & HDMI_CONNECT &&
 	    hdmi_power == HDMI_POWER_FULL &&
 	    custom_set) {
-
 		user_hpd_state = false;
-		mutex_unlock(&hdmi.lock_aux);
-		hdmi_notify_pwrchange(HDMI_EVENT_POWERON);
-		mutex_unlock(&hdmi.lock);
-		mdelay(100);
-		mutex_lock(&hdmi.lock);
-		mutex_lock(&hdmi.lock_aux);
-		set_hdmi_hot_plug_status(dssdev, true);
+
+		hdmi_notify_status(dssdev, true);
 	}
 
 	if ((action & HDMI_CONNECT) && (video_power == HDMI_POWER_MIN) &&
@@ -1582,11 +1628,6 @@
 		edid_set = false;
 		custom_set = true;
 		hdmi_reconfigure(dssdev);
-		mutex_unlock(&hdmi.lock_aux);
-		mutex_unlock(&hdmi.lock);
-		mdelay(100);
-		mutex_lock(&hdmi.lock);
-		mutex_lock(&hdmi.lock_aux);
 		if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
 			/* HDMI is disabled, no need to process */
 			goto done;
@@ -1621,33 +1662,15 @@
 			 * send any hot plug event to the userspace in this case
 			 *  and reset irq's before returning.
 			 */
+			if (hdmi_opt_clk_state) {
 			hdmi_set_irqs(0);
 			goto hpd_modify;
+			} else
+				goto done2;
 		}
 
 		hdmi_reconfigure(dssdev);
-		mutex_unlock(&hdmi.lock_aux);
-		hdmi_notify_pwrchange(HDMI_EVENT_POWERON);
-		mutex_unlock(&hdmi.lock);
-		mdelay(100);
-		mutex_lock(&hdmi.lock);
-		mutex_lock(&hdmi.lock_aux);
-
-		set_hdmi_hot_plug_status(dssdev, true);
-
-		mdelay(50);
-
-		DSSINFO("Stop DISPC DIGIT channel\n");
-		HDMI_W1_StopVideoFrame(HDMI_WP);
-		dispc_enable_digit_out(0);
-
-		mdelay(50);
-
-		DSSINFO("Start DISPC DIGIT channel\n");
-		HDMI_W1_StartVideoFrame(HDMI_WP);
-		dispc_enable_digit_out(1);
-
-		/* ignore return value for now */
+		hdmi_notify_status(dssdev, true);
 		DSSINFO("Enabling display Done- HDMI_FIRST_HPD\n\n");
 	}
 
@@ -1655,25 +1678,23 @@
 	if (r & HDMI_HPD_MODIFY) {
 		struct omap_overlay *ovl;
 		int i;
+		bool found = false;
 
 		/* check if any overlays are connected to TV and
-		 * return if connected after resetting the IRQ's
+		 * send disconnect event before reconfiguring the phy
 		 */
 		for (i = 0; i < dssdev->manager->num_overlays; i++) {
 			ovl = dssdev->manager->overlays[i];
 			if (!(strcmp(ovl->manager->name, "tv")))
 				if (ovl->info.enabled) {
-					DSSINFO("Overlay %d is still "
-						"attached to tv\n", ovl->id);
-					DSSINFO("Cannot Rconfigure HDMI when "
-						"overlays are still attached "
-						"to tv\n"
-						"Dettach the overlays before "
-						"reconfiguring the HDMI\n\n");
-					/* clear the IRQ's*/
-					hdmi_set_irqs(0);
-					goto done2;
+					DSSINFO("Dettach overlays before"
+						 "reconfiguring HDMI - "
+						 "HDMI_HPD_MODIFY\n");
+					hdmi_notify_status(dssdev, false);
+					found = true;
 				}
+			if (found)
+				break;
 		}
 
 		/*
@@ -1686,8 +1707,7 @@
 		edid_set = false;
 		custom_set = false;
 		hdmi_reconfigure(dssdev);
-		set_hdmi_hot_plug_status(dssdev, true);
-		/* ignore return value for now */
+		hdmi_notify_status(dssdev, true);
 		DSSINFO("Reconfigure HDMI PHY Done- HDMI_HPD_MODIFY\n\n");
 	}
 
@@ -1777,6 +1797,7 @@
 
 static void hdmi_power_off(struct omap_dss_device *dssdev)
 {
+	if (!in_hdmi_restart)
 	set_hdmi_hot_plug_status(dssdev, false);
 	/* ignore return value for now */
 
@@ -1851,7 +1872,7 @@
 	enum hdmi_dev_state state_need;
 
 	/* calculate HDMI combined power and state */
-	if (_audio_on)
+	if (_audio_on && !in_hdmi_restart)
 		power_need = HDMI_POWER_FULL;
 	else
 		power_need = suspend ? HDMI_POWER_OFF : v_power;
@@ -1900,7 +1921,9 @@
 			     state_need == HDMI_SUSPENDED ? 'S' : 'D'), r);
 
 	if (cpu_is_omap44xx())
-		if ((power_need < HDMI_POWER_FULL) && hdmi_opt_clk_state)
+		if ((power_need < HDMI_POWER_FULL) &&
+		    hdmi_opt_clk_state &&
+		    !in_hdmi_restart)
 			/* Release clocks, L3 and core constraints*/
 			hdmi_set_48Mhz_l3_cstr(dssdev, false);
 
@@ -2143,16 +2166,6 @@
 
 	for (i = 0; i < ARRAY_SIZE(all_timings_direct); i++) {
 		temp = all_timings_direct[i];
-#if 0
-		if (timing->x_res == 1920 &&  timing->y_res ==1080)
-		{
-			if (timing->pixel_clock == 148500){
-				timing->pixel_clock  = 74250; //for MHL
-				DSSINFO("for MHL down scaling");
-			}
-		}
-#endif
-
 		if (temp.pixel_clock != timing->pixel_clock ||
 		    temp.x_res != timing->x_res ||
 		    temp.y_res != timing->y_res)
@@ -2677,10 +2690,12 @@
 }
 
 int hdmi_register_hdcp_callbacks(void (*hdmi_start_frame_cb)(void),
-				 void (*hdmi_stop_frame_cb)(void))
+				 void (*hdmi_stop_frame_cb)(void),
+				 void (*hdmi_irq_cb)(int status))
 {
 	hdmi.hdmi_start_frame_cb = hdmi_start_frame_cb;
 	hdmi.hdmi_stop_frame_cb  = hdmi_stop_frame_cb;
+	hdmi.hdmi_irq_cb	 = hdmi_irq_cb;
 
 	return hdmi_w1_get_video_state();
 }
@@ -2690,8 +2705,23 @@
 {
 	struct omap_dss_device *dssdev = get_hdmi_device();
 
-	hdmi_disable_video(dssdev);
-	hdmi_enable_video(dssdev);
+	in_hdmi_restart = true;
+
+	printk(KERN_INFO "\n\n<%s> powering OFF HDMI_PHY, audio_on = %d, "
+			 "hdmi_power = %d\n",
+	       __func__, audio_on, hdmi_power);
+	hdmi_notify_pwrchange(HDMI_EVENT_POWERPHYOFF);
+	set_video_power(dssdev, HDMI_POWER_OFF);
+
+
+	printk(KERN_INFO "\n<%s> powering ON HDMI_PHY, audio_on = %d, "
+			 "hdmi_power = %d\n",
+	       __func__, audio_on, hdmi_power);
+	set_video_power(dssdev, HDMI_POWER_FULL);
+	hdmi_notify_pwrchange(HDMI_EVENT_POWERPHYON);
+	printk(KERN_INFO "\n\n");
+
+	in_hdmi_restart = false;
 }
 EXPORT_SYMBOL(hdmi_restart);
 
