Index: kernel/arch/arm/mach-omap2/dpll-44xx.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/dpll-44xx.c	2011-06-15 00:53:43.012467817 +0530
+++ kernel/arch/arm/mach-omap2/dpll-44xx.c	2011-06-15 01:09:33.133718439 +0530
@@ -544,6 +544,10 @@
 	list_add(&blocker->node, &dpll_cascading_blocker_list);
 
 	if (list_was_empty && in_dpll_cascading) {
+
+		printk("%s:%d Before DPLL exit: dev_name = %s\n",
+			__func__,__LINE__,dev_name(dev));
+
 		omap4_dpll_low_power_cascade_exit();
 		in_dpll_cascading = false;
 	}
@@ -588,7 +592,7 @@
 			&& !in_dpll_cascading) {
 		in_dpll_cascading = true;
 		/* DPLL cascade stability check: Add printk for testing purpose. */
-		printk("%s:%d Before DPLL enter dev_name = %s\n",
+		printk("%s:%d Before DPLL enter: dev_name = %s\n",
 				__func__,__LINE__,dev_name(dev));
 		omap4_dpll_low_power_cascade_enter();
 	}
Index: kernel/drivers/cpufreq/cpufreq_hotplug.c
===================================================================
--- kernel.orig/drivers/cpufreq/cpufreq_hotplug.c	2011-06-15 00:53:43.012467817 +0530
+++ kernel/drivers/cpufreq/cpufreq_hotplug.c	2011-06-15 01:09:33.133718439 +0530
@@ -56,9 +56,6 @@
 		unsigned int event);
 static int hotplug_boost(struct cpufreq_policy *policy);
 
-static struct device *mpu_dev;
-
-
 #ifndef CONFIG_CPU_FREQ_DEFAULT_GOV_HOTPLUG
 static
 #endif
@@ -457,7 +454,6 @@
 
 	struct cpufreq_policy *policy;
 	unsigned int i, j;
-	struct device *mpu_dev = omap2_get_mpuss_device();
 
 	policy = this_dbs_info->cur_policy;
 
@@ -610,6 +606,9 @@
 
 static void do_cpu_up(struct work_struct *work)
 {
+
+	struct device *mpu_dev = omap2_get_mpuss_device();
+
 	cpu_up(1);
 	if (num_online_cpus() > 1)
 		dpll_cascading_blocker_hold(mpu_dev);
@@ -617,6 +616,8 @@
 
 static void do_cpu_down(struct work_struct *work)
 {
+	struct device *mpu_dev = omap2_get_mpuss_device();
+
 	cpu_down(1);
 	if (num_online_cpus() < 2)
 		dpll_cascading_blocker_release(mpu_dev);
@@ -627,7 +628,7 @@
 	struct cpu_dbs_info_s *dbs_info =
 		container_of(work, struct cpu_dbs_info_s, work.work);
 	unsigned int cpu = dbs_info->cpu;
-	mpu_dev = omap2_get_mpuss_device();
+	struct device *mpu_dev = omap2_get_mpuss_device();
 
 	int delay = 0;
 	mutex_lock(&dbs_info->timer_mutex);
@@ -641,6 +642,9 @@
 		
 		if (num_online_cpus() < 2)
 			queue_work_on(cpu, khotplug_wq, &dbs_info->cpu_up_work);
+
+		if (num_online_cpus() > 1)
+			dpll_cascading_blocker_hold(mpu_dev);
   	}
 	queue_delayed_work_on(cpu, khotplug_wq, &dbs_info->work, delay);
 	mutex_unlock(&dbs_info->timer_mutex);
