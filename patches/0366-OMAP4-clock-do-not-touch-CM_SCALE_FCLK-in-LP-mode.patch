From: Mike Turquette <mturquette@ti.com>
Date: Mon, 25 Apr 2011 22:53:52 +0000 (-0500)
Subject: OMAP4: clock: don't touch CM_SCALE_FCLK in LP mode
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=b96accd69139810a9b28c0b363a5d7bb1ec24792

OMAP4: clock: don't touch CM_SCALE_FCLK in LP mode

In DPLL cascading mode we run all of the PER functional clocks at the rate
closest to their "normal" output.  In both the "normal" case and the DPLL
cascading scenario we want CM_SCALE_FCLK to be 0, which will run the PER
fclks at their full rate.  As such, no need to touch this register in DPLL
cascading code as 0 is the default.

Change-Id: I11982bce16e41753ea261fb9266edab682f93c3e
Signed-off-by: Mike Turquette <mturquette@ti.com>
---

Index: kernel/arch/arm/mach-omap2/dpll-44xx.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/dpll-44xx.c	2011-05-21 00:38:21.049628440 +0900
+++ kernel/arch/arm/mach-omap2/dpll-44xx.c	2011-05-21 00:42:36.330846960 +0900
@@ -67,7 +67,6 @@
 	u32 clkreqctrl;
 	unsigned long dpll_core_ck_rate;
 	u32 dpll_core_m2_div;
-	unsigned long cm2_scale_fclk_div;
 	struct clk *per_hsd_byp_clk_mux_ck_parent;
 	unsigned int cpufreq_policy_min_rate;
 	unsigned int cpufreq_policy_max_rate;
@@ -783,12 +782,6 @@
 	} else
 		pr_debug("%s: DPLL_PER entered Low Power bypass\n",__func__);
 
-	/* run PER functional clocks at full speed */
-	state.cm2_scale_fclk_div =
-		omap4_prm_read_bits_shift(func_48m_fclk->clksel_reg,
-				func_48m_fclk->clksel_mask);
-	clk_set_rate(func_48m_fclk, (func_48m_fclk->parent->rate / 4));
-
 	/* recalibarte UART rate for half rates */
 	omap_uart_recalibrate_baud(1);
 
@@ -949,10 +942,6 @@
 	if (ret)
 		pr_err("%s: DPLL_IVA failed to relock\n", __func__);
 
-	/* restore PER functional clocks frequency */
-	clk_set_rate(func_48m_fclk, (func_48m_fclk->parent->rate /
-				(1 << state.cm2_scale_fclk_div)));
-
 	/* lock DPLL_PER */
 	ret = omap3_noncore_dpll_set_rate(dpll_per_ck, state.dpll_per_ck_rate);
 	if (ret)
