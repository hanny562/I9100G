Index: Kernel/drivers/haptic/haptic-samsung-pwm.c
===================================================================
--- Kernel.orig/drivers/haptic/haptic-samsung-pwm.c	2011-01-10 11:51:44.033176897 +0530
+++ Kernel/drivers/haptic/haptic-samsung-pwm.c	2011-01-10 14:14:37.644421014 +0530
@@ -20,16 +20,14 @@
 #include <linux/timer.h>
 #include <linux/slab.h>
 #include <linux/i2c/twl.h>
+#include <linux/delay.h>
 
 #include "haptic.h"
 
 #define PWM_HAPTIC_PERIOD		44640
-#define PWM_HAPTIC_DEFAULT_LEVEL	2
+#define PWM_HAPTIC_DEFAULT_LEVEL		2
 
-#define PWDNSTATUS2             0x94
-#define HAPTIC_HACK 		1
-
-static int haptic_levels[] = {0x0,0x1,0x2,0x3,} ;//{ 18360, 14880, 10860, 5280, 540, };
+static int haptic_levels[] = { 18360, 14880, 10860, 5280, 540, };
 
 struct samsung_pwm_haptic {
 	struct haptic_classdev cdev;
@@ -45,36 +43,12 @@
 	int level_max;
 };
 
-static int twl6030_pwm_haptic_enable()
-{
-	u8 val;
-	int ret;
-
-	ret = twl_i2c_read_u8(TWL6030_MODULE_ID1, &val, PWDNSTATUS2 );
-	if (ret < 0) {
-		printk ("ISA1000 : Failed to enable PWM, Error %d\n", ret);
-		return ret;
-	}
-
-	val = 0x6;
-	ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_TOGGLE3 );
-	if (ret < 0) {
-		printk("ISA1000 : Failed to enable PWM, Error %d\n",ret);
-		return ret;
-	}
-
-		//vibctrl
-		//duty cycle (bit 0 and 1)  00->100% 01->75% 10->50% 11->25% 
-		val=0x3;
-		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_VIBCTRL);
-
-		//vibmode
-		//vib freq (bit 1 and 2) 00->16Hz 01->32KHz 10->12MHz 11->16Hz
-		val=0x6;
-		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_VIBMODE);
-
-	return 0;
-}
+// Add this function prototype
+void twl6030_pwm_free(struct pwm_device *pwm);
+struct pwm_device *twl6030_pwm_request(int pwm_id, const char *label);
+void twl6030_pwm_disable(struct pwm_device *pwm);
+int twl6030_pwm_enable(struct pwm_device *pwm);
+int twl6030_pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns);
 
 static inline struct samsung_pwm_haptic *cdev_to_samsung_pwm_haptic(
 		struct haptic_classdev *haptic_cdev)
@@ -85,21 +59,31 @@
 static void samsung_pwm_haptic_power_on(struct samsung_pwm_haptic *haptic)
 {
 	u8 ret,val;
-	haptic->powered = 1;
-
-	if (gpio_is_valid(haptic->pdata->gpio))
-	{
-		gpio_set_value(haptic->pdata->gpio, 1);
-	}
 
-	#if (HAPTIC_HACK)
-		//set the pwm through twl6030
+	if (haptic->powered)
+		return;
+	haptic->powered = 1;;
 		val=0xFF;
 		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_PWM1ON);
+		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, 0x7F, TWL6030_PWM1OFF);
+
+	if (val > 1) {
+		if (val == 255)
+			val = 0x77;//0x7f;
+		else
+			val = (~(val/2)) & 0x7f;
+
+		twl_i2c_write_u8(TWL6030_MODULE_ID1, 0x06, TWL6030_TOGGLE3);
+		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_PWM1ON);
+	} else if (val <= 1) {
+		twl_i2c_write_u8(TWL6030_MODULE_ID1, 0x01, TWL6030_TOGGLE3);
+		twl_i2c_write_u8(TWL6030_MODULE_ID1, 0x07, TWL6030_TOGGLE3);
+	}
 
-	#else
-		pwm_enable(haptic->pwm);	
-	#endif
+	if (gpio_is_valid(haptic->pdata->gpio))
+		gpio_set_value(haptic->pdata->gpio, 1);
+
+	twl6030_pwm_enable(haptic->pwm);
 }
 
 static void samsung_pwm_haptic_power_off(struct samsung_pwm_haptic *haptic)
@@ -109,51 +93,30 @@
 	haptic->powered = 0;
 
 	if (gpio_is_valid(haptic->pdata->gpio))
-	{
 		gpio_set_value(haptic->pdata->gpio, 0);
-	}
-	#if (HAPTIC_HACK)
-		//set the pwm through twl6030
-	#else
-		pwm_disable(haptic->pwm);
-	#endif
+
+	twl6030_pwm_disable(haptic->pwm);
 }
 
 static int samsung_pwm_haptic_set_pwm_cycle(struct samsung_pwm_haptic *haptic)
 {
 	int duty = haptic_levels[haptic->level];
-	int ret=0;
-	u8 val;
-
-	#if (HAPTIC_HACK)
-		//vibctrl
-		//duty cycle (bit 0 and 1)  00->100% 01->75% 10->50% 11->25% 
-
-		val=duty;
-		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_VIBCTRL);
-
-		//vibmode
-		//vib freq (bit 1 and 2) 00->16Hz 01->32KHz 10->12MHz 11->16Hz
-		val=duty<<1;
-		ret = twl_i2c_write_u8(TWL6030_MODULE_ID1, val, TWL6030_VIBMODE);
-	#else
-		ret =pwm_config(haptic->pwm, duty, PWM_HAPTIC_PERIOD);
-	#endif
-
-return ret;
+	return twl6030_pwm_config(haptic->pwm, duty, PWM_HAPTIC_PERIOD);
 }
 
 static void samsung_pwm_haptic_work(struct work_struct *work)
 {
 	struct samsung_pwm_haptic *haptic;
 	int r;
+
 	haptic = container_of(work, struct samsung_pwm_haptic, work);
+
 	if (haptic->enable) {
 		r = samsung_pwm_haptic_set_pwm_cycle(haptic);
-		/*raj if (r) {
+		if (r) {
 			dev_dbg(haptic->cdev.dev, "set_pwm_cycle failed\n");
 			return;
-		}*/
+		}
 		samsung_pwm_haptic_power_on(haptic);
 	} else {
 		samsung_pwm_haptic_power_off(haptic);
@@ -163,8 +126,9 @@
 static void samsung_pwm_haptic_timer(unsigned long data)
 {
 	struct samsung_pwm_haptic *haptic = (struct samsung_pwm_haptic *)data;
+
 	haptic->enable = 0;
-	samsung_pwm_haptic_power_off(haptic);
+schedule_work(&haptic->work);
 }
 
 static void samsung_pwm_haptic_set(struct haptic_classdev *haptic_cdev,
@@ -191,6 +155,7 @@
 {
 	struct samsung_pwm_haptic *haptic =
 		cdev_to_samsung_pwm_haptic(haptic_cdev);
+
 	if (haptic->enable)
 		return HAPTIC_FULL;
 
@@ -243,6 +208,7 @@
 		cdev_to_samsung_pwm_haptic(haptic_cdev);
 	ssize_t ret = -EINVAL;
 	unsigned long val;
+
 	ret = strict_strtoul(buf, 10, &val);
 	if (ret == 0) {
 		ret = size;
@@ -269,17 +235,20 @@
 	struct samsung_pwm_haptic *haptic =
 		cdev_to_samsung_pwm_haptic(haptic_cdev);
 	ssize_t ret = -EINVAL;
-	unsigned long val;	ret = strict_strtoul(buf, 10, &val);
-	if (ret == 0) {
+	unsigned long val;
+
+	ret = strict_strtoul(buf, 10, &val);
+
+	if (ret == 0 && val>0) {
 		ret = size;
 		haptic->enable = 1;
 		mod_timer(&haptic->timer, jiffies + val * HZ / 1000);
 		schedule_work(&haptic->work);
 	}
-
+	ret=size;
 	return ret;
 }
-static DEVICE_ATTR(oneshot, 0200, NULL, samsung_pwm_haptic_store_oneshot);
+static DEVICE_ATTR(oneshot, 0777, NULL, samsung_pwm_haptic_store_oneshot);
 
 static struct attribute *haptic_attributes[] = {
 	&dev_attr_enable.attr,
@@ -303,8 +272,7 @@
 		dev_err(&pdev->dev, "No memory for device\n");
 		return -ENOMEM;
 	}
-	twl6030_pwm_haptic_enable(); 
-	
+
 	platform_set_drvdata(pdev, haptic);
 	haptic->cdev.set = samsung_pwm_haptic_set;
 	haptic->cdev.get = samsung_pwm_haptic_get;
@@ -325,7 +293,6 @@
 
 	INIT_WORK(&haptic->work, samsung_pwm_haptic_work);
 
-
 	/* register our new haptic device */
 	ret = haptic_classdev_register(&pdev->dev, &haptic->cdev);
 	if (ret < 0) {
@@ -333,15 +300,13 @@
 		goto error_classdev;
 	}
 
-#if (!HAPTIC_HACK)
-	haptic->pwm = pwm_request(pdata->pwm_timer, "haptic");
+	haptic->pwm = twl6030_pwm_request(pdata->pwm_timer, "haptic");
 	if (IS_ERR(haptic->pwm)) {
 		dev_err(&pdev->dev, "unable to request PWM for haptic\n");
 		ret = PTR_ERR(haptic->pwm);
 		goto err_pwm;
 	} else
 		dev_dbg(&pdev->dev, "got pwm for haptic\n");
-#endif
 
 	ret = sysfs_create_group(&haptic->cdev.dev->kobj, &haptic_group);
 	if (ret)
@@ -367,9 +332,7 @@
 error_enable:
 	sysfs_remove_group(&haptic->cdev.dev->kobj, &haptic_group);
 err_pwm:
-#if (!HAPTIC_HACK)
-	pwm_free(haptic->pwm);
-#endif
+	twl6030_pwm_free(haptic->pwm);
 error_classdev:
 	haptic_classdev_unregister(&haptic->cdev);
 	kfree(haptic);
Index: Kernel/drivers/mfd/twl6030-pwm.c
===================================================================
--- Kernel.orig/drivers/mfd/twl6030-pwm.c	2011-01-10 11:51:44.013172917 +0530
+++ Kernel/drivers/mfd/twl6030-pwm.c	2011-01-10 11:54:40.343170166 +0530
@@ -52,7 +52,7 @@
 	unsigned int pwm_id;
 };
 
-int pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns)
+int twl6030_pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns)
 {
 	u8 duty_cycle;
 	int ret;
@@ -71,9 +71,9 @@
 	}
 	return 0;
 }
-EXPORT_SYMBOL(pwm_config);
+EXPORT_SYMBOL(twl6030_pwm_config);
 
-int pwm_enable(struct pwm_device *pwm)
+int twl6030_pwm_enable(struct pwm_device *pwm)
 {
 	u8 val;
 	int ret;
@@ -97,9 +97,9 @@
 	twl_i2c_read_u8(TWL6030_MODULE_ID1, &val, LED_PWM_CTRL2);
 	return 0;
 }
-EXPORT_SYMBOL(pwm_enable);
+EXPORT_SYMBOL(twl6030_pwm_enable);
 
-void pwm_disable(struct pwm_device *pwm)
+void twl6030_pwm_disable(struct pwm_device *pwm)
 {
 	u8 val;
 	int ret;
@@ -122,9 +122,9 @@
 	}
 	return;
 }
-EXPORT_SYMBOL(pwm_disable);
+EXPORT_SYMBOL(twl6030_pwm_disable);
 
-struct pwm_device *pwm_request(int pwm_id, const char *label)
+struct pwm_device *twl6030_pwm_request(int pwm_id, const char *label)
 {
 	u8 val;
 	int ret;
@@ -155,11 +155,11 @@
 
 	return pwm;
 }
-EXPORT_SYMBOL(pwm_request);
+EXPORT_SYMBOL(twl6030_pwm_request);
 
-void pwm_free(struct pwm_device *pwm)
+void twl6030_pwm_free(struct pwm_device *pwm)
 {
-	pwm_disable(pwm);
+	twl6030_pwm_disable(pwm);
 	kfree(pwm);
 }
-EXPORT_SYMBOL(pwm_free);
+EXPORT_SYMBOL(twl6030_pwm_free);
Index: Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig
===================================================================
--- Kernel.orig/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-01-06 21:01:25.223170000 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-01-10 11:54:40.343170166 +0530
@@ -1246,7 +1246,7 @@
 # CONFIG_TWL4030_POWER is not set
 # CONFIG_TWL4030_CODEC is not set
 # CONFIG_MFD_TC35892 is not set
-# CONFIG_TWL6030_PWM is not set
+CONFIG_TWL6030_PWM=y
 CONFIG_TWL6030_GPADC=y
 CONFIG_TWL6040_CODEC=y
 CONFIG_SND_SOC_MIC_A1026=y
Index: Kernel/arch/arm/configs/android_omap4tab_rev04_defconfig
===================================================================
--- Kernel.orig/arch/arm/configs/android_omap4tab_rev04_defconfig	2011-01-10 14:22:34.424420561 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev04_defconfig	2011-01-10 14:24:55.843170482 +0530
@@ -1243,7 +1245,7 @@
 # CONFIG_TWL4030_POWER is not set
 # CONFIG_TWL4030_CODEC is not set
 # CONFIG_MFD_TC35892 is not set
-# CONFIG_TWL6030_PWM is not set
+CONFIG_TWL6030_PWM=y
 CONFIG_TWL6030_GPADC=y
 CONFIG_TWL6040_CODEC=y
 # CONFIG_MFD_TMIO is not set
