Index: kernel/arch/arm/configs/android_t1_omap4430_r03_eng_defconfig
===================================================================
--- kernel.orig/arch/arm/configs/android_t1_omap4430_r03_eng_defconfig	2011-06-01 18:14:02.753384014 +0530
+++ kernel/arch/arm/configs/android_t1_omap4430_r03_eng_defconfig	2011-06-01 18:18:29.182132684 +0530
@@ -1234,7 +1234,7 @@
 # I2C system bus drivers (mostly embedded / system-on-chip)
 #
 # CONFIG_I2C_DESIGNWARE is not set
-# CONFIG_I2C_GPIO is not set
+CONFIG_I2C_GPIO=y
 # CONFIG_I2C_OCORES is not set
 CONFIG_I2C_OMAP=y
 # CONFIG_I2C_PCA_PLATFORM is not set
Index: kernel/arch/arm/mach-omap2/board-t1.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/board-t1.c	2011-06-01 18:12:33.652758370 +0530
+++ kernel/arch/arm/mach-omap2/board-t1.c	2011-06-01 18:26:01.452132938 +0530
@@ -15,11 +15,14 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/platform_device.h>
+#include <linux/mhl-sii9234.h>
 #include <linux/io.h>
 #include <linux/gpio.h>
 #include <linux/usb/otg.h>
 #include <linux/bootmem.h>
 #include <linux/spi/spi.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
 #include <linux/i2c/twl.h>
 #include <linux/i2c/cma3000.h>
 #include <linux/regulator/machine.h>
@@ -161,6 +164,43 @@
 
 void omap4430univ_sensors_init(void);
 
+#ifdef CONFIG_VIDEO_MHL_V1
+/* MHL  */
+static struct i2c_gpio_platform_data t1_omap4_gpio_i2c5_pdata = {
+    .sda_pin = OMAP_GPIO_MHL_SDA_18V,
+    .scl_pin = OMAP_GPIO_MHL_SCL_18V,
+    .udelay = 3,
+    .timeout = 0,
+};
+
+static struct platform_device t1_omap4_gpio_i2c5_device = {
+    .name = "i2c-gpio",
+    .id = 5,
+    .dev = {
+	        .platform_data = &t1_omap4_gpio_i2c5_pdata,
+	    }
+};
+
+struct mhl_platform_data mhl_pdata = {
+    .mhl_sel    = OMAP_GPIO_MHL_SEL,
+    .mhl_rst    = OMAP_GPIO_MHL_RST,
+    .mhl_int    = OMAP_GPIO_MHL_INT,
+    .mhl_wake_up    = OMAP_GPIO_MHL_WAKEUP,
+    //.power_onoff    = sii9234_power_onoff,
+#ifdef CONFIG_MHL_SWITCH
+    .switch_onoff   = sii9234_switch_onoff,
+#endif
+};
+
+struct platform_device t1_omap4_mhl_device = {
+    .name   = "mhl",
+    .id = -1,
+    .dev    ={
+          .platform_data = &mhl_pdata,
+        }
+};
+
+#endif
 static struct platform_device t1_omap4_hdmi_audio_device = {
 	.name = "hdmi-dai",
 	.id = -1,
@@ -1453,6 +1493,8 @@
 static struct platform_device *t1_omap4_devices[] __initdata = {
 	&wl128x_device,
 	&t1_omap4_hdmi_audio_device,
+	&t1_omap4_gpio_i2c5_device,
+	&t1_omap4_mhl_device,
 	&samsung_omap4_pwr_device,
 	&samsung_omap4_gyro_lp530al_device,
 	&pwmbacklight_device,
@@ -2159,31 +2201,23 @@
 		 .platform_data = &akm8975_pdata,
 	 },
 #endif
-	 #ifdef CONFIG_VIDEO_MHL_V1
+};
+#ifdef CONFIG_VIDEO_MHL_V1
+static struct i2c_board_info t1_omap4_i2c_5_boardinfo[] = {
 	{
 		I2C_BOARD_INFO("SII9234", 0x72>>1),
 	},
-
 	{
 		I2C_BOARD_INFO("SII9234A", 0x7A>>1),
 	},
 	{
 		I2C_BOARD_INFO("SII9234B", 0x92>>1),
 	},
-
 	{
 		I2C_BOARD_INFO("SII9234C", 0xC8>>1),
 	},
-    #endif
-
-#if 0
-	{
-	 I2C_BOARD_INFO("pn544", 0x2b),
-	 .platform_data = &pn544_data,
-	 .irq = OMAP_GPIO_IRQ(OMAP_GPIO_NFC_IRQ),
-	 },
-#endif
 };
+#endif
 
 static const struct usbhs_omap_platform_data usbhs_pdata __initconst = {
 	.port_mode[0] = OMAP_OHCI_PORT_MODE_PHY_4PIN_DPDM,
@@ -2255,6 +2289,11 @@
 	omap_register_i2c_bus(4, 400, &t1_omap4_i2c_4_bus_pdata,
 			      t1_omap4_i2c_4_boardinfo,
 			      ARRAY_SIZE(t1_omap4_i2c_4_boardinfo));
+
+#ifdef CONFIG_VIDEO_MHL_V1
+	i2c_register_board_info(5, t1_omap4_i2c_5_boardinfo,
+			            ARRAY_SIZE(t1_omap4_i2c_5_boardinfo));
+#endif	
 	return 0;
 }
 
Index: kernel/drivers/media/video/omap/mhl_v1/Common_Def.h
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/Common_Def.h	2011-06-01 18:12:43.712758635 +0530
+++ kernel/drivers/media/video/omap/mhl_v1/Common_Def.h	2011-06-01 18:28:18.212132639 +0530
@@ -67,7 +67,6 @@
 struct i2c_client* get_sii9234_client(u8 device_id);
 u8 sii9234_i2c_read(struct i2c_client *client, u8 reg);
 int sii9234_i2c_write(struct i2c_client *client, u8 reg, u8 data);
-extern void sii9234_interrupt_event(void);
 
 extern void sii9234_cfg_power(bool on);
 extern byte ReadByteTPI (byte Offset);
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234_driver.h
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/sii9234_driver.h	2011-06-01 18:13:07.422133426 +0530
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234_driver.h	2011-06-01 18:29:50.902133125 +0530
@@ -33,10 +33,18 @@
                    FUNCTION DEFINITIONS
 ===========================================================================*/
 
+struct mhl_dev {
+		struct device					*process_dev;
+        unsigned int                    irq_gpio;
+        unsigned int                    wake_up_gpio;                                            
+        struct work_struct              sii9234_int_work;                                        
+        struct workqueue_struct         *sii9234_wq;
+        struct mhl_platform_data        *pdata;
+        struct miscdevice               mdev;
+};
 
-void sii9234_interrupt_event(void);
+//void sii9234_interrupt_event(struct mhl_dev *mhl_dev);
 bool sii9234_init(void);
 
-//MHL IOCTL INTERFACE
 #define MHL_READ_RCP_DATA 0x1
 
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234_ioctl.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234_ioctl.h	2011-06-01 18:31:13.552132970 +0530
@@ -0,0 +1,20 @@
+/**
+ * (C) COPYRIGHT 2010 SAMSUNG ELECTRONICS
+ * Silicon Image MHL(Mobile HD Link) Transmitter device driver
+ *
+ * File Name : sii9234_ioctl.h
+ *
+ * Author    : Woojong Yoo 
+ *		woojong.yoo@samsung.com
+ *
+ * Description: Source file for MHL sii9234 Transciever
+ */
+
+
+#define MHL_MAGIC_NUMBER	'M'
+
+#define MHL_SWITCH_ON		_IO(MHL_MAGIC_NUMBER, 0)
+#define MHL_SWITCH_OFF		_IO(MHL_MAGIC_NUMBER, 1)
+#define MHL_HW_RESET		_IO(MHL_MAGIC_NUMBER, 2)
+#define MHL_INIT		_IO(MHL_MAGIC_NUMBER, 3)
+
Index: kernel/include/linux/mhl-sii9234.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ kernel/include/linux/mhl-sii9234.h	2011-06-01 18:34:12.752132604 +0530
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2008 Samsung Electronics, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+struct mhl_platform_data {
+	unsigned int mhl_sel;
+	unsigned int mhl_rst;
+	unsigned int mhl_int;
+	unsigned int mhl_wake_up;
+
+	int	(*power_onoff) (int onoff);
+	int	(*switch_onoff) (int onoff);
+};
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234.c
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/sii9234.c	2011-06-01 18:12:55.653383523 +0530
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234.c	2011-06-01 19:21:45.022133312 +0530
@@ -40,6 +40,7 @@
 #include <linux/fcntl.h> 
 #include <asm/uaccess.h> 
 #include <linux/regulator/consumer.h>
+#include <linux/mhl-sii9234.h>
 
 #include "sii9234_driver.h"
 #include "Common_Def.h"
@@ -51,26 +52,21 @@
 	printk ("[ "SUBJECT " (%s) ] " format "\n", __func__, ## __VA_ARGS__)
 
 
-struct work_struct sii9234_int_work;
-struct workqueue_struct *sii9234_wq = NULL;
-
 struct i2c_driver sii9234_i2c_driver;
+struct i2c_client *sii9234_i2c_client = NULL;
+
 struct i2c_driver sii9234a_i2c_driver;
+struct i2c_client *sii9234a_i2c_client = NULL;
+
 struct i2c_driver sii9234b_i2c_driver;
+struct i2c_client *sii9234b_i2c_client = NULL;
+
 struct i2c_driver sii9234c_i2c_driver;
+struct i2c_client *sii9234c_i2c_client = NULL;
+struct mhl_dev *g_mhl_dev ;
+
 
-#if defined(CONFIG_USE_GPIO_I2C)
-    static OMAP_GPIO_I2C_CLIENT * sii9234_i2c_client;
-    static OMAP_GPIO_I2C_CLIENT * sii9234a_i2c_client;
-     static OMAP_GPIO_I2C_CLIENT * sii9234b_i2c_client;
-	 static OMAP_GPIO_I2C_CLIENT * sii9234c_i2c_client;   
-#else
-    static struct i2c_client * sii9234_i2c_client = NULL;
-	    static struct i2c_client * sii9234a_i2c_client = NULL;
-    static struct i2c_client * sii9234b_i2c_client = NULL;
-    static struct i2c_client * sii9234c_i2c_client = NULL;
 
-#endif
 
 extern bool sii9234_init(void);
 extern void FSA9480_EnableIntrruptByMHL(bool _bDo);
@@ -95,7 +91,7 @@
 //MODULE_DEVICE_TABLE(i2c,sii9234_id);
 
 
-int MHL_i2c_init = 0;
+int mhl_i2c_init = 0;
 
 
 struct sii9234_state {
@@ -110,7 +106,6 @@
 
 irqreturn_t mhl_wake_up_irq_handler(int irq, void *dev_id);
 
-void sii9234_interrupt_event_work(struct work_struct *p);
 #define MHL_SWITCH_TEST	1
 
 #ifdef MHL_SWITCH_TEST
@@ -276,268 +271,219 @@
 }
 
 static DEVICE_ATTR(MHD_file, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH, MHD_check_read, MHD_check_write);
+void sii9234_interrupt_event_work( void);
+extern void sii9234_interrupt_event(void);
 
 struct i2c_client* get_sii9234_client(u8 device_id)
 {
-#if defined(CONFIG_USE_GPIO_I2C) 
-	OMAP_GPIO_I2C_CLIENT *client_ptr;
-#else
+
 	struct i2c_client* client_ptr;
-#endif
+
 	if(device_id == 0x72)
 		client_ptr = sii9234_i2c_client;
-	else if(device_id == 0x7A){
+	else if(device_id == 0x7A)
 		client_ptr = sii9234a_i2c_client;
-	}
-	else if(device_id == 0x92){
+	else if(device_id == 0x92)
 		client_ptr = sii9234b_i2c_client;
-		}
-	else if(device_id == 0xC8){
+	else if(device_id == 0xC8)
 		client_ptr = sii9234c_i2c_client;
-		}
 	else
 		client_ptr = NULL;
-#if defined(CONFIG_USE_GPIO_I2C)
-	return (struct i2c_client *)client_ptr;
-#else
+
 	return client_ptr;
-#endif
 }
 
 EXPORT_SYMBOL(get_sii9234_client);
 
 u8 sii9234_i2c_read(struct i2c_client *client, u8 reg)
 {
-#if defined(CONFIG_USE_GPIO_I2C)
-        OMAP_GPIO_I2C_CLIENT *client_ptr =  (OMAP_GPIO_I2C_CLIENT *)client;
-#endif
-
-	u8 ret=0;
+	u8 ret;
 	
-	if(!MHL_i2c_init)
+	if(!mhl_i2c_init)
 	{
 		SII_DEV_DBG("I2C not ready");
 		return 0;
 	}
-	u8 buf[1];
 
-	OMAP_GPIO_I2C_RD_DATA i2c_rd_param;
-	//OMAP_GPIO_I2C_CLIENT *client=(OMAP_GPIO_I2C_CLIENT *)client;
-    i2c_rd_param.reg_len = 1;
-    i2c_rd_param.reg_addr = &reg;
-    i2c_rd_param.rdata_len = 1;
-    i2c_rd_param.rdata = buf;
-    //omap_gpio_i2c_smbus_read(client_ptr, &i2c_rd_param);
-    omap_gpio_i2c_read(client_ptr, &i2c_rd_param);
+	i2c_smbus_write_byte(client, reg);
 
-	//printk(KERN_ERR "#######Read reg %x data %x\n", reg, ret);
 
-	/*if (ret < 0)
-	{
+	ret = i2c_smbus_read_byte(client);
+
+	if (ret < 0) {
 		SII_DEV_DBG("i2c read fail");
 		return -EIO;
 	}
+
 	return ret;
-	*/
-	return (buf[0]);
+
 }
 EXPORT_SYMBOL(sii9234_i2c_read);
 
 
 int sii9234_i2c_write(struct i2c_client *client, u8 reg, u8 data)
 {
-#if defined(CONFIG_USE_GPIO_I2C)
-        OMAP_GPIO_I2C_CLIENT *client_ptr =  (OMAP_GPIO_I2C_CLIENT *)client;
-#endif
-
-	if(!MHL_i2c_init)
-	{
+	if(!mhl_i2c_init) {
 		SII_DEV_DBG("I2C not ready");
 		return 0;
 	}
-	int ret = 0;
-
-
-	OMAP_GPIO_I2C_WR_DATA i2c_wr_param;
-	//OMAP_GPIO_I2C_CLIENT *client=(OMAP_GPIO_I2C_CLIENT *)client;
-	
-	i2c_wr_param.reg_len = 1;
-    i2c_wr_param.reg_addr = &reg;
-    i2c_wr_param.wdata_len = 1;
-    i2c_wr_param.wdata = &data;
-    //omap_gpio_i2c_smbus_write(client_ptr, &i2c_wr_param);
-	omap_gpio_i2c_write(client_ptr, &i2c_wr_param);	
-   
 
-    return ret;
+	return i2c_smbus_write_byte_data(client, reg, data);
 }
 EXPORT_SYMBOL(sii9234_i2c_write);
 
 
-void sii9234_interrupt_event_work(struct work_struct *p)
+void sii9234_interrupt_event_work()
 {
 
 	SII_DEV_DBG( "sii9234_interrupt_event_work() is called\n");
 
 	sii9234_interrupt_event();
-}
-
 
-void mhl_int_irq_handler_sched(void)
-{
-	SII_DEV_DBG( "mhl_int_irq_handler_sched() is called\n");
-	queue_work(sii9234_wq, &sii9234_int_work);		
 }
 
 
 irqreturn_t mhl_int_irq_handler(int irq, void *dev_id)
 {
+	struct mhl_dev *mhl_dev = dev_id;
+
 	SII_DEV_DBG( "mhl_int_irq_handler() is called\n");
-	int ver =0;
-	ver = hw_get_rev_gpio();
-	if(ver>=6){
-		if (gpio_get_value(GPIO_ACC_EN))
-                	mhl_int_irq_handler_sched();
-	}
-	else{
-		if (gpio_get_value(GPIO_MHL_SEL))	
-			mhl_int_irq_handler_sched();
-	}
+
+	queue_work(mhl_dev->sii9234_wq, &mhl_dev->sii9234_int_work);
+
 	return IRQ_HANDLED;
 }
 
  
 irqreturn_t mhl_wake_up_irq_handler(int irq, void *dev_id)
 {
+	struct mhl_dev *mhl_dev = dev_id;
 
 	SII_DEV_DBG( "mhl_wake_up_irq_handler() is called\n");
 
-	if (gpio_get_value(GPIO_MHL_SEL))	
-		mhl_int_irq_handler_sched();
+	queue_work(mhl_dev->sii9234_wq, &mhl_dev->sii9234_int_work);		
 	
 	return IRQ_HANDLED;
 }
 
 static int sii9234_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-	 struct class *mhl_class;
+	/* int retval; */
+
+	struct sii9234_state *state;
+
      struct device *mhl_dev;
 
-	SII_DEV_DBG("[MHL_TEST] sii9234_i2c_probe");
+	state = kzalloc(sizeof(struct sii9234_state), GFP_KERNEL);
+	if (state == NULL) {		
+		pr_err("failed to allocate memory \n");
+		return -ENOMEM;
+	}
 	
-	sii9234_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x72>>1,400);
-		SII_DEV_DBG("bit-banging\n");
+	state->client = client;
+	i2c_set_clientdata(client, state);
 	SII_DEV_DBG( "SII9234 attach success!!!\n");
-	MHL_i2c_init = 1;
+	mhl_i2c_init = 1;
+	sii9234_i2c_client = client;
 
-	 SII_DEV_DBG("SII9234 attach success!!!\n");
 
-   mhl_class = class_create(THIS_MODULE, "mhl");
-    if (IS_ERR(mhl_class))
-    {
-        pr_err("Failed to create class(mhl)!\n");
-    }
-
-    mhl_dev = device_create(mhl_class, NULL, 0, NULL, "mhl_dev");
-    if (IS_ERR(mhl_dev))
-    {
-        pr_err("Failed to create device(mhl_dev)!\n");
-    }
+	return 0;
 
-    if (device_create_file(mhl_dev, &dev_attr_MHD_file) < 0)
-        SII_DEV_DBG( "Failed to create device file(%s)!\n", dev_attr_MHD_file.attr.name);
+}
+    
 
 
-	return 0;
+static int __devexit sii9234_i2c_remove(struct i2c_client *client)
+{
+	struct sii9234_state *state = i2c_get_clientdata(client);
+	kfree(state);
 
+	return 0;
 }
 static int sii9234a_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        sii9234a_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x7A>>1,400);
+	struct sii9234_state *state;
+
+	state = kzalloc(sizeof(struct sii9234_state), GFP_KERNEL);
+	if (state == NULL) {		
+		pr_err("failed to allocate memory \n");
+		return -ENOMEM;
+	}
+	
+	state->client = client;
+	i2c_set_clientdata(client, state);
         SII_DEV_DBG( "SII9234A attach success!!!\n");
-        MHL_i2c_init = 1;
+        mhl_i2c_init = 1;
+	sii9234a_i2c_client = client;
         return 0;
 
 }
-static int sii9234b_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
+static int __devexit sii9234a_i2c_remove(struct i2c_client *client)
 {
-        SII_DEV_DBG("[MHL_TEST] sii9234b_i2c_probe");
-        sii9234b_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x92>>1,400);
-        SII_DEV_DBG( "SII9234B attach success!!!\n");
+	struct sii9234_state *state = i2c_get_clientdata(client);
+	kfree(state);
         return 0;
-
 }
-static int sii9234c_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
+
+static int sii9234b_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        SII_DEV_DBG("[MHL_TEST] sii9234c_i2c_probe");
-        sii9234c_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0xC8>>1,400);
-        SII_DEV_DBG( "SII9234C attach success!!!\n");
-        MHL_i2c_init = 1;
-
-        int ret=0;
-        sii9234_wq = create_singlethread_workqueue("sii9234_wq");
-        INIT_WORK(&sii9234_int_work, sii9234_interrupt_event_work);
-
-        ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
-                                IRQF_SHARED , "mhl_int", (void *)sii9234c_i2c_client);
-        if (ret) {
-                SII_DEV_DBG( "unable to request irq mhl_int"
-                                        " err:: %d\n", ret);
-                return ret;
-        }
-        SII_DEV_DBG( "MHL int request successful %d\n", ret);
-#if 0
-        ret = request_threaded_irq(MHL_WAKEUP_IRQ, NULL,
-                mhl_wake_up_irq_handler, IRQF_SHARED,
-                "mhl_wake_up", (void *) sii9234c_i2c_client);
-        if (ret) {
-                printk(KERN_ERR "unable to request irq mhl_wake_up"
-                                        " err:: %d\n", ret);
-                return ret;
+	struct sii9234_state *state;
+
+	state = kzalloc(sizeof(struct sii9234_state), GFP_KERNEL);
+	if (state == NULL) {		
+		pr_err("failed to allocate memory \n");
+		return -ENOMEM;
         }
-#endif
 		
-        return 0;
+	state->client = client;
+	i2c_set_clientdata(client, state);
 
-}
+	/* rest of the initialisation goes here. */
 
+	SII_DEV_DBG( "SII9234B attach success!!!\n");
 
+	sii9234b_i2c_client = client;
 
 
-static int __devexit sii9234_remove(struct i2c_client *client)
-{
-	struct sii9234_state *state = i2c_get_clientdata(client);
-	sii9234_i2c_client = NULL;
-	i2c_set_clientdata(client, NULL);
-	kfree(state);
-	dev_info(&client->dev, "Sii9234 i2c remove success!!!\n");
 	return 0;
+
 }
-static int __devexit sii9234a_remove(struct i2c_client *client)
+static int __devexit sii9234b_i2c_remove(struct i2c_client *client)
 {
         struct sii9234_state *state = i2c_get_clientdata(client);
-        sii9234a_i2c_client = NULL;
-        i2c_set_clientdata(client, NULL);
         kfree(state);
-        dev_info(&client->dev, "SII9234A i2c remove success!!!\n");
         return 0;
 }
-static int __devexit sii9234b_remove(struct i2c_client *client)
+static int sii9234c_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        struct sii9234_state *state = i2c_get_clientdata(client);
-        sii9234b_i2c_client = NULL;
-        i2c_set_clientdata(client, NULL);
-        kfree(state);
-        dev_info(&client->dev, "SII9234B i2c remove success!!!\n");
+	struct sii9234_state *state;
+
+	state = kzalloc(sizeof(struct sii9234_state), GFP_KERNEL);
+	if (state == NULL) {		
+		pr_err("failed to allocate memory \n");
+		return -ENOMEM;
+	}
+	
+	state->client = client;
+	i2c_set_clientdata(client, state);
+	
+	/* rest of the initialisation goes here. */
+	
+	pr_err("SII9234C attach success!!!\n");
+
+	sii9234c_i2c_client = client;
+
         return 0;
+
 }
-static int __devexit sii9234c_remove(struct i2c_client *client)
+
+
+
+
+static int __devexit sii9234c_i2c_remove(struct i2c_client *client)
 {
         struct sii9234_state *state = i2c_get_clientdata(client);
-        sii9234c_i2c_client = NULL;
-        i2c_set_clientdata(client, NULL);
         kfree(state);
-        dev_info(&client->dev, "SII9234C i2c remove success!!!\n");
         return 0;
 }
 
@@ -549,7 +495,7 @@
 	},
 	.id_table	= sii9234_id,
 	.probe	= sii9234_i2c_probe,
-	.remove	= __devexit_p(sii9234_remove),
+	.remove	= __devexit_p(sii9234_i2c_remove),
 	.command = NULL,
 };
 
@@ -560,9 +506,10 @@
         },
         .id_table       = sii9234a_id,
         .probe  = sii9234a_i2c_probe,
-        .remove = __devexit_p(sii9234a_remove),
+	.remove	= __devexit_p(sii9234a_i2c_remove),
         .command = NULL,
 };
+
 struct i2c_driver sii9234b_i2c_driver = {
         .driver = {
                 .owner  = THIS_MODULE,
@@ -570,9 +517,10 @@
         },
         .id_table       = sii9234b_id,
         .probe  = sii9234b_i2c_probe,
-        .remove = __devexit_p(sii9234b_remove),
+	.remove	= __devexit_p(sii9234b_i2c_remove),
         .command = NULL,
 };
+
 struct i2c_driver sii9234c_i2c_driver = {
         .driver = {
                 .owner  = THIS_MODULE,
@@ -580,7 +528,7 @@
         },
         .id_table       = sii9234c_id,
         .probe  = sii9234c_i2c_probe,
-        .remove = __devexit_p(sii9234c_remove),
+	.remove	= __devexit_p(sii9234c_i2c_remove),
         .command = NULL,
 };
 
@@ -744,72 +692,221 @@
     	.ioctl = mhl_ioctl,
 };
                  
-static struct miscdevice mhl_device = {
-    .minor  = MISC_DYNAMIC_MINOR,
-    .name   = "mhl",
-    .fops   = &mhl_fops,
-};
-
-static int __init sii9234_module_init(void)
+static int sii9234_probe(struct platform_device *pdev)
 {
 	int ret;
+	struct mhl_platform_data *mhl_pdata = pdev->dev.platform_data;
+	struct mhl_dev *mhl_dev;
+	unsigned int mhl_irq;
+	unsigned int mhl_wakeup_irq;
+		
+	if (mhl_pdata == NULL) {
+		pr_err("MHL probe fail\n");
+		return -ENODEV;
+	}
 
 	sii9234_cfg_gpio();
+	ret = i2c_add_driver(&sii9234_i2c_driver);
+	if (ret != 0) {
+		pr_err("[MHL SII9234] can't add i2c driver\n");
+		return ret;
+	} else {
+		SII_DEV_DBG("[MHL SII9234] add i2c driver\n");
+	}
 
-	/* sii9234_cfg_power(1);	//Turn On power to sii9234 
-	*/
-	SII_DEV_DBG("SII9234 Module Initialiazion ");
-#ifdef MHL_SWITCH_TEST
-	sec_mhl = class_create(THIS_MODULE, "sec_mhl");
-	if (IS_ERR(sec_mhl))
-		SII_DEV_DBG( "[MHL] Failed to create class (sec_mhl)\n");
-
-	mhl_switch = device_create(sec_mhl, NULL, 0, NULL, "switch");
-	if (IS_ERR(mhl_switch))
-		SII_DEV_DBG( "[MHL] Failed to create device (mhl_switch)\n");
-	if (device_create_file(mhl_switch, &dev_attr_mhl_sel) < 0)
-		SII_DEV_DBG( "[MHL] Failed to create file (mhl_sel)");
+	ret = i2c_add_driver(&sii9234a_i2c_driver);
+	if (ret != 0) {
+		pr_err("[MHL SII9234A] can't add i2c driver\n");	
+		goto err_i2c_a_add;
+	} else {
+		SII_DEV_DBG("[MHL SII9234A] add i2c driver\n");
+	}
+
+	ret = i2c_add_driver(&sii9234b_i2c_driver);
+	if (ret != 0) {
+		pr_err("[MHL SII9234B] can't add i2c driver\n");
+		goto err_i2c_b_add;
+	} else {
+		pr_err("[MHL SII9234B] add i2c driver\n");
+	}
+
+	ret = i2c_add_driver(&sii9234c_i2c_driver);
+	if (ret != 0) {
+		pr_err("[MHL SII9234C] can't add i2c driver\n");
+		goto err_i2c_c_add;
+	} else {
+		pr_err("[MHL SII9234C] add i2c driver\n");
+	}
+
+	mhl_dev = kzalloc(sizeof(struct mhl_dev), GFP_KERNEL);
+	if (!mhl_dev) {
+		ret = -ENOMEM;
+		goto err_mem;
+	}
+
+	mhl_dev->pdata = mhl_pdata;
+	mhl_dev->irq_gpio = mhl_pdata->mhl_int;
+	mhl_dev->wake_up_gpio = mhl_pdata->mhl_wake_up;
+
+	INIT_WORK(&mhl_dev->sii9234_int_work, sii9234_interrupt_event_work);
+	mhl_dev->sii9234_wq = create_singlethread_workqueue("sii9234_wq");
+
+	mhl_dev->mdev.minor = MISC_DYNAMIC_MINOR;
+	mhl_dev->mdev.name = "mhl";
+	mhl_dev->mdev.fops = &mhl_fops;
+
+	dev_set_drvdata(&pdev->dev, mhl_dev);
+
+	mhl_dev->process_dev = &pdev->dev;
+
+	ret = misc_register(&mhl_dev->mdev);
+	if (ret) {
+		pr_err("mhl misc_register failed\n");
+		goto err_misc_register;
+	}
+      g_mhl_dev = mhl_dev;
+
+	mhl_irq = gpio_to_irq(mhl_dev->irq_gpio);
+	set_irq_type(mhl_irq, IRQ_TYPE_EDGE_RISING);
+	ret = request_threaded_irq(mhl_irq, NULL, mhl_int_irq_handler,
+			IRQF_DISABLED, "mhl_int", mhl_dev); 
+	if (ret) {
+		pr_err("unable to request irq mhl_int err:: %d\n", ret);
+		goto err_irq_request;
+	}		
+
+#if 0
+	mhl_wakeup_irq = gpio_to_irq(mhl_dev->wake_up_gpio);
+	set_irq_type(mhl_wakeup_irq, IRQ_TYPE_EDGE_RISING);
+	ret = request_threaded_irq(mhl_wakeup_irq, NULL,
+				mhl_wake_up_irq_handler,
+				IRQF_DISABLED,
+				"mhl_wake_up",
+				mhl_dev);
+	if (ret) {
+		pr_err("unable to request irq mhl_wake_up err:: %d\n", ret);
+		goto err_wake_up_irq_request;
+	}
 #endif
 
-	ret = misc_register(&mhl_device);
+	if (device_create_file(mhl_dev->process_dev, &dev_attr_MHD_file) < 0)
+		printk("Failed to create device file(%s)!\n", dev_attr_MHD_file.attr.name);
+
+#if 0
+	disable_irq_nosync(mhl_irq);
+	disable_irq_nosync(mhl_wakeup_irq);
+#endif 
+ //   sii9234_cfg_power(1);
+	return 0;
+
+err_wake_up_irq_request:
+	free_irq(gpio_to_irq(mhl_dev->irq_gpio), mhl_dev);
+err_irq_request:
+	misc_deregister(&mhl_dev->mdev);
+err_misc_register:
+	destroy_workqueue(mhl_dev->sii9234_wq);
+	kfree(mhl_dev);
+err_mem:
+	i2c_del_driver(&sii9234c_i2c_driver);
+err_i2c_c_add:
+	i2c_del_driver(&sii9234b_i2c_driver);
+err_i2c_b_add:
+	i2c_del_driver(&sii9234a_i2c_driver);
+err_i2c_a_add:
+	i2c_del_driver(&sii9234_i2c_driver);
+
+	return ret;
+}
+
+static int sii9234_remove(struct platform_device *pdev)
+{
+	struct mhl_dev *mhl_dev = platform_get_drvdata(pdev);
+
+	SII_DEV_DBG("");
+
+	disable_irq_nosync(gpio_to_irq(mhl_dev->irq_gpio));
+	disable_irq_nosync(gpio_to_irq(mhl_dev->wake_up_gpio));
+
+	i2c_del_driver(&sii9234_i2c_driver);
+	i2c_del_driver(&sii9234a_i2c_driver);
+	i2c_del_driver(&sii9234b_i2c_driver);
+	i2c_del_driver(&sii9234c_i2c_driver);
+
+	destroy_workqueue(mhl_dev->sii9234_wq);
+
+	kfree(mhl_dev);
+	return 0;
+}
+
+static int sii9234_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct mhl_platform_data *mhl_pdata = pdev->dev.platform_data;
+	int ret;
+
+	SII_DEV_DBG("");
+
+#ifdef CONFIG_MHL_SWITCH
+	ret = gpio_get_value(mhl_pdata->mhl_sel);
 	if(ret) {
-		pr_err(KERN_ERR "misc_register failed - mhl \n");
+#endif
+		mhl_pdata->power_onoff(0);
+		disable_irq_nosync(gpio_to_irq(mhl_pdata->mhl_int));
+		disable_irq_nosync(gpio_to_irq(mhl_pdata->mhl_wake_up));
+#ifdef CONFIG_MHL_SWITCH
+	}
+#endif
+	return 0;
 	}
     
-	ret = i2c_add_driver(&sii9234_i2c_driver);
-	if (ret != 0)
-		SII_DEV_DBG( "[MHL SII9234] can't add i2c driver\n");	
-	else
-		SII_DEV_DBG( "[MHL SII9234] add i2c driver\n");
-	ret = i2c_add_driver(&sii9234a_i2c_driver);
-        if (ret != 0)
-                SII_DEV_DBG( "[MHL SII9234A] can't add i2c driver\n");
-        else
-                SII_DEV_DBG( "[MHL SII9234A] add i2c driver\n");
-	ret = i2c_add_driver(&sii9234b_i2c_driver);
-        if (ret != 0)
-                SII_DEV_DBG( "[MHL SII9234B] can't add i2c driver\n");
-        else
-                SII_DEV_DBG( "[MHL SII9234B] add i2c driver\n");
-	ret = i2c_add_driver(&sii9234c_i2c_driver);
-        if (ret != 0)
-                SII_DEV_DBG( "[MHL SII9234C] can't add i2c driver\n");
-        else
-                SII_DEV_DBG( "[MHL SII9234C] add i2c driver\n");
-	SII_DEV_DBG("sii9234_module_init terminating...\n");
+static int sii9234_resume(struct platform_device *pdev)
+{
+	struct mhl_platform_data *mhl_pdata = pdev->dev.platform_data;
+	int ret;
 
-	return ret;	
+	SII_DEV_DBG("");
+
+#ifdef CONFIG_MHL_SWITCH
+	ret = gpio_get_value(mhl_pdata->mhl_sel);
+	if (ret) {
+#endif
+		mhl_pdata->power_onoff(1);
+		enable_irq(gpio_to_irq(mhl_pdata->mhl_int));
+		enable_irq(gpio_to_irq(mhl_pdata->mhl_wake_up));
+		//sii9234_init();
+		//SiI9234_init();
+#ifdef CONFIG_MHL_SWITCH
+	}
+#endif
+	return 0;
 }
-//module_init(sii9234_module_init);
-late_initcall(sii9234_module_init);
 
-static void __exit sii9234_exit(void)
+static struct platform_driver mhl_driver = {
+	.probe		= sii9234_probe,
+	.remove		= sii9234_remove,
+	.suspend	= sii9234_suspend,
+	.resume		= sii9234_resume,
+	.driver		= {
+		.name	= "mhl",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init sii9234_module_init(void)
 {
+	int ret;
 
+	ret = platform_driver_register(&mhl_driver);
+
+	return ret;	
+}
+module_init(sii9234_module_init);
+static void __exit sii9234_exit(void)
+{
 	i2c_del_driver(&sii9234_i2c_driver);
 	i2c_del_driver(&sii9234a_i2c_driver);
 	i2c_del_driver(&sii9234b_i2c_driver);
 	i2c_del_driver(&sii9234c_i2c_driver);
+	platform_driver_unregister(&mhl_driver);
 };
 module_exit(sii9234_exit);
 
