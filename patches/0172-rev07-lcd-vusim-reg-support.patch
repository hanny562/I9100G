Index: Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-03-01 15:36:00.000000000 +0900
+++ Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-03-01 19:26:30.819961998 +0900
@@ -500,7 +500,6 @@
 static int ltn121at_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
 
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
         gpio_direction_output(mlcd1_enable_gpio, 1);
         gpio_direction_output(mlcd2_enable_gpio, 1);
 
@@ -508,19 +507,16 @@
 	gpio_direction_output(backlight_gpio, 1);
 
         lcd_enabled = 1;
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
         return 0;
 }
 
 static void ltn121at_panel_disable_lcd(struct omap_dss_device *dssdev)
 {
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
         lcd_enabled = 0;
 
         gpio_direction_output(mlcd1_enable_gpio, 0);
         gpio_direction_output(mlcd2_enable_gpio, 0);
         gpio_direction_output(backlight_gpio, 0);
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 }
 
 static struct omap_dss_device omap4tab_lcd_device = {
@@ -536,23 +532,19 @@
 static int D10E50T6332_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
 
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
         gpio_direction_output(mlcd_on_gpio, 1);
         gpio_direction_output(lvds_nshdn_gpio, 1);
 	
         lcd_enabled = 1;
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
         return 0;
 }
 
 static void D10E50T6332_panel_disable_lcd(struct omap_dss_device *dssdev)
 {
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
         lcd_enabled = 0;
 
         gpio_direction_output(mlcd_on_gpio, 0);
         gpio_direction_output(lvds_nshdn_gpio, 0);
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 	return;
 
  }
@@ -583,7 +575,6 @@
 	gpio_direction_output(touch_nrst_gpio, 0);
 	udelay(1);
 	gpio_direction_output(touch_nrst_gpio, 1);
-	printk("[SHANKAR] %s[%d] enabled maXTOUCH nRST GPIO \n", __func__, __LINE__);
 	return;
 
 	err0:
@@ -610,7 +601,6 @@
 #elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 4 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
 static int ams353_panel_poweron()
 {
-	printk("[SHANKAR] %s [%d] sending reset pulse to LCD RST \n", __func__, __LINE__);
 	gpio_direction_output(mlcd_rst_gpio, 1);
 	/*Power on LCD */
 	gpio_direction_output(lcd_en_gpio, 1);
@@ -631,20 +621,16 @@
 static int ams353_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
 
-       	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
 	ams353_panel_poweron();
         lcd_enabled = 1;
-       	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
         return 0;
 }
 
 static void ams353_panel_disable_lcd(struct omap_dss_device *dssdev)
 {
-       	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
        	lcd_enabled = 0;
 
        	ams353_panel_poweroff();
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
        	return;
 
  }
@@ -667,7 +653,7 @@
                 .max_speed_hz           = 375000,
         },
 };
-#elif ((CONFIG_SAMSUNG_OMAP4_TAB_REV == 6) || (CONFIG_SAMSUNG_OMAP4_TAB_REV == 7))
+#elif ((CONFIG_SAMSUNG_OMAP4_TAB_REV == 6))
 static int ld9040_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
         return 0;
@@ -716,15 +702,12 @@
     gpio_free(lcd_enable_gpio);
 #endif	
 	if (enable) {
-		printk("[SHANKAR] %s [%d] entry \n", __func__, enable);
 		gpio_set_value(mlcd_rst_gpio, 1);
 		gpio_set_value(lcd_en_gpio, 1);
 	} else {
-		printk("[SHANKAR] %s [%d] entry \n", __func__, enable);
     	gpio_set_value(lcd_en_gpio, 0);
 		gpio_set_value(mlcd_rst_gpio, 0);
 	}
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
     return 1;
 }
 static int reset_lcd(struct lcd_device *ld)
@@ -756,6 +739,138 @@
     mdelay(10);
     gpio_set_value(mlcd_rst_gpio, 1);
 	
+    return 1;
+}
+
+static int lcd_gpio_cfg_earlysuspend(struct lcd_device *ld)
+{
+    int reset_gpio = -1;
+    int err;
+#if 0
+    reset_gpio = S5PV310_GPY4(5);
+
+    err = gpio_request(reset_gpio, "MLCD_RST");
+    if (err) {
+        printk(KERN_ERR "failed to request MLCD_RST for "
+                "lcd reset control\n");
+        return err;
+    }
+
+    mdelay(10);
+    gpio_direction_output(reset_gpio, 0);
+
+    gpio_free(reset_gpio);
+#endif
+    return 0;
+}
+static int lcd_gpio_cfg_lateresume(struct lcd_device *ld)
+{
+#if 0	
+    /* MLCD_RST */
+    s3c_gpio_cfgpin(S5PV310_GPY4(5), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY4(5), S3C_GPIO_PULL_NONE);
+
+    /* LCD_nCS */
+    s3c_gpio_cfgpin(S5PV310_GPY4(3), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY4(3), S3C_GPIO_PULL_NONE);
+    /* LCD_SCLK */
+    s3c_gpio_cfgpin(S5PV310_GPY3(1), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY3(1), S3C_GPIO_PULL_NONE);
+    /* LCD_SDI */
+    s3c_gpio_cfgpin(S5PV310_GPY3(3), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY3(3), S3C_GPIO_PULL_NONE);
+#endif
+    return 0;
+}
+
+/*   : Fix me regarding ADC kernel Panic
+static void lcd_register_callback(void* function)
+{
+    sec_battery_cbs.lcd_set_adc_value = function;
+}
+*/
+
+
+static struct lcd_platform_data ld9040_platform_data = {
+    .reset          = reset_lcd,
+    .power_on       = lcd_power_on,
+    .gpio_cfg_earlysuspend  = lcd_gpio_cfg_earlysuspend,
+    .gpio_cfg_lateresume    = lcd_gpio_cfg_lateresume,
+/*   : Fix me regarding ADC kernel Panic
+    .register_cb    = lcd_register_callback,
+*/
+    /* it indicates whether lcd panel is enabled from u-boot. */
+    .lcd_enabled        = 0,
+    .reset_delay        = 20,   /* 20ms */
+    .power_on_delay     = 20,   /* 20ms */
+    .power_off_delay    = 200,  /* 200ms */
+    .sleep_in_delay     = 160,
+    .pdata          = &matchbox_panel_data,
+};
+
+static struct spi_board_info omap4tab_spi_board_info[] __initdata = {
+        {
+                .modalias               = "ld9040",
+                .bus_num                = 4,
+                .chip_select            = 0,
+                .max_speed_hz           = 375000,
+                .platform_data		= (void *)&ld9040_platform_data,
+        },
+};
+#elif ((CONFIG_SAMSUNG_OMAP4_TAB_REV == 7))
+static int ld9040_panel_enable_lcd(struct omap_dss_device *dssdev)
+{
+        struct regulator *regulator;
+
+        regulator = regulator_get(&dssdev->dev, "vusim");
+        if (IS_ERR(regulator)) {
+               printk("[SHANKAR] %s [%d] failed to get VUSIM regulator. \n", __func__, __LINE__);
+                return 0;
+        }
+        regulator_enable(regulator);
+        regulator_put(regulator);
+        return 0;
+}
+
+static void ld9040_panel_disable_lcd(struct omap_dss_device *dssdev)
+{
+        struct regulator *regulator;
+
+	regulator = regulator_get(&dssdev->dev, "vusim");
+        if (IS_ERR(regulator)) {
+               printk("[SHANKAR] %s [%d] failed to get VUSIM regulator. \n", __func__, __LINE__);
+                return ;
+        }
+        if (regulator_is_enabled(regulator))
+                regulator_force_disable(regulator);
+        regulator_put(regulator);
+
+       	return;
+
+ }
+
+static struct omap_dss_device omap4tab_lcd_device = {
+        .name                   = "lcd",
+        .driver_name            = "ld9040_panel",
+        .type                   = OMAP_DISPLAY_TYPE_DPI,
+        .phy.dpi.data_lines     = 24,
+        .platform_enable        = ld9040_panel_enable_lcd,
+        .platform_disable       = ld9040_panel_disable_lcd,
+       .channel                = OMAP_DSS_CHANNEL_LCD2,
+};
+
+static int lcd_power_on(struct lcd_device *ld, int enable)
+{
+        return 1;
+
+}
+static int reset_lcd(struct lcd_device *ld)
+{
+    mdelay(10);
+    gpio_set_value(mlcd_rst_gpio, 0);
+    mdelay(10);
+    gpio_set_value(mlcd_rst_gpio, 1);
+	
 	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
     return 1;
 }
@@ -835,6 +950,7 @@
                 .platform_data		= (void *)&ld9040_platform_data,
         },
 };
+
 #else
 /*TBD */
 #endif
@@ -2191,22 +2307,14 @@
 {
 		int r;
 
-		lcd_en_gpio    = OMAP4TAB_LCD_EN_GPIO;
 		mlcd_rst_gpio	 = OMAP4TAB_MLCD_RST_GPIO;
 
-		r = gpio_request(lcd_en_gpio, "LCD ENABLE");
-		if (r) {
-				printk(KERN_ERR "failed to get LCD ENABLE GPIO\n");
-				goto err0;
-		}
-
 		r = gpio_request(mlcd_rst_gpio, "LCD Reset GPIO");
 		if (r) {
 				printk(KERN_ERR "failed to get LCD Reset GPIO\n");
 				goto err1;
 		}
-
-		gpio_direction_output(lcd_en_gpio, 1);
+		
 		return;
 
 err1:
Index: Kernel/drivers/video/omap2/displays/panel-ld9040.c
===================================================================
--- Kernel.orig/drivers/video/omap2/displays/panel-ld9040.c	2011-02-28 11:26:56.000000000 +0900
+++ Kernel/drivers/video/omap2/displays/panel-ld9040.c	2011-03-01 19:12:39.079962002 +0900
@@ -592,7 +592,6 @@
 
 static int ld9040_get_brightness(struct backlight_device *bd)
 {
-	printk("[SHANKAR] %s [%d] called \n", __func__, __LINE__);
 	return bd->props.brightness;
 }
 
@@ -600,7 +599,6 @@
 {
 	int ret = 0, bl = bd->props.brightness;
 	struct ld9040 *lcd = bl_get_data(bd);
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
 
 	if (bl < MIN_BRIGHTNESS ||
 		bl > bd->props.max_brightness) {
@@ -617,7 +615,6 @@
 		if (ret < 0)
 			dev_err(&bd->dev, "update brightness failed.\n");
 	}
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 
 	return ret;
 }
@@ -832,7 +829,6 @@
 
 static int ld9040_panel_probe(struct omap_dss_device *dssdev)
 {
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
     dssdev->panel.config = OMAP_DSS_LCD_TFT | OMAP_DSS_LCD_IVS |OMAP_DSS_LCD_IEO |OMAP_DSS_LCD_IPC |
                         OMAP_DSS_LCD_IHS | OMAP_DSS_LCD_ONOFF ;
 
@@ -846,7 +842,6 @@
 		printk(KERN_ERR " %s [%d] lcd struct is not allocated in ld9040_probe, probe failed \n", __func__, __LINE__);
 		return -1;
 	}
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
     return 0;
 }
 
@@ -861,8 +856,7 @@
     int r = 0;
 
 	spi_setup(lcd->spi);
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
-#if 0
+#if 1
 	if (dssdev->platform_enable)
 	        r = dssdev->platform_enable(dssdev);
 #endif
@@ -878,7 +872,6 @@
 
     dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
 
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
     return r;
 }
 
@@ -886,7 +879,6 @@
 {
 	struct ld9040 *lcd = dev_get_drvdata(&dssdev->dev);
     
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
 	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
                 return;
 	spi_setup(lcd->spi);
@@ -895,14 +887,13 @@
     ld9040_power_down(lcd);
 
 
-#if 0
+#if 1
 	if (dssdev->platform_disable)
 	        dssdev->platform_disable(dssdev);
 #endif
 	lcd->lcd_pd->lcd_enabled = 0;
     dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
 
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 }
 
 static int ld9040_panel_suspend(struct omap_dss_device *dssdev)
@@ -992,7 +983,6 @@
 {
 	int ret = 0;
 	struct ld9040_panel_data *pdata;
-	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
 
 	lcd = kzalloc(sizeof(struct ld9040), GFP_KERNEL);
 	if (!lcd) {
@@ -1120,7 +1110,6 @@
 	dev_info(&spi->dev, "ld9040 panel driver has been probed.\n");
 	/* Register this driver with OMAP4 DSS subsystem */
 	omap_dss_register_driver(&ld9040_omap_dss_driver);
-	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 	return 0;
 
 out_free_lcd:
