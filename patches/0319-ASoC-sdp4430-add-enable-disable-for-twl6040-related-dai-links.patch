From: Misael Lopez Cruz <misael.lopez@ti.com>
Date: Tue, 26 Apr 2011 22:35:55 +0000 (-0500)
Subject: ASoC: sdp4430: Add enable/disable for twl6040 related dai links
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=3bd89abcb391b19b91c64c6262b2127fe2a0e2b8

ASoC: sdp4430: Add enable/disable for twl6040 related dai links

McPDM and TWL6040 have a cross dependency for clock resource and
startup/shutdown sequences. TWL6040 provides external clock to
McPDM through PAD_CLKS, for which TWL6040 needs to be in BIAS_ON
state. PAD_CLKS needs to be supplied during any McPDM access.
This programming model requires dai_link enable/disable to acquire
TWL6040 clock before any codec/cpu/platform PCM operations and
release it only after PCM operations are done.

McPDM shutdown is delayed to reduce pop-noise, consequently TWL6040
clock release needs to be delayed as well to let ABE power domain
to transition smoothly to low power states.

Change-Id: I5f3869691e7c042925c22b52846991d89796adbc
Signed-off-by: Misael Lopez Cruz <misael.lopez@ti.com>
---

Index: kernel/sound/soc/codecs/twl6040.c
===================================================================
--- kernel.orig/sound/soc/codecs/twl6040.c	2011-04-29 13:05:23.439648417 +0900
+++ kernel/sound/soc/codecs/twl6040.c	2011-04-29 13:05:44.369618664 +0900
@@ -1189,33 +1189,6 @@
 },
 };
 
-#ifdef CONFIG_PM
-static int twl6040_suspend(struct snd_soc_codec *codec, pm_message_t state)
-{
-	/* 
-	 * REVIST: After twl6040 power-on/off sequence finalization. 
-	 */
-	twl6040_set_bias_level(codec, SND_SOC_BIAS_OFF);
-
-	return 0;
-}
-
-static int twl6040_resume(struct snd_soc_codec *codec)
-{
-	/* TODO: read HS jack insertion status */
-	/* 
-	 * REVIST: After twl6040 power-on/off sequence finalization. 
-	 */
-	twl6040_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
-	twl6040_set_bias_level(codec, codec->dapm->suspend_bias_level);
-
-	return 0;
-}
-#else
-#define twl6040_suspend NULL
-#define twl6040_resume NULL
-#endif
-
 static int twl6040_probe(struct snd_soc_codec *codec)
 {
 	struct twl6040_data *priv;
@@ -1267,11 +1240,6 @@
 	/* init vio registers */
 	twl6040_init_vio_regs(codec);
 
-	/* power on device */
-	ret = twl6040_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
-	if (ret)
-		goto bias_err;
-
 	snd_soc_add_controls(codec, twl6040_snd_controls,
 				ARRAY_SIZE(twl6040_snd_controls));
 	twl6040_add_widgets(codec);
@@ -1280,8 +1248,6 @@
 
 	return 0;
 
-bias_err:
-	twl6040_free_irq(codec->control_data, TWL6040_IRQ_PLUG, codec);
 irq_err:
 	wake_lock_destroy(&priv->wake_lock);
 	switch_dev_unregister(&jack->sdev);
@@ -1310,8 +1276,6 @@
 static struct snd_soc_codec_driver soc_codec_dev_twl6040 = {
 	.probe = twl6040_probe,
 	.remove = twl6040_remove,
-	.suspend = twl6040_suspend,
-	.resume = twl6040_resume,
 	.read = twl6040_read_reg_cache,
 	.write = twl6040_write,
 	.set_bias_level = twl6040_set_bias_level,
Index: kernel/sound/soc/omap/sdp4430.c
===================================================================
--- kernel.orig/sound/soc/omap/sdp4430.c	2011-04-29 12:22:34.509605033 +0900
+++ kernel/sound/soc/omap/sdp4430.c	2011-04-29 13:05:44.379620358 +0900
@@ -50,8 +50,17 @@
 
 #define TPS6130X_I2C_ADAPTER	1
 
-static int twl6040_power_mode;
-static int mcbsp_cfg;
+struct sdp4430_audio_data {
+	struct delayed_work delayed_work;
+	struct mutex mutex;
+
+	struct snd_soc_codec *twl6040_codec;
+	int twl6040_power_mode;
+	int twl6040_active;
+
+	int mcbsp_cfg;		
+};
+static struct sdp4430_audio_data sdp4430_data;
 
 static struct i2c_client *tps6130x_client;
 static struct i2c_board_info tps6130x_hwmon_info = {
@@ -75,6 +84,48 @@
 	return 0;
 }
 
+static void sdp4430_twl6040_work(struct work_struct *work)
+{
+	struct sdp4430_audio_data *sdp4430_data;
+
+	sdp4430_data = container_of(work, struct sdp4430_audio_data,
+				    delayed_work.work);
+	mutex_lock(&sdp4430_data->mutex);
+	if (!sdp4430_data->twl6040_active)
+		twl6040_set_bias_level(sdp4430_data->twl6040_codec,
+				       SND_SOC_BIAS_OFF);
+	mutex_unlock(&sdp4430_data->mutex);
+}
+
+static int sdp4430_twl6040_enable(struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	int ret = 0;
+
+	mutex_lock(&sdp4430_data.mutex);
+	cancel_delayed_work(&sdp4430_data.delayed_work);
+	if (!sdp4430_data.twl6040_active)
+		ret = twl6040_set_bias_level(codec_dai->codec,
+					     SND_SOC_BIAS_STANDBY);
+	sdp4430_data.twl6040_active++;
+	mutex_unlock(&sdp4430_data.mutex);
+
+	return ret;
+}
+
+static void sdp4430_twl6040_disable(struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+
+	sdp4430_data.twl6040_codec = codec_dai->codec;
+	mutex_lock(&sdp4430_data.mutex);
+	/* mcpdm shutdown work is delayed 1s wrt stream close */
+	schedule_delayed_work(&sdp4430_data.delayed_work,
+		msecs_to_jiffies(1500));
+	sdp4430_data.twl6040_active--;
+	mutex_unlock(&sdp4430_data.mutex);
+}
+
 static int sdp4430_modem_mcbsp_configure(struct snd_pcm_substream *substream,
 				struct snd_pcm_hw_params *params, int flag)
 {
@@ -96,7 +147,7 @@
 			modem_rtd =
 				modem_substream[substream->stream]->private_data;
 
-		if (!mcbsp_cfg) {
+		if (!sdp4430_data.mcbsp_cfg) {
 			/* Set cpu DAI configuration */
 			ret = snd_soc_dai_set_fmt(modem_rtd->cpu_dai,
 					  SND_SOC_DAIFMT_I2S |
@@ -107,7 +158,7 @@
 				printk(KERN_ERR "can't set Modem cpu DAI configuration\n");
 				goto exit;
 			} else {
-				mcbsp_cfg = 1;
+				sdp4430_data.mcbsp_cfg = 1;
 			}
 		}
 
@@ -123,7 +174,7 @@
 					modem_rtd->cpu_dai->id, channels);
 		}
 	} else {
-		mcbsp_cfg = 0;
+		sdp4430_data.mcbsp_cfg = 0;
 	}
 
 exit:
@@ -138,7 +189,7 @@
 	int clk_id, freq;
 	int ret = 0;
 
-	if (twl6040_power_mode) {
+	if (sdp4430_data.twl6040_power_mode) {
 		clk_id = TWL6040_SYSCLK_SEL_HPPLL;
 		freq = 38400000;
 	} else {
@@ -350,17 +401,17 @@
 static int sdp4430_get_power_mode(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_value *ucontrol)
 {
-	ucontrol->value.integer.value[0] = twl6040_power_mode;
+	ucontrol->value.integer.value[0] = sdp4430_data.twl6040_power_mode;
 	return 0;
 }
 
 static int sdp4430_set_power_mode(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_value *ucontrol)
 {
-	if (twl6040_power_mode == ucontrol->value.integer.value[0])
+	if (sdp4430_data.twl6040_power_mode == ucontrol->value.integer.value[0])
 		return 0;
 
-	twl6040_power_mode = ucontrol->value.integer.value[0];
+	sdp4430_data.twl6040_power_mode = ucontrol->value.integer.value[0];
 
 	return 1;
 }
@@ -772,6 +823,9 @@
 
 		.ops = &sdp4430_mcpdm_ops,
 		.ignore_suspend = 1,
+
+		.enable = sdp4430_twl6040_enable,
+		.disable = sdp4430_twl6040_disable,
 	},
 	{
 		.name = "Legacy DMIC",
@@ -811,6 +865,9 @@
 		.ops = &sdp4430_mcpdm_ops,
 		.be_id = OMAP_ABE_DAI_PDM_DL1,
 		.ignore_suspend = 1,
+
+		.enable = sdp4430_twl6040_enable,
+		.disable = sdp4430_twl6040_disable,
 	},
 	{
 		.name = OMAP_ABE_BE_PDM_UL1,
@@ -828,6 +885,9 @@
 		.ops = &sdp4430_mcpdm_ops,
 		.be_id = OMAP_ABE_DAI_PDM_UL,
 		.ignore_suspend = 1,
+
+		.enable = sdp4430_twl6040_enable,
+		.disable = sdp4430_twl6040_disable,
 	},
 	{
 		.name = OMAP_ABE_BE_PDM_DL2,
@@ -845,6 +905,9 @@
 		.ops = &sdp4430_mcpdm_ops,
 		.be_id = OMAP_ABE_DAI_PDM_DL2,
 		.ignore_suspend = 1,
+
+		.enable = sdp4430_twl6040_enable,
+		.disable = sdp4430_twl6040_disable,
 	},
 	{
 		.name = OMAP_ABE_BE_PDM_VIB,
@@ -862,6 +925,9 @@
 		.ops = &sdp4430_mcpdm_ops,
 		.be_id = OMAP_ABE_DAI_PDM_VIB,
 		.ignore_suspend = 1,
+
+		.enable = sdp4430_twl6040_enable,
+		.disable = sdp4430_twl6040_disable,
 	},
 	{
 		.name = OMAP_ABE_BE_BT_VX,
@@ -1008,6 +1074,9 @@
 	if (ret)
 		goto err;
 
+	INIT_DELAYED_WORK(&sdp4430_data.delayed_work, sdp4430_twl6040_work);
+	mutex_init(&sdp4430_data.mutex);
+
 	/* enable tps6130x */
 	ret = twl_i2c_read_u8(TWL_MODULE_AUDIO_VOICE, &gpoctl,
 			      TWL6040_REG_GPOCTL);
