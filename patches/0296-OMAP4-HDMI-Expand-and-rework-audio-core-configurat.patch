From 0babef5e17920a95fb66f04aad7a7f7ccccb9dbc Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri@ti.com>
Date: Mon, 7 Mar 2011 11:01:57 -0600
Subject: OMAP4: HDMI: Expand and rework audio core configuration

Expand audio core configuration to include I2S settings and correct
Audio Info Frame configuration for 48khz 16-bit stereo audio. This
includes defining correct sample rate and I2S enumerations. Move
audio core configuration to hdmi_core_init.

Also, rework portions of hdmi_core_audio_config to write only the
relevant bits and not the whole register.

Change-Id: I8bed425eb0db92323f9d7c8ee3ad1f24eebeee12
Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
---
 arch/arm/plat-omap/hdmi_lib.c              |   97 +++++++++++++---------------
 arch/arm/plat-omap/include/plat/hdmi_lib.h |   54 ++++++++++++++--
 2 files changed, 93 insertions(+), 58 deletions(-)

diff --git a/arch/arm/plat-omap/hdmi_lib.c b/arch/arm/plat-omap/hdmi_lib.c
index 32aa3c8..3a3665b 100644
--- a/arch/arm/plat-omap/hdmi_lib.c
+++ b/arch/arm/plat-omap/hdmi_lib.c
@@ -511,12 +511,24 @@ static void hdmi_core_init(enum hdmi_deep_mode deep_color,
 	v_cfg->CoreHdmiDvi = HDMI_DVI;
 	v_cfg->CoreTclkSelClkMult = FPLL10IDCK;
 	/* audio core */
-	audio_cfg->fs = FS_44100;
-	audio_cfg->n = 0;
-	audio_cfg->cts = 0;
-	audio_cfg->layout = LAYOUT_2CH; /* 2channel audio */
+	audio_cfg->fs = FS_48000;
+	audio_cfg->n = 6144;
+	audio_cfg->layout = LAYOUT_2CH;
+	audio_cfg->if_fs = IF_FS_NO;
+	audio_cfg->if_channel_number = 2;
+	audio_cfg->if_sample_size = IF_NO_PER_SAMPLE;
+	audio_cfg->if_audio_channel_location = HDMI_CEA_CODE_00;
+	audio_cfg->i2schst_max_word_length = I2S_CHST_WORD_MAX_20;
+	audio_cfg->i2schst_word_length = I2S_CHST_WORD_16_BITS;
+	audio_cfg->i2s_in_bit_length = I2S_IN_LENGTH_16;
+	audio_cfg->i2s_justify = HDMI_AUDIO_JUSTIFY_LEFT;
 	audio_cfg->aud_par_busclk = 0;
-	audio_cfg->cts_mode = CTS_MODE_HW;
+	audio_cfg->cts_mode = CTS_MODE_SW;
+
+	if (omap_rev() == OMAP4430_REV_ES1_0) {
+		audio_cfg->aud_par_busclk = (((128 * 31) - 1) << 8);
+		audio_cfg->cts_mode = CTS_MODE_HW;
+	}
 
 	/* info frame */
 	avi->db1y_rgb_yuv422_yuv444 = 0;
@@ -639,11 +651,10 @@ static int hdmi_core_audio_mode_enable(u32  instanceName)
 	return 0;
 }
 
-static int hdmi_core_audio_config(u32 name,
+static void hdmi_core_audio_config(u32 name,
 		struct hdmi_core_audio_config *audio_cfg)
 {
-	int ret = 0;
-	u32 SD3_EN, SD2_EN, SD1_EN, SD0_EN;
+	u32 SD3_EN = 0, SD2_EN = 0, SD1_EN = 0, SD0_EN = 0, r;
 	u8 DBYTE1, DBYTE2, DBYTE4, CHSUM;
 	u8 size1;
 	u16 size0;
@@ -684,18 +695,18 @@ static int hdmi_core_audio_config(u32 name,
 	REG_FLD_MOD(name, HDMI_CORE_AV__AUD_PAR_BUSCLK_3,
 				(audio_cfg->aud_par_busclk >> 16), 7, 0);
 	/* FS_OVERRIDE = 1 because // input is used */
-	WR_REG_32(name, HDMI_CORE_AV__SPDIF_CTRL, 0x1);
-	 /* refer to table209 p192 in func core spec */
-	WR_REG_32(name, HDMI_CORE_AV__I2S_CHST4, audio_cfg->fs);
+	REG_FLD_MOD(name, HDMI_CORE_AV__SPDIF_CTRL, 1, 1, 1);
+	/* refer to table171 p122 in func core spec*/
+	REG_FLD_MOD(name, HDMI_CORE_AV__I2S_CHST4, audio_cfg->fs, 3, 0);
 
 	/*
 	 * audio config is mainly due to wrapper hardware connection
-	 * and so are fixe (hardware) I2S deserializer is by-pass
+	 * and so are fixed (hardware) I2S deserializer is by-passed
 	 * so I2S configuration is not needed (I2S don't care).
-	 * Wrapper are directly connected at the I2S deserialiser
-	 * output level so some register call I2S... need to be
-	 * programm to configure this parallel bus, there configuration
-	 * is also fixe and due to the hardware connection (I2S hardware)
+	 * Wrapper is directly connected at the I2S deserialiser
+	 * output level so some registers call I2S and need to be
+	 * programmed to configure this parallel bus, there configuration
+	 * is also fixed and due to the hardware connection (I2S hardware)
 	 */
 	WR_REG_32(name, HDMI_CORE_AV__I2S_IN_CTRL,
 		(0 << 7) |	/* HBRA_ON */
@@ -703,17 +714,18 @@ static int hdmi_core_audio_config(u32 name,
 		(0 << 5) |	/* CBIT_ORDER */
 		(0 << 4) |	/* VBit, 0x0=PCM, 0x1=compressed */
 		(0 << 3) |	/* I2S_WS, 0xdon't care */
-		(0 << 2) |	/* I2S_JUST, 0=left- 1=right-justified */
+		(audio_cfg->i2s_justify << 2) | /* I2S_JUST*/
 		(0 << 1) |	/* I2S_DIR, 0xdon't care */
 		(0));		/* I2S_SHIFT, 0x0 don't care */
 
-	WR_REG_32(name, HDMI_CORE_AV__I2S_CHST5, /* mode only */
-		(0 << 4) |	/* FS_ORIG */
-		(1 << 1) |	/* I2S lenght 16bits (refer doc) */
-		(0));		/* Audio sample lenght */
+	r = hdmi_read_reg(name, HDMI_CORE_AV__I2S_CHST5);
+	r = FLD_MOD(r, audio_cfg->fs, 7, 4); /* FS_ORIG */
+	r = FLD_MOD(r, audio_cfg->i2schst_word_length, 3, 1);
+	r = FLD_MOD(r, audio_cfg->i2schst_max_word_length, 0, 0);
+	WR_REG_32(name, HDMI_CORE_AV__I2S_CHST5, r);
 
-	WR_REG_32(name, HDMI_CORE_AV__I2S_IN_LEN, /* mode only */
-		(0xb));		/* In length b=>24bits i2s hardware */
+	REG_FLD_MOD(name, HDMI_CORE_AV__I2S_IN_LEN,
+			audio_cfg->i2s_in_bit_length, 3, 0);
 
 	/* channel enable depend of the layout */
 	if (audio_cfg->layout == LAYOUT_2CH) {
@@ -728,15 +740,15 @@ static int hdmi_core_audio_config(u32 name,
 		SD0_EN = 0x1;
 	}
 
-	WR_REG_32(name, HDMI_CORE_AV__AUD_MODE,
-		(SD3_EN << 7) |	/* SD3_EN */
-		(SD2_EN << 6) |	/* SD2_EN */
-		(SD1_EN << 5) |	/* SD1_EN */
-		(SD0_EN << 4) |	/* SD0_EN */
-		(0 << 3) |	/* DSD_EN */
-		(1 << 2) |	/* AUD_PAR_EN */
-		(0 << 1) |	/* SPDIF_EN */
-		(0));		/* AUD_EN */
+	r = hdmi_read_reg(name, HDMI_CORE_AV__AUD_MODE);
+	r = FLD_MOD(r, SD3_EN, 7, 7); /* SD3_EN */
+	r = FLD_MOD(r, SD2_EN, 6, 6); /* SD2_EN */
+	r = FLD_MOD(r, SD1_EN, 5, 5); /* SD1_EN */
+	r = FLD_MOD(r, SD0_EN, 4, 4); /* SD0_EN */
+	r = FLD_MOD(r, 0, 3, 3); /* DSD_EN */
+	r = FLD_MOD(r, 1, 2, 2); /* AUD_PAR_EN */
+	r = FLD_MOD(r, 0, 1, 1); /* SPDIF_EN */
+	WR_REG_32(name, HDMI_CORE_AV__AUD_MODE, r);
 
 	/* Audio info frame setting refer to CEA-861-d spec p75 */
 	/* 0x0 because on HDMI CT must be = 0 / -1 because 1 is for 2 channel */
@@ -776,8 +788,6 @@ static int hdmi_core_audio_config(u32 name,
 	WR_REG_32(name, HDMI_CORE_AV__MPEG_VERS, 0x0);
 	WR_REG_32(name, HDMI_CORE_AV__MPEG_LEN, 0x0);
 	WR_REG_32(name, HDMI_CORE_AV__MPEG_CHSUM, 0x0);
-
-	return ret;
 }
 
 int hdmi_core_read_avi_infoframe(struct hdmi_core_infoframe_avi *info_avi)
@@ -1507,11 +1517,6 @@ int hdmi_lib_enable(struct hdmi_config *cfg)
 
 	v_core_cfg.CoreHdmiDvi = cfg->hdmi_dvi;
 
-	/* hnagalla */
-	audio_cfg.fs = 0x02;
-	audio_cfg.if_fs = 0x00;
-	audio_cfg.n = 6144;
-
 	r = hdmi_read_reg(HDMI_WP, HDMI_WP_VIDEO_CFG);
 	switch(r & 0x03) {
 	case 1:
@@ -1535,20 +1540,6 @@ int hdmi_lib_enable(struct hdmi_config *cfg)
 	else
 		audio_cfg.cts = (cfg->pixel_clock * deep_color) / 100;
 
-	/* audio channel */
-	audio_cfg.if_sample_size = 0x0;
-	audio_cfg.layout = 0;
-	audio_cfg.if_channel_number = 2;
-	audio_cfg.if_audio_channel_location = 0x00;
-
-	if (omap_rev() == OMAP4430_REV_ES1_0) {
-		audio_cfg.aud_par_busclk = (((128 * 31) - 1) << 8);
-		audio_cfg.cts_mode = CTS_MODE_HW;
-	} else {
-		audio_cfg.aud_par_busclk = 0;
-		audio_cfg.cts_mode = CTS_MODE_SW;
-	}
-
 	r = hdmi_core_video_config(&v_core_cfg);
 
 #ifdef CONFIG_OMAP_HDMI_AUDIO_WA
diff --git a/arch/arm/plat-omap/include/plat/hdmi_lib.h b/arch/arm/plat-omap/include/plat/hdmi_lib.h
index fdcda85..53104a6 100644
--- a/arch/arm/plat-omap/include/plat/hdmi_lib.h
+++ b/arch/arm/plat-omap/include/plat/hdmi_lib.h
@@ -116,8 +116,14 @@ struct hdmi_core_video_config_t {
 };
 
 enum hdmi_core_fs {
-	FS_32000 = 0,
-	FS_44100 = 1
+	FS_32000 = 0x3,
+	FS_44100 = 0x0,
+	FS_48000 = 0x2,
+	FS_88200 = 0x8,
+	FS_96000 = 0xA,
+	FS_176400 = 0xC,
+	FS_192000 = 0xE,
+	FS_NOT_INDICATED = 0x1
 };
 
 enum hdmi_core_layout {
@@ -425,6 +431,40 @@ enum hdmi_core_if_sample_size{
 	IF_24BIT_PER_SAMPLE = 0x3
 };
 
+enum hdmi_i2s_chst_audio_max_word_length{
+	I2S_CHST_WORD_MAX_20 = 0,
+	I2S_CHST_WORD_MAX_24 = 1,
+};
+
+/* The word length depends on how the max word length is set.
+ * Therefore, some values are duplicated. */
+enum hdmi_i2s_chst_audio_word_length{
+	I2S_CHST_WORD_NOT_SPECIFIED = 0x0,
+	I2S_CHST_WORD_16_BITS       = 0x1,
+	I2S_CHST_WORD_17_BITS       = 0x6,
+	I2S_CHST_WORD_18_BITS       = 0x2,
+	I2S_CHST_WORD_19_BITS       = 0x4,
+	I2S_CHST_WORD_20_BITS_20MAX = 0x5,
+	I2S_CHST_WORD_20_BITS_24MAX = 0x1,
+	I2S_CHST_WORD_21_BITS       = 0x6,
+	I2S_CHST_WORD_22_BITS       = 0x2,
+	I2S_CHST_WORD_23_BITS       = 0x4,
+	I2S_CHST_WORD_24_BITS       = 0x5,
+};
+
+enum hdmi_i2s_in_length{
+	I2S_IN_LENGTH_NA = 0x0,
+	I2S_IN_LENGTH_16 = 0x2,
+	I2S_IN_LENGTH_17 = 0xC,
+	I2S_IN_LENGTH_18 = 0x4,
+	I2S_IN_LENGTH_19 = 0x8,
+	I2S_IN_LENGTH_20 = 0xA,
+	I2S_IN_LENGTH_21 = 0xD,
+	I2S_IN_LENGTH_22 = 0x5,
+	I2S_IN_LENGTH_23 = 0x9,
+	I2S_IN_LENGTH_24 = 0xb,
+};
+
 enum hdmi_core_av_csc{
 	RGB	= 0x0,
 	RGB_TO_YUV = 0x1,
@@ -442,16 +482,20 @@ enum hdmi_audio_notify_state {
 
 
 struct hdmi_core_audio_config {
-	enum hdmi_core_fs		fs; /* 0=32KHz - 1=44.1KHz */
+	enum hdmi_core_fs		fs;
 	u32				n;
 	u32				cts;
 	u32				aud_par_busclk;
-	enum hdmi_core_layout		layout; /* 0: 2Ch - 1: 8Ch */
-	enum hdmi_core_cts_mode		cts_mode; /* 0: HW  - 1: SW*/
+	enum hdmi_core_layout		layout;
+	enum hdmi_core_cts_mode		cts_mode;
 	enum hdmi_core_if_fs		if_fs;
 	u32				if_channel_number;
 	enum hdmi_core_if_sample_size	if_sample_size;
 	enum hdmi_cea_code		if_audio_channel_location;
+	enum hdmi_i2s_chst_audio_max_word_length i2schst_max_word_length;
+	enum hdmi_i2s_chst_audio_word_length i2schst_word_length;
+	enum hdmi_i2s_in_length i2s_in_bit_length;
+	enum hdmi_audio_justify i2s_justify;
  };
 
 struct hdmi_notifier {
-- 
1.6.0.4

