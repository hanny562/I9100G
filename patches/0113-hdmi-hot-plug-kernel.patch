Index: Kernel/arch/arm/plat-omap/hdmi_lib.c
===================================================================
--- Kernel.orig/arch/arm/plat-omap/hdmi_lib.c	2011-01-21 02:48:43.942697514 +0530
+++ Kernel/arch/arm/plat-omap/hdmi_lib.c	2011-01-21 15:24:40.602073141 +0530
@@ -53,7 +53,9 @@
 #define HDMI_WP_SYSCONFIG			0x10ul
 #define HDMI_WP_IRQSTATUS_RAW			0x24ul
 #define HDMI_WP_IRQSTATUS			0x28ul
+#define HDMI_WP_IRQWAKEEN			0x34ul
 #define HDMI_WP_PWR_CTRL			0x40ul
+#define HDMI_WP_DEBOUNCE			0x44ul
 #define HDMI_WP_IRQENABLE_SET			0x2Cul
 #define HDMI_WP_VIDEO_CFG			0x50ul
 #define HDMI_WP_VIDEO_SIZE			0x60ul
@@ -195,6 +197,7 @@
 #define HDMI_WP_IRQSTATUS_CORE 0x00000001
 #define HDMI_WP_IRQSTATUS_PHYCONNECT 0x02000000
 #define HDMI_WP_IRQSTATUS_PHYDISCONNECT 0x04000000
+#define HDMI_WP_IRQSTATUS_OCPTIMEOUT 0x00000010
 #define HDMI_CORE_SYS__SYS_STAT_HPD 0x02
 
 static struct {
@@ -1049,7 +1052,7 @@
 	pIrqVectorEnable->fifoSampleRequest = 0;
 	pIrqVectorEnable->fifoOverflow = 0;
 	pIrqVectorEnable->fifoUnderflow = 0;
-	pIrqVectorEnable->ocpTimeOut = 0;
+	pIrqVectorEnable->ocpTimeOut = 1;
 	pIrqVectorEnable->core = 1;
 
 	audio_fmt->stereo_channel_enable = HDMI_STEREO_ONECHANNELS;
@@ -1089,6 +1092,16 @@
 	hdmi_write_reg(HDMI_WP, HDMI_WP_IRQENABLE_SET, r);
 }
 
+static void hdmi_w1_irq_wakeup_enable(struct hdmi_irq_vector *pIrqVectorEnable)
+{
+	u32 r = 0;
+	/* make the irq wakeup enable */
+	r = ((pIrqVectorEnable->phyDisconnect << 26) |
+		(pIrqVectorEnable->phyConnect << 25) |
+		(pIrqVectorEnable->core << 0));
+	hdmi_write_reg(HDMI_WP, HDMI_WP_IRQWAKEEN, r);
+}
+
 static inline int hdmi_w1_wait_for_bit_change(const u32 ins,
 	u32 idx, int b2, int b1, int val)
 {
@@ -1125,20 +1138,6 @@
 		return -ENODEV;
 	}
 
-	if(val){
-		/* WORKAROUND: If HDMI is used, switch to no-idle
-		Note: It was experimentally found that smart idle is not
-		working as expected for HDMI wrapper. The 3 interrupts in
-		HDMI wrapper (Cable connect / cable disconnect / Core IRQ)
-		are not getting detected immediately on cable insertion.
-		On switching to NO-IDLE mode doesnt seen to have any impact on
-		DSS going to retention/off via cupu idle path. */
-		REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x1, 3, 2);
-	}else{
-		/* if HDMI is not use, switch to smart-idle */
-		REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x2, 3, 2);
-	}
-
 	return 0;
 }
 
@@ -1358,6 +1357,15 @@
 		&hdmi.avi_param,
 		&repeat_param);
 
+	/*
+	   Currently we are seeing OCP timeout interrupt.
+	   It happens if l3 is idle. we need to set the SCP
+	   clock to proper value to make sure good performance
+	   is met.
+	*/
+	hdmi_write_reg(HDMI_WP, HDMI_WP_WP_CLK, 0x100);
+
+
 	/* Enable PLL Lock and UnLock intrerrupts */
 	IrqHdmiVectorEnable.pllUnlock = 1;
 	IrqHdmiVectorEnable.pllLock = 1;
@@ -1366,6 +1374,10 @@
 	/***************** init DSS register **********************/
 	hdmi_w1_irq_enable(&IrqHdmiVectorEnable);
 
+	/* Enable wakeup for connect & core at start but on disconnect */
+	IrqHdmiVectorEnable.phyDisconnect = 0;
+	hdmi_w1_irq_wakeup_enable(&IrqHdmiVectorEnable);
+
 	hdmi_w1_video_init_format(&VideoFormatParam,
 			&VideoTimingParam, cfg);
 
@@ -1588,7 +1600,7 @@
 	u32 val, set = 0, hpd_intr = 0, core_state = 0, time_in_ms;
 	static bool first_hpd, dirty;
 	static ktime_t ts_hpd_low, ts_hpd_high;
-	mdelay(30);
+	//mdelay(30);
 	DBG("-------------DEBUG-------------------");
 	DBG("%x hdmi_wp_irqstatus\n", \
 		hdmi_read_reg(HDMI_WP, HDMI_WP_IRQSTATUS));
@@ -1646,26 +1658,34 @@
 		}
 	}
 
-	if ((val & HDMI_WP_IRQSTATUS_PHYDISCONNECT)
-		&& (!(val & HDMI_WP_IRQSTATUS_PHYCONNECT))) {
+	/* We can get connect / disconnect simultaneously due to glitch	*/
+	if (val & HDMI_WP_IRQSTATUS_PHYDISCONNECT){
 		DBG("Disconnect");
 		dirty = 0;
 		first_hpd = 0;
 		*r |= HDMI_DISCONNECT;
 	}
 
-	val = hdmi_read_reg(HDMI_WP, HDMI_WP_IRQSTATUS);
-    if(val){
+	/*
+	   Handle ocp timeout in correct way. SCP clock will reset the divder
+	   to 7 automatically. We need to speed up the clock to avoid performance
+	   degradation.
+	*/
+	if(val & HDMI_WP_IRQSTATUS_OCPTIMEOUT) {
+		hdmi_write_reg(HDMI_WP, HDMI_WP_WP_CLK, 0x100);
+		DBG("OCP timeout");
+	}
+
 	hdmi_write_reg(HDMI_WP, HDMI_WP_IRQSTATUS, val);
 	/* flush posted write */
 	hdmi_read_reg(HDMI_WP, HDMI_WP_IRQSTATUS);
-	}
 }
 
 int hdmi_rxdet(void)
 {
 	int state = 0;
 	int loop = 0, val1, val2, val3, val4;
+	struct hdmi_irq_vector IrqHdmiVectorEnable;
 
 	hdmi_write_reg(HDMI_WP, HDMI_WP_WP_DEBUG_CFG, 4);
 
@@ -1687,6 +1707,25 @@
 	else
 		state = (val1 & 1);
 
+	/* Turn on the wakeup capability of the interrupts
+	It is recommended to turn on opposite interrupt wake
+	up capability in connected and disconnected state.
+	This is to avoid race condition in interrupts.
+	*/
+	IrqHdmiVectorEnable.core = 1;
+	if(state){
+		//printk("Connected ...");
+		IrqHdmiVectorEnable.phyDisconnect = 1;
+		IrqHdmiVectorEnable.phyConnect = 0;
+		hdmi_w1_irq_wakeup_enable(&IrqHdmiVectorEnable);
+	}
+	else {
+		//printk("DisConnected ...");
+		IrqHdmiVectorEnable.phyDisconnect = 0;
+		IrqHdmiVectorEnable.phyConnect = 1;
+		hdmi_w1_irq_wakeup_enable(&IrqHdmiVectorEnable);
+	}
+
 	return state;
 }
 
@@ -1733,10 +1772,14 @@
 	REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x1, 0, 0);
 
 	/* wait till SOFTRESET == 0 */
-	while (FLD_GET(hdmi_read_reg(HDMI_WP, HDMI_WP_SYSCONFIG), 0, 0))
-		;
-	/* WORKAROUND for Cable attach dettach */
-	REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x1, 3, 2);
+	while (FLD_GET(hdmi_read_reg(HDMI_WP, HDMI_WP_SYSCONFIG), 0, 0));
+
+	/* Make madule smart and wakeup capable*/
+	REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x3, 3, 2);
+
+	/* Add debounce as less as possible */
+	hdmi_write_reg(HDMI_WP, HDMI_WP_DEBOUNCE, 0x0101);
+
 	return 0;
 }
 
@@ -1757,10 +1800,8 @@
 int hdmi_w1_stop_audio_transfer(u32 instanceName)
 {
 	hdmi_w1_audio_stop();
-	/* if audio is not used, switch to smart-idle */
-	/* WORKAROUND for Cable attach takes care of this condition
-	now */
-	/* REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x2, 3, 2); */
+	/* if audio is not used, switch to smart-idle & wakeup capable*/
+	REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x3, 3, 2);
 	return 0;
 }
 
@@ -1770,9 +1811,7 @@
 	 * during audio use-case, switch to no-idle to avoid
 	 * DSS_L3_ICLK clock to be shutdown (as per TRM)
 	 */
-	/* WORKAROUND for Cable attach takes care of this condition
-	now */
-	/* REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x1, 3, 2); */
+	REG_FLD_MOD(HDMI_WP, HDMI_WP_SYSCONFIG, 0x1, 3, 2);
 	hdmi_w1_audio_start();
 	printk(KERN_INFO "Start audio transfer...\n");
 	return 0;
Index: Kernel/drivers/video/omap2/dss/hdmi.c
===================================================================
--- Kernel.orig/drivers/video/omap2/dss/hdmi.c	2011-01-21 02:51:13.752695989 +0530
+++ Kernel/drivers/video/omap2/dss/hdmi.c	2011-01-21 15:24:40.602073141 +0530
@@ -794,8 +794,6 @@
 	/* write to phy address 1 to start HDMI line (TXVALID and TMDSCLKEN) */
 	hdmi_write_reg(phy, HDMI_TXPHY_DIGITAL_CTRL, 0xF0000000);
 
-	/* setup max LDO voltage */
-	REG_FLD_MOD(phy, HDMI_TXPHY_POWER_CTRL, 0xB, 3, 0);
 	/*  write to phy address 3 to change the polarity control  */
 	REG_FLD_MOD(phy, HDMI_TXPHY_PAD_CFG_CTRL, 0x1, 27, 27);
 
@@ -1546,7 +1544,7 @@
 	 * audio/video enough time to stop operations.  However, if
 	 * user reconnects HDMI, response will be delayed.
 	 */
-	mdelay(1000);
+	mdelay(100);/* Tunning the delay*/
 
 	dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
 	hdmi_power_off_phy(dssdev);
@@ -1915,9 +1913,25 @@
 	struct omap_video_timings timings;
 
 	img_format = kzalloc(sizeof(*img_format), GFP_KERNEL);
+	if (!img_format) {
+		WARN_ON(1);
+		return;
+	}
 	aud_format = kzalloc(sizeof(*aud_format), GFP_KERNEL);
+	if (!aud_format) {
+		WARN_ON(1);
+		goto hdmi_get_err1;
+	}
 	vsdb_format = kzalloc(sizeof(*vsdb_format), GFP_KERNEL);
+	if (!vsdb_format) {
+		WARN_ON(1);
+		goto hdmi_get_err2;
+	}
 	lat = kzalloc(sizeof(*lat), GFP_KERNEL);
+	if (!lat) {
+		WARN_ON(1);
+		goto hdmi_get_err3;
+	}
 
 	if (!edid_set) {
 		printk(KERN_WARNING "Display doesn't seem to be enabled invalid read\n");
@@ -1927,7 +1941,7 @@
 		edid_set = !memcmp(edid, header, sizeof(header));
 	}
 
-	mdelay(100);
+	mdelay(100); /* We should investigate why the delay is required ??*/
 
 	e = edid;
 	printk(KERN_INFO "\nHeader:\n%02x\t%02x\t%02x\t%02x\t%02x\t%02x\t"
@@ -2010,10 +2024,13 @@
 
 	printk(KERN_INFO "YUV supported %d", hdmi_tv_yuv_supported(edid));
 
-	kfree(img_format);
-	kfree(aud_format);
-	kfree(vsdb_format);
 	kfree(lat);
+hdmi_get_err3:
+	kfree(vsdb_format);
+hdmi_get_err2:
+	kfree(aud_format);
+hdmi_get_err1:
+	kfree(img_format);
 }
 
 static int hdmi_check_timings(struct omap_dss_device *dssdev,
@@ -2151,7 +2168,7 @@
 
 static int hdmi_read_edid(struct omap_video_timings *dp)
 {
-	int r = 0, ret, code;
+	int r = 0, ret = 0, code = 0;
 
 	memset(edid, 0, HDMI_EDID_MAX_LENGTH);
 	if (!edid_set)
