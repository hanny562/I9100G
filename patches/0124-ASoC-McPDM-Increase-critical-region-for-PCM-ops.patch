From: Misael Lopez Cruz <misael.lopez@ti.com>
Date: Fri, 21 Jan 2011 02:31:58 +0000 (-0600)
Subject: ASoC: McPDM: Increase critical region for PCM ops
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=99b2211d319451dd6ea4bb747bf75b034ce4fe9d;hp=88b9e0ebb76e310d0bd309187fd7d13d292fec48

ASoC: McPDM: Increase critical region for PCM ops

McPDM PCM ops are very prone to race conditions during
multistream usecases, so critical region is extended for
startup, hw_params and shutdown callbacks.

Change-Id: I886e53082f1efd78d39f415f41be40a81825019e
Signed-off-by: Misael Lopez Cruz <misael.lopez@ti.com>
Signed-off-by: Sebastien Guiriec <s-guiriec@til.com>
---

Index: android-2.6.35/sound/soc/omap/omap-mcpdm.c
===================================================================
--- android-2.6.35.orig/sound/soc/omap/omap-mcpdm.c	2011-01-25 11:36:13.357812017 +0530
+++ android-2.6.35/sound/soc/omap/omap-mcpdm.c	2011-01-25 11:42:12.457811944 +0530
@@ -410,15 +410,12 @@
 
 	pm_runtime_get_sync(&pdev->dev);
 
-	mutex_lock(&mcpdm->mutex);
 	if (!mcpdm->free) {
 		dev_err(mcpdm->dev, "McPDM interface is in use\n");
-		mutex_unlock(&mcpdm->mutex);
 		ret = -EBUSY;
 		goto err;
 	}
 	mcpdm->free = 0;
-	mutex_unlock(&mcpdm->mutex);
 
 	/* Disable lines while request is ongoing */
 	omap_mcpdm_write(mcpdm, MCPDM_CTRL, 0x00);
@@ -452,15 +449,11 @@
 	pdev = to_platform_device(mcpdm->dev);
 	pdata = pdev->dev.platform_data;
 
-	mutex_lock(&mcpdm->mutex);
 	if (mcpdm->free) {
 		dev_err(mcpdm->dev, "McPDM interface is already free\n");
-		mutex_unlock(&mcpdm->mutex);
 		return;
 	}
-
 	mcpdm->free = 1;
-	mutex_unlock(&mcpdm->mutex);
 
 	pm_runtime_put_sync(&pdev->dev);
 
@@ -506,15 +499,23 @@
 
 	dev_dbg(dai->dev, "%s: active %d\n", __func__, dai->active);
 
+	mutex_lock(&mcpdm->mutex);
+
 	/* make sure we stop any pre-existing shutdown */
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 		cancel_delayed_work(&mcpdm->delayed_work);
 
 	if (!dai->active && mcpdm->free) {
 		err = omap_mcpdm_request(mcpdm);
+		if (err) {
+			mutex_unlock(&mcpdm->mutex);
+			return err;
+		}
 		omap_mcpdm_set_offset(mcpdm);
 	}
 
+	mutex_unlock(&mcpdm->mutex);
+
 	return err;
 }
 
@@ -525,6 +526,8 @@
 
 	dev_dbg(dai->dev, "%s: active %d\n", __func__, dai->active);
 
+	mutex_lock(&mcpdm->mutex);
+
 	if (!dai->active) {
 		if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
 			omap_mcpdm_capture_close(mcpdm, mcpdm->uplink);
@@ -533,6 +536,7 @@
 						msecs_to_jiffies(1000)); /* TODO: pdata ? */
 	}
 
+	mutex_unlock(&mcpdm->mutex);
 }
 
 /* work to delay McPDM shutdown */
@@ -541,11 +545,15 @@
 	struct omap_mcpdm *mcpdm =
 			container_of(work, struct omap_mcpdm, delayed_work.work);
 
+	mutex_lock(&mcpdm->mutex);
+
 	if (!mcpdm->dl_active)
 		omap_mcpdm_playback_close(mcpdm, mcpdm->downlink);
 
 	if (!mcpdm->free && !mcpdm->dl_active && !mcpdm->ul_active)
 		omap_mcpdm_free(mcpdm);
+
+	mutex_unlock(&mcpdm->mutex);
 }
 
 static int omap_mcpdm_dai_hw_params(struct snd_pcm_substream *substream,
@@ -630,22 +638,31 @@
 				  struct snd_soc_dai *dai)
 {
 	struct omap_mcpdm *mcpdm = snd_soc_dai_get_drvdata(dai);
-	int ret;
+	int ret = 0;
+
+	mutex_lock(&mcpdm->mutex);
 
 	/* make sure we stop any pre-existing shutdown */
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		cancel_delayed_work(&mcpdm->delayed_abe_work);
 	}
 
-	ret = omap_mcpdm_dai_startup(substream, dai);
-	if (ret < 0)
-		return ret;
+	if (!dai->active && mcpdm->free) {
+		ret = omap_mcpdm_request(mcpdm);
+		if (ret) {
+			mutex_unlock(&mcpdm->mutex);
+			return ret;
+		}
+		omap_mcpdm_set_offset(mcpdm);
+	}
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 		mcpdm->dl_active++;
 	else
 		mcpdm->ul_active++;
 
+	mutex_unlock(&mcpdm->mutex);
+
 	return ret;
 }
 
@@ -656,6 +673,8 @@
 
 	dev_dbg(dai->dev, "%s: active %d\n", __func__, dai->active);
 
+	mutex_lock(&mcpdm->mutex);
+
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 		mcpdm->dl_active--;
 	else
@@ -673,6 +692,8 @@
 						msecs_to_jiffies(1000)); /* TODO: pdata ? */
 	}
 
+	mutex_unlock(&mcpdm->mutex);
+
 }
 
 /* work to delay McPDM shutdown */
@@ -708,32 +729,31 @@
 	snd_soc_dai_set_dma_data(dai, substream,
 				 &omap_mcpdm_dai_dma_params[stream]);
 
+	mutex_lock(&mcpdm->mutex);
 
 	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		/* Check if McPDM is already started */
 		if (!mcpdm->dn_channels) {
-			mutex_lock(&mcpdm->mutex);
 			abe_dsp_pm_get();
 			/* start ATC before McPDM IP */
 			abe_enable_data_transfer(PDM_DL_PORT);
 			udelay(250);
 			mcpdm->downlink->channels = (PDM_DN_MASK | PDM_CMD_MASK);
-
 			ret = omap_mcpdm_playback_open(mcpdm, &omap_mcpdm_links[0]);
 			if (ret < 0) {
 				mutex_unlock(&mcpdm->mutex);
-				goto out;
+				return ret;
 			}
 
 			omap_mcpdm_start(mcpdm, stream);
-			mutex_unlock(&mcpdm->mutex);
 		}
 	} else {
 		mcpdm->uplink->channels = PDM_UP1_EN | PDM_UP2_EN;
 		ret = omap_mcpdm_capture_open(mcpdm, &omap_mcpdm_links[1]);
 	}
 
-out:
+	mutex_unlock(&mcpdm->mutex);
+
 	return ret;
 }
 
