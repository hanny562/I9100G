From 40b2854bb3e374843dd2bd02b248f22a363c1ae8 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri@ti.com>
Date: Mon, 7 Mar 2011 10:17:45 -0600
Subject: OMAP4: HDMI: Rework HDMI audio FIFO configuration

Set initial configuration of the audio FIFO in hdmi_w1_init.
This configuration is used to set audio FIFO for two
audio channels and 16-bit linear PCM samples with left
justification.

Remove hard-coded values from hdmi_w1_audio_config_format and
hdmi_w1_audio_config_dma in order to use the configuration
set in hdmi_w1_init.

Since no calls to hdmi_w1_audio_config are done anymore,
this function is removed.

Change-Id: I20f049d51535f2b14d36705875a9c24030b59289
Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
---
 arch/arm/plat-omap/hdmi_lib.c              |   54 ++++++---------------------
 arch/arm/plat-omap/include/plat/hdmi_lib.h |   12 +++---
 2 files changed, 18 insertions(+), 48 deletions(-)

diff --git a/arch/arm/plat-omap/hdmi_lib.c b/arch/arm/plat-omap/hdmi_lib.c
index ca3a7c7..32aa3c8 100644
--- a/arch/arm/plat-omap/hdmi_lib.c
+++ b/arch/arm/plat-omap/hdmi_lib.c
@@ -1090,14 +1090,14 @@ static void hdmi_w1_init(struct hdmi_video_timing *t_p,
 	audio_fmt->iec = HDMI_AUDIO_FORMAT_LPCM;
 	audio_fmt->justify = HDMI_AUDIO_JUSTIFY_LEFT;
 	audio_fmt->left_before = HDMI_SAMPLE_LEFT_FIRST;
-	audio_fmt->sample_number = HDMI_ONEWORD_ONE_SAMPLE;
-	audio_fmt->sample_size = HDMI_SAMPLE_24BITS;
+	audio_fmt->sample_number = HDMI_ONEWORD_TWO_SAMPLES;
+	audio_fmt->sample_size = HDMI_SAMPLE_16BITS;
+	audio_fmt->block_start_end = HDMI_BLOCK_STARTEND_ON;
 
-	audio_dma->dma_transfer = 0x10;
+	audio_dma->dma_transfer = 0x20;
 	audio_dma->block_size = 0xC0;
 	audio_dma->dma_or_irq = HDMI_THRESHOLD_DMA;
-	audio_dma->threshold_value = 0x10;
-	audio_dma->block_start_end = HDMI_BLOCK_STARTEND_ON;
+	audio_dma->threshold_value = 0x20;
 }
 
 
@@ -1268,10 +1268,9 @@ static void hdmi_w1_video_config_timing(
 	hdmi_write_reg(HDMI_WP, HDMI_WP_VIDEO_TIMING_V, timing_v);
 }
 
-static int hdmi_w1_audio_config_format(u32 name,
+static void hdmi_w1_audio_config_format(u32 name,
 			struct hdmi_audio_format *audio_fmt)
 {
-	int ret = 0;
 	u32 value = 0;
 
 	value = hdmi_read_reg(name, HDMI_WP_AUDIO_CFG);
@@ -1289,17 +1288,15 @@ static int hdmi_w1_audio_config_format(u32 name,
 	value |= ((audio_fmt->audio_channel_location) << 16);
 	value &= 0xffffffef;
 	value |= ((audio_fmt->iec) << 4);
-	/* Wakeup */
-	value = 0x1030022;
+	value &= 0xffffffdf;
+	value |= ((audio_fmt->block_start_end) << 5);
 	hdmi_write_reg(name, HDMI_WP_AUDIO_CFG, value);
 	DBG("HDMI_WP_AUDIO_CFG = 0x%x\n", value);
 
-	return ret;
 }
 
-static int hdmi_w1_audio_config_dma(u32 name, struct hdmi_audio_dma *audio_dma)
+static void hdmi_w1_audio_config_dma(u32 name, struct hdmi_audio_dma *audio_dma)
 {
-	int ret = 0;
 	u32 value = 0;
 
 	value = hdmi_read_reg(name, HDMI_WP_AUDIO_CFG2);
@@ -1307,8 +1304,6 @@ static int hdmi_w1_audio_config_dma(u32 name, struct hdmi_audio_dma *audio_dma)
 	value |= audio_dma->block_size;
 	value &= 0xffff00ff;
 	value |= audio_dma->dma_transfer << 8;
-	/*  Wakeup */
-	value = 0x20C0;
 	hdmi_write_reg(name, HDMI_WP_AUDIO_CFG2, value);
 	DBG("HDMI_WP_AUDIO_CFG2 = 0x%x\n", value);
 
@@ -1317,12 +1312,9 @@ static int hdmi_w1_audio_config_dma(u32 name, struct hdmi_audio_dma *audio_dma)
 	value |= audio_dma->dma_or_irq << 9;
 	value &= 0xfffffe00;
 	value |= audio_dma->threshold_value;
-	/*  Wakeup */
-	value = 0x020;
 	hdmi_write_reg(name, HDMI_WP_AUDIO_CTRL, value);
 	DBG("HDMI_WP_AUDIO_CTRL = 0x%x\n", value);
 
-	return ret;
 }
 
 #ifdef CONFIG_OMAP_HDMI_AUDIO_WA
@@ -1410,30 +1402,6 @@ static void hdmi_w1_audio_stop(void)
 	REG_FLD_MOD(HDMI_WP, HDMI_WP_AUDIO_CTRL, 0, 30, 30);
 }
 
-static int hdmi_w1_audio_config(void)
-{
-	int ret;
-
-	struct hdmi_audio_format audio_fmt;
-	struct hdmi_audio_dma audio_dma;
-
-	audio_fmt.justify = HDMI_AUDIO_JUSTIFY_LEFT;
-	audio_fmt.sample_number = HDMI_ONEWORD_ONE_SAMPLE;
-	audio_fmt.sample_size = HDMI_SAMPLE_24BITS;
-	audio_fmt.stereo_channel_enable = HDMI_STEREO_ONECHANNELS;
-	audio_fmt.audio_channel_location = 0x03;
-
-	ret = hdmi_w1_audio_config_format(HDMI_WP, &audio_fmt);
-
-	audio_dma.dma_transfer = 0x20;
-	audio_dma.threshold_value = 0x60;
-	audio_dma.dma_or_irq = HDMI_THRESHOLD_DMA;
-
-	ret = hdmi_w1_audio_config_dma(HDMI_WP, &audio_dma);
-
-	return ret;
-}
-
 int hdmi_lib_enable(struct hdmi_config *cfg)
 {
 	u32 r, deep_color = 0;
@@ -1525,7 +1493,9 @@ int hdmi_lib_enable(struct hdmi_config *cfg)
 	val |= ((0x1f) << 27); /* wakeup */
 	hdmi_write_reg(HDMI_WP, HDMI_WP_VIDEO_SIZE, val);
 #endif
-	hdmi_w1_audio_config();
+	hdmi_w1_audio_config_format(HDMI_WP, &audio_fmt);
+	hdmi_w1_audio_config_dma(HDMI_WP, &audio_dma);
+
 
 	/****************************** CORE *******************************/
 	/************* configure core video part ********************************/
diff --git a/arch/arm/plat-omap/include/plat/hdmi_lib.h b/arch/arm/plat-omap/include/plat/hdmi_lib.h
index 83b28eb..fdcda85 100644
--- a/arch/arm/plat-omap/include/plat/hdmi_lib.h
+++ b/arch/arm/plat-omap/include/plat/hdmi_lib.h
@@ -295,6 +295,11 @@ enum hdmi_sample_size {
 	HDMI_SAMPLE_24BITS = 1
 };
 
+enum hdmi_block_start_end {
+	HDMI_BLOCK_STARTEND_ON = 0,
+	HDMI_BLOCK_STARTEND_OFF = 1
+};
+
 struct hdmi_audio_format {
 	enum hdmi_stereo_channel	stereo_channel_enable;
 	enum hdmi_cea_code		audio_channel_location;
@@ -303,6 +308,7 @@ struct hdmi_audio_format {
 	enum hdmi_sample_order		left_before;
 	enum hdmi_sample_perword	sample_number;
 	enum hdmi_sample_size		sample_size;
+	enum hdmi_block_start_end	block_start_end;
 };
 
 enum hdmi_dma_irq {
@@ -310,17 +316,11 @@ enum hdmi_dma_irq {
 	HDMI_THRESHOLD_IRQ = 1
 };
 
-enum hdmi_block_start_end {
-	HDMI_BLOCK_STARTEND_ON = 0,
-	HDMI_BLOCK_STARTEND_OFF = 1
-};
-
 struct hdmi_audio_dma {
 	u8				dma_transfer;
 	u8				block_size;
 	enum hdmi_dma_irq		dma_or_irq;
 	u16				threshold_value;
-	enum hdmi_block_start_end	block_start_end;
 };
 
 enum hdmi_packing_mode {
-- 
1.6.0.4

