From: Deepak K <deepak.k@ti.com>
Date: Thu, 26 May 2011 23:42:02 +0000 (-0500)
Subject: OMAP4: UART: DPLL: Holding locks in console write while transitions of DPLL
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=7911208981b3108d51422bc7f179ac1fc113f0af

OMAP4: UART: DPLL: Holding locks in console write while transitions of DPLL

- Holds the Spin Lock, any printk would be stopped till DPLL
transitions are happening.
- Disables the UART in the current state for RX and TX

Change-Id: Id6417dd079ac0754bb1c2532eb35d23515dad23d
Signed-off-by: Deepak K <deepak.k@ti.com>
---

Index: kernel/arch/arm/mach-omap2/serial.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/serial.c	2011-05-27 23:13:48.337103492 +0900
+++ kernel/arch/arm/mach-omap2/serial.c	2011-05-27 23:29:14.778348094 +0900
@@ -115,6 +115,8 @@
 	u16 mdr3;
 	u16 dma_thresh;
 	u16 lcr;
+	u16 dpll_ier_state;
+	u16 dpll_lcr_state;
 
 
 #endif
@@ -682,8 +684,10 @@
 			/* If Console, Stop from here, till the Frequencies
 			 * Change.
 			 */
-			if (omap_is_console_port(&up->port))
-				console_stop(up->port.cons);
+			if (omap_is_console_port(&up->port)) {
+				up->port.cons->flags &= ~CON_ENABLED;
+				up->try_locked = spin_trylock(&up->port.lock);
+			}
 
 			/* If the device uses the RTS based controlling,
 			 * Pull Up the signal to stop transaction. As the
@@ -701,6 +705,20 @@
 			 */
 			udelay(10);
 
+			/*
+			 * All the Software requirements taken cares, Now
+			 * Block the UART IP.
+			 * Disable the Interrupts ( Since the RTS disabled,
+			 * there shouldnt be no RX ).
+			 * Disable the UART Mode  ( TX case is forced stop )
+			 */
+			uart->dpll_lcr_state = serial_read_reg(uart, UART_LCR);
+			uart->dpll_ier_state = serial_read_reg(uart, UART_IER);
+			/* Hence Forth no interrupts till DPLL is changed */
+			serial_write_reg(uart, UART_IER, 0);
+
+			/* Disable the UART Module, Enabled after DPLL Exit */
+			serial_write_reg(uart, UART_OMAP_MDR1, 0x7);
 			/* Do the Required thing for the Devices in The
 			 * Pre State
 			 */
@@ -730,14 +748,23 @@
 
 			baud_quot = up->port.uartclk/(up->baud_rate * divisor);
 
-			serial_write_reg(uart, UART_OMAP_MDR1, 0x7);
 			serial_write_reg(uart, UART_LCR,
 					OMAP_UART_LCR_CONF_MDB);
 			serial_write_reg(uart, UART_DLL, baud_quot & 0xff);
 			serial_write_reg(uart, UART_DLM, baud_quot >> 8);
-			serial_write_reg(uart, UART_LCR, UART_LCR_WLEN8);
-			/* UART 16x mode */
-			serial_write_reg(uart, UART_OMAP_MDR1, 0x00);
+			serial_write_reg(uart, UART_LCR, uart->dpll_lcr_state);
+			serial_write_reg(uart, UART_IER, uart->dpll_ier_state);
+			/* Based on the Baud change the UART 16x or 13x mode
+			 * Restore the UART mode which is disabled in Pre
+			 * DPLL state.
+			 */
+			if (up->baud_rate > OMAP_MODE13X_SPEED &&
+				up->baud_rate != 3000000)
+				serial_write_reg(uart, UART_OMAP_MDR1,
+						OMAP_MDR1_MODE13X);
+			else
+				serial_write_reg(uart, UART_OMAP_MDR1,
+						OMAP_MDR1_MODE16X);
 #if 0
 			dev_dbg(uart->pdev->dev, "Per Functional Clock Changed"
 					" %u Hz Change baud DLL %d DLM %d\n",
@@ -750,8 +777,11 @@
 			/* Do the Required thing for the Devices in Post
 			 * State
 			 */
-			if (omap_is_console_port(&up->port))
-				console_start(up->port.cons);
+			if (omap_is_console_port(&up->port)) {
+				up->port.cons->flags |= CON_ENABLED;
+				if (up->try_locked)
+					spin_unlock(&up->port.lock);
+			}
 
 			omap_uart_disable_rtspullup(uart);
 		}
Index: kernel/arch/arm/plat-omap/include/plat/omap-serial.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/omap-serial.h	2011-05-27 23:13:49.407335818 +0900
+++ kernel/arch/arm/plat-omap/include/plat/omap-serial.h	2011-05-27 23:29:14.778348094 +0900
@@ -177,6 +177,7 @@
 	int			restore_autorts;
 	unsigned int		baud_rate;
 	void			(*plat_hold_wakelock)(void *up, int flag);
+	int			try_locked;
 };
 
 enum {
Index: kernel/drivers/serial/omap-serial.c
===================================================================
--- kernel.orig/drivers/serial/omap-serial.c	2011-05-27 23:14:14.887097349 +0900
+++ kernel/drivers/serial/omap-serial.c	2011-05-27 23:29:14.778348094 +0900
@@ -1569,6 +1569,7 @@
 	up->uart_dma.uart_base = mem->start;
 	up->ctsrts = omap_up_info->ctsrts;
 	up->plat_hold_wakelock = omap_up_info->plat_hold_wakelock;
+	up->try_locked = 0;
 	/* Initialise this to zero, would be initialsed
 	 * to the corrcet value at set_stermios.
 	 */
