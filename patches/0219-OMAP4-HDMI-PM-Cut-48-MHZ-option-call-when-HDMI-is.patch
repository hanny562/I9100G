From 5ef8f9915fbbddd3e2a11e89b69693bd638ee5a0 Mon Sep 17 00:00:00 2001
From: Dandawate Saket <dsaket@ti.com>
Date: Fri, 25 Feb 2011 16:55:10 +0530
Subject: OMAP4: HDMI: PM Cut 48 MHZ option call when HDMI is not connected

In current solution HDMI optional clock is couple with DSS clocks.
All the clocks are turned on and off in main clock function.
So if DSS is active and no HDMI connected still the optional clock
is kept active. This is not allowing the DSS domain to hit retention.
Separated out the optional clocks from the dss clocks. This clock is
still required to make sure the HDMI PLL is locked and when the HDMI
PHY is full power mode i.e the HDMI active during use case.

Change-Id: Iad41a40565f970d9cb12111f00fe51e3d472442e
Signed-off-by: Dandawate Saket <dsaket@ti.com>
---
 drivers/video/omap2/dss/core.c |   16 +++++++++++-----
 drivers/video/omap2/dss/dss.h  |    2 ++
 drivers/video/omap2/dss/hdmi.c |   22 ++++++++++++++++++++--
 3 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/drivers/video/omap2/dss/core.c b/drivers/video/omap2/dss/core.c
index 8f38087..0ca89cb 100644
--- a/drivers/video/omap2/dss/core.c
+++ b/drivers/video/omap2/dss/core.c
@@ -344,13 +344,10 @@ int dss_opt_clock_enable()
 	int r = clk_enable(core.dss_ick);
 	if (!r) {
 		r = clk_enable(core.dss1_fck);
-		if (!r) {
-			r = clk_enable(core.dss_96m_fck);
-			if (!r)
-				return 0;
+		if (r) {
 			clk_disable(core.dss1_fck);
+			clk_disable(core.dss_ick);
 		}
-		clk_disable(core.dss_ick);
 	}
 	return r;
 }
@@ -359,6 +356,15 @@ void dss_opt_clock_disable()
 {
 	clk_disable(core.dss_ick);
 	clk_disable(core.dss1_fck);
+}
+
+int hdmi_opt_clock_enable()
+{
+	return clk_enable(core.dss_96m_fck);
+}
+
+void hdmi_opt_clock_disable()
+{
 	clk_disable(core.dss_96m_fck);
 }
 
diff --git a/drivers/video/omap2/dss/dss.h b/drivers/video/omap2/dss/dss.h
index 5db2dfa..d765525 100644
--- a/drivers/video/omap2/dss/dss.h
+++ b/drivers/video/omap2/dss/dss.h
@@ -227,6 +227,8 @@ struct regulator *dss_get_vdds_sdi(void);
 struct regulator *dss_get_vdda_dac(void);
 int dss_opt_clock_enable(void);
 void dss_opt_clock_disable(void);
+int hdmi_opt_clock_enable(void);
+void hdmi_opt_clock_disable(void);
 void save_all_ctx(void);
 void restore_all_ctx(void);
 
diff --git a/drivers/video/omap2/dss/hdmi.c b/drivers/video/omap2/dss/hdmi.c
index fa32cd8..63b1436 100644
--- a/drivers/video/omap2/dss/hdmi.c
+++ b/drivers/video/omap2/dss/hdmi.c
@@ -115,7 +115,7 @@ struct hdmi_work_struct {
 	struct work_struct work;
 	int r;
 };
-
+static bool hdmi_opt_clk_state;
 static int in_reset;
 #define HDMI_IN_RESET		0x1000
 static bool hdmi_connected;
@@ -1598,7 +1598,11 @@ static int hdmi_start_display(struct omap_dss_device *dssdev)
 	/* enable clock(s) */
 	dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
 	dss_mainclk_state_enable();
-
+	if (!hdmi_opt_clk_state) {
+		r = hdmi_opt_clock_enable();
+		if (!r)
+			hdmi_opt_clk_state = true;
+	}
 err:
 	return r;
 }
@@ -1666,6 +1670,20 @@ static int hdmi_set_power(struct omap_dss_device *dssdev,
 	DSSINFO("pwrchanged => (%d,%c) = %d\n",
 		power_need, (state_need == HDMI_ACTIVE ? 'A' :
 			     state_need == HDMI_SUSPENDED ? 'S' : 'D'), r);
+
+	if (power_need == HDMI_POWER_FULL) {
+		if (!hdmi_opt_clk_state) {
+			r = hdmi_opt_clock_enable();
+			if (!r)
+				hdmi_opt_clk_state = true;
+		}
+	} else {
+		if (hdmi_opt_clk_state) {
+			hdmi_opt_clock_disable();
+			hdmi_opt_clk_state = false;
+		}
+	}
+
 	return r;
 }
 
-- 
1.6.0.4

