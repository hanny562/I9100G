Index: Kernel-p1/drivers/video/omap2/displays/panel-samsung-ltn121at.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ Kernel-p1/drivers/video/omap2/displays/panel-samsung-ltn121at.c	2011-01-24 15:37:42.539024922 +0530
@@ -0,0 +1,175 @@
+/*
+ * LCD panel driver for Samsung LTN121AT
+ *
+ * Copyright (C) 2010 Samsung Electronics
+ * Author: Shankar Bandal (shankar.b@samsung.com)
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/regulator/consumer.h>
+#include <linux/err.h>
+
+#include <plat/display.h>
+
+struct samsung_data {
+	/* XXX This regulator should actually be in SDP board file, not here,
+	 * as it doesn't actually power the LCD, but something else that
+	 * affects the output to LCD (I think. Somebody clarify). It doesn't do
+	 * harm here, as SDP is the only board using this currently */
+	struct regulator *vusim_reg;
+};
+
+static struct omap_video_timings samsung_ltn121at_timings = {
+	.x_res = 1280,
+	.y_res = 800,
+	.pixel_clock	= 19200,
+
+	.hsw		= 48,
+	.hfp		= 87,
+	.hbp		= 1,
+
+	.vsw		= 4,
+	.vfp		= 6,
+	.vbp		= 6,
+};
+
+static void samsung_ltn121at_panel_get_resolution(struct omap_dss_device *dssdev,
+		u16 *xres, u16 *yres)
+{
+	*xres = dssdev->panel.timings.x_res;
+	*yres = dssdev->panel.timings.y_res;
+}
+
+static int samsung_ltn121at_panel_probe(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd;
+
+	dssdev->panel.config = OMAP_DSS_LCD_TFT | OMAP_DSS_LCD_IVS |
+		OMAP_DSS_LCD_IHS;
+	dssdev->panel.acb = 0x28;
+	dssdev->panel.timings = samsung_ltn121at_timings;
+
+	sd = kzalloc(sizeof(*sd), GFP_KERNEL);
+	if (!sd)
+		return -ENOMEM;
+
+	dev_set_drvdata(&dssdev->dev, sd);
+	sd->vusim_reg = regulator_get(&dssdev->dev, "vusim");
+	if (IS_ERR(sd->vusim_reg)) {
+		kfree(sd);
+		pr_err("failed to get VUSIM regulator\n");
+		return PTR_ERR(sd->vusim_reg);
+	}
+	return 0;
+}
+
+static void samsung_ltn121at_panel_remove(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+
+	regulator_put(sd->vusim_reg);
+
+	kfree(sd);
+}
+
+static int samsung_ltn121at_panel_enable(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+	int r = 0;
+
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+	/* wait couple of vsyncs until enabling the LCD */
+	msleep(1);
+	regulator_enable(sd->vusim_reg);
+
+	if (dssdev->platform_enable) {
+		r = dssdev->platform_enable(dssdev);
+		if (r)
+			return r;
+	}
+	r = omapdss_dpi_display_enable(dssdev);
+	if (r) {
+		dev_err(&dssdev->dev, "failed to enable DPI\n");
+		return r;
+	}
+	dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+	return r;
+}
+
+static void samsung_ltn121at_panel_disable(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
+		return;
+
+	omapdss_dpi_display_disable(dssdev);
+
+	if (dssdev->platform_disable)
+		dssdev->platform_disable(dssdev);
+
+	regulator_disable(sd->vusim_reg);
+	dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
+
+	/* wait at least 5 vsyncs after disabling the LCD */
+	msleep(1);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+}
+
+static int samsung_ltn121at_panel_suspend(struct omap_dss_device *dssdev)
+{
+	samsung_ltn121at_panel_disable(dssdev);
+	return 0;
+}
+
+static int samsung_ltn121at_panel_resume(struct omap_dss_device *dssdev)
+{
+	return samsung_ltn121at_panel_enable(dssdev);
+}
+
+static struct omap_dss_driver samsung_ltn121at_driver = {
+	.probe		= samsung_ltn121at_panel_probe,
+	.remove		= samsung_ltn121at_panel_remove,
+
+	.enable		= samsung_ltn121at_panel_enable,
+	.disable	= samsung_ltn121at_panel_disable,
+	.get_resolution = samsung_ltn121at_panel_get_resolution,
+	.suspend	= samsung_ltn121at_panel_suspend,
+	.resume		= samsung_ltn121at_panel_resume,
+
+	.driver         = {
+		.name   = "samsung_ltn121at_panel",
+		.owner  = THIS_MODULE,
+	},
+};
+
+static int __init samsung_ltn121at_panel_drv_init(void)
+{
+	return omap_dss_register_driver(&samsung_ltn121at_driver);
+}
+
+static void __exit samsung_ltn121at_panel_drv_exit(void)
+{
+	omap_dss_unregister_driver(&samsung_ltn121at_driver);
+}
+
+module_init(samsung_ltn121at_panel_drv_init);
+module_exit(samsung_ltn121at_panel_drv_exit);
+MODULE_LICENSE("GPL");
Index: Kernel-p1/drivers/regulator/core.c
===================================================================
--- Kernel-p1.orig/drivers/regulator/core.c	2010-12-10 15:11:22.000000000 +0530
+++ Kernel-p1/drivers/regulator/core.c	2011-01-24 15:37:42.539024922 +0530
@@ -929,8 +929,10 @@
 	struct regulator_map *node;
 	int has_dev;
 
+#if 0
 	if (consumer_dev && consumer_dev_name)
 		return -EINVAL;
+#endif
 
 	if (!consumer_dev_name && consumer_dev)
 		consumer_dev_name = dev_name(consumer_dev);
Index: Kernel-p1/drivers/video/omap2/displays/Kconfig
===================================================================
--- Kernel-p1.orig/drivers/video/omap2/displays/Kconfig	2010-12-10 15:11:23.000000000 +0530
+++ Kernel-p1/drivers/video/omap2/displays/Kconfig	2011-01-24 15:37:42.539024922 +0530
@@ -8,6 +8,13 @@
 	  Generic panel driver.
 	  Used for DVI output for Beagle and OMAP3 SDP.
 
+config PANEL_SAMSUNG_LTN121AT
+        tristate "Samsung LTN121AT LCD TFT Panel"
+        depends on OMAP2_DSS
+        help
+          LCD Panel used on Samsung Universal OMAP4 board
+
+
 config PANEL_SHARP_LS037V7DW01
         tristate "Sharp LS037V7DW01 LCD Panel"
         depends on OMAP2_DSS
Index: Kernel-p1/drivers/video/omap2/displays/Makefile
===================================================================
--- Kernel-p1.orig/drivers/video/omap2/displays/Makefile	2010-12-10 15:11:23.000000000 +0530
+++ Kernel-p1/drivers/video/omap2/displays/Makefile	2011-01-24 15:37:42.539024922 +0530
@@ -8,3 +8,5 @@
 obj-$(CONFIG_PANEL_TOPPOLY_TDO35S) += panel-toppoly-tdo35s.o
 obj-$(CONFIG_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o
 obj-$(CONFIG_PANEL_ACX565AKM) += panel-acx565akm.o
+
+obj-$(CONFIG_PANEL_SAMSUNG_LTN121AT) += panel-samsung-ltn121at.o
Index: Kernel-p1/arch/arm/configs/android_4430_samsung_defconfig
===================================================================
--- Kernel-p1.orig/arch/arm/configs/android_4430_samsung_defconfig	2011-01-24 15:37:02.000000000 +0530
+++ Kernel-p1/arch/arm/configs/android_4430_samsung_defconfig	2011-01-24 15:37:42.539024922 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35
-# Wed Oct  6 14:22:23 2010
+# Wed Oct  6 19:09:51 2010
 #
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
@@ -441,8 +441,8 @@
 CONFIG_USER_WAKELOCK=y
 CONFIG_EARLYSUSPEND=y
 # CONFIG_NO_USER_SPACE_SCREEN_ACCESS_CONTROL is not set
-CONFIG_CONSOLE_EARLYSUSPEND=y
-# CONFIG_FB_EARLYSUSPEND is not set
+# CONFIG_CONSOLE_EARLYSUSPEND is not set
+CONFIG_FB_EARLYSUSPEND=y
 # CONFIG_APM_EMULATION is not set
 CONFIG_PM_RUNTIME=y
 CONFIG_PM_OPS=y
@@ -1349,23 +1349,22 @@
 CONFIG_OMAP2_DSS_DPI=y
 # CONFIG_OMAP2_DSS_RFBI is not set
 # CONFIG_OMAP2_DSS_VENC is not set
-CONFIG_OMAP2_DSS_HDMI=y
-CONFIG_OMAP2_DSS_DSI=y
-# CONFIG_OMAP2_DSS_USE_DSI_PLL is not set
+# CONFIG_OMAP2_DSS_HDMI is not set
+# CONFIG_OMAP2_DSS_DSI is not set
 CONFIG_OMAP2_DSS_FAKE_VSYNC=y
 CONFIG_OMAP2_DSS_MIN_FCK_PER_PCK=0
 CONFIG_FB_OMAP2=y
 CONFIG_FB_OMAP2_DEBUG_SUPPORT=y
-CONFIG_FB_OMAP2_NUM_FBS=2
+CONFIG_FB_OMAP2_NUM_FBS=1
 
 #
 # OMAP2/3 Display Device Drivers
 #
 # CONFIG_PANEL_GENERIC is not set
+CONFIG_PANEL_SAMSUNG_LTN121AT=y
 # CONFIG_PANEL_SHARP_LS037V7DW01 is not set
 # CONFIG_PANEL_SHARP_LQ043T1DG01 is not set
 # CONFIG_PANEL_PICO_DLP is not set
-# CONFIG_PANEL_TAAL is not set
 # CONFIG_PANEL_NEC_NL8048HL11_01B is not set
 # CONFIG_PANEL_TOPPOLY_TDO35S is not set
 # CONFIG_PANEL_TPO_TD043MTEA1 is not set
Index: Kernel-p1/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- Kernel-p1.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-01-24 15:37:02.000000000 +0530
+++ Kernel-p1/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-01-24 15:37:42.539024922 +0530
@@ -52,6 +52,19 @@
 #include "hsmmc.h"
 #include "smartreflex-class3.h"
 
+#define SDP4430_LCD_PANEL_BACKLIGHT_ENABLE_GPIO		16
+#define SDP4430_MLCD1_PANEL_ENABLE_GPIO			2
+#define SDP4430_MLCD2_PANEL_ENABLE_GPIO			40
+#define SDP4430_LVDS_nRST_ENABLE_GPIO                  17
+
+
+static unsigned backlight_gpio;
+static unsigned mlcd1_enable_gpio;
+static unsigned mlcd2_enable_gpio;
+static unsigned lvds_nrst_gpio;
+static int lcd_enabled;
+
+
 static struct platform_device omap4tab_hdmi_audio_device = {
 	.name		= "hdmi-dai",
 	.id		= -1,
@@ -193,6 +206,43 @@
 	return;
 }
 
+static int ltn121at_panel_enable_lcd(struct omap_dss_device *dssdev)
+{
+
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+        gpio_direction_output(mlcd1_enable_gpio, 1);
+        gpio_direction_output(mlcd2_enable_gpio, 1);
+
+        gpio_direction_output(lvds_nrst_gpio, 1);
+	gpio_direction_output(backlight_gpio, 1);
+
+        lcd_enabled = 1;
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+        return 0;
+}
+
+static void ltn121at_panel_disable_lcd(struct omap_dss_device *dssdev)
+{
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+        lcd_enabled = 0;
+
+        gpio_direction_output(mlcd1_enable_gpio, 0);
+        gpio_direction_output(mlcd2_enable_gpio, 0);
+        gpio_direction_output(backlight_gpio, 0);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+}
+
+static struct omap_dss_device omap4tab_lcd_device = {
+        .name                   = "lcd",
+        .driver_name            = "samsung_ltn121at_panel",
+        .type                   = OMAP_DISPLAY_TYPE_DPI,
+        .phy.dpi.data_lines     = 24,
+        .platform_enable        = ltn121at_panel_enable_lcd,
+        .platform_disable       = ltn121at_panel_disable_lcd,
+	.channel                        = OMAP_DSS_CHANNEL_LCD2,
+};
+
+
 static struct omap_dss_device omap4tab_hdmi_device = {
 	.name = "hdmi",
 	.driver_name = "hdmi_panel",
@@ -206,13 +256,16 @@
 
 
 static struct omap_dss_device *omap4tab_dss_devices[] = {
+	&omap4tab_lcd_device,
+#ifdef CONFIG_OMAP2_DSS_HDMI
 	&omap4tab_hdmi_device,
+#endif
 };
 
 static struct omap_dss_board_info omap4tab_dss_data = {
 	.num_devices	=	ARRAY_SIZE(omap4tab_dss_devices),
 	.devices	=	omap4tab_dss_devices,
-	//.default_device	=	&omap4tab_lcd_device,
+	.default_device	=	&omap4tab_lcd_device,
 };
 
 /* wl128x BT, FM, GPS connectivity chip */
@@ -285,18 +338,7 @@
 	{}	/* Terminator */
 };
 
-static struct regulator_consumer_supply omap4tab_vmmc_supply[] = {
-	{
-		.supply = "vmmc",
-		.dev_name = "mmci-omap-hs.0",
-	},
-};
 
-static struct regulator_consumer_supply omap4tab_cam2_supply[] = {
-	{
-		.supply = "cam2pwr",
-	},
-};
 static int omap4_twl6030_hsmmc_late_init(struct device *dev)
 {
 	int ret = 0;
@@ -339,6 +381,27 @@
 	return 0;
 }
 
+static struct regulator_consumer_supply omap4tab_vmmc_supply[] = {
+	{
+		.supply = "vmmc",
+		.dev_name = "mmci-omap-hs.0",
+	},
+};
+
+static struct regulator_consumer_supply omap4tab_cam2_supply[] = {
+	{
+		.supply = "cam2pwr",
+	},
+};
+
+static struct regulator_consumer_supply omap4tab_vusim_supply[] = {
+	{
+		.supply = "vusim",
+		.dev_name = "display0",
+	},
+};
+
+
 static struct regulator_init_data omap4tab_vaux1 = {
 	.constraints = {
 		.min_uV			= 1000000,
@@ -412,7 +475,7 @@
 static struct regulator_init_data omap4tab_vusim = {
 	.constraints = {
 		.min_uV			= 1200000,
-		.max_uV			= 2900000,
+		.max_uV			= 3000000,
 		.apply_uV		= true,
 		.valid_modes_mask	= REGULATOR_MODE_NORMAL
 					| REGULATOR_MODE_STANDBY,
@@ -420,6 +483,8 @@
 					| REGULATOR_CHANGE_MODE
 					| REGULATOR_CHANGE_STATUS,
 	},
+   .num_consumer_supplies  = 1,
+   .consumer_supplies      = &omap4tab_vusim_supply,
 };
 
 static struct regulator_init_data omap4tab_vana = {
@@ -622,9 +687,101 @@
 }
 #endif
 
+static u16 control_pbias_offset;
 
-static void __init omap4_display_init(void)
+void omap4tab_gpiowk_setup()
 {
+	#define CONTROL_GPIOWK 0x4A31E600
+	u32 val;
+	u32 * ctrl_gpiowk;
+
+	control_pbias_offset = OMAP44XX_CONTROL_PBIAS_LITE;
+	val = omap_ctrl_readl(control_pbias_offset);
+
+	val = val | (1 <<28);
+	omap_ctrl_writel(val, control_pbias_offset);
+
+	val = omap_ctrl_readl(control_pbias_offset);
+
+
+	ctrl_gpiowk = (u32 *) ioremap(CONTROL_GPIOWK, 4);
+	if (!ctrl_gpiowk) {
+		printk(KERN_ERR"OMAP_pad_config: ioremap failed with addr %lx\n",
+			CONTROL_GPIOWK);
+		return;
+	}
+
+	val =  __raw_readl(ctrl_gpiowk);
+
+	val |= (1 <<28);
+	__raw_writel(val, ctrl_gpiowk);
+
+	val =  __raw_readl(ctrl_gpiowk);
+
+	val = omap_ctrl_readl(control_pbias_offset);
+
+	if ((val & (1<<29))!=0)
+	{
+		val = val & ~(1 <<28);
+		omap_ctrl_writel(val, control_pbias_offset);
+
+		val = val & ~(1 <<28);
+		__raw_writel(val, ctrl_gpiowk);
+	}
+
+	val = omap_ctrl_readl(control_pbias_offset);
+ 	if((val & (1<<30)) == 1)
+		printk("SIM_VDDS is set to 3 volt\n");
+	else
+		printk("SIM_VDDS is set to 1.8 volt\n");
+
+	return;
+}
+
+static void __init omap4tab_display_init(void)
+{
+        int r;
+
+        mlcd1_enable_gpio    = SDP4430_MLCD1_PANEL_ENABLE_GPIO;
+        mlcd2_enable_gpio    = SDP4430_MLCD2_PANEL_ENABLE_GPIO;
+        backlight_gpio = SDP4430_LCD_PANEL_BACKLIGHT_ENABLE_GPIO;
+        lvds_nrst_gpio = SDP4430_LVDS_nRST_ENABLE_GPIO;
+
+        r = gpio_request(mlcd1_enable_gpio, "LCD MLCD_ON");
+       if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err0;
+        }
+
+        r = gpio_request(mlcd2_enable_gpio, "LCD MLCD_ON");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err0;
+        }
+        r = gpio_request(backlight_gpio, "LCD Backlight");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD backlight GPIO\n");
+                goto err1;
+        }
+        r = gpio_request(lvds_nrst_gpio, "LVDS_nRST");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err0;
+        }
+
+        gpio_direction_output(mlcd1_enable_gpio, 0);
+        gpio_direction_output(mlcd2_enable_gpio, 0);
+        gpio_direction_output(backlight_gpio, 0);
+        gpio_direction_output(lvds_nrst_gpio, 0);
+
+        return;
+err2:
+        gpio_free(lvds_nrst_gpio);
+err1:
+        gpio_free(mlcd1_enable_gpio);
+        gpio_free(mlcd2_enable_gpio);
+err0:
+        return;
 
 }
 
@@ -643,8 +800,9 @@
 {
 	int status;
 
+	omap4tab_gpiowk_setup();
 	omap4_i2c_init();
-	omap4_display_init();
+	omap4tab_display_init();
 	platform_add_devices(omap4tab_devices, ARRAY_SIZE(omap4tab_devices));
 	omap_serial_init();
 	omap4_twl6030_hsmmc_init(mmc);
Index: Kernel-p1/drivers/video/omap2/dss/dispc.c
===================================================================
--- Kernel-p1.orig/drivers/video/omap2/dss/dispc.c	2011-01-24 11:55:54.000000000 +0530
+++ Kernel-p1/drivers/video/omap2/dss/dispc.c	2011-01-24 15:37:42.539024922 +0530
@@ -280,6 +280,9 @@
 	DISPC_VID_V3_WB_ATTRIBUTES(0),	/* VID 3 pipeline */
 	DISPC_VID_V3_WB_ATTRIBUTES(1),	/* WB pipeline */
 	};
+#ifdef CONFIG_ARCH_OMAP4
+        static u32 pcd_highres_flag=0;
+#endif
 
 
 struct dispc_irq_stats {
@@ -4999,6 +5002,11 @@
 	DSSDBG("dispc_enable_plane %d, %d\n", plane, enable);
 
 	enable_clocks(1);
+        if( (!enable) && (pcd_highres_flag)){
+                dispc_set_lcd_divisor(OMAP_DSS_CHANNEL_LCD2, 1, 4);
+                pcd_highres_flag = 0;
+        }
+
 	_dispc_enable_plane(plane, enable);
 	enable_clocks(0);
 }
@@ -5031,6 +5039,16 @@
 
 	enable_clocks(1);
 
+        if( (plane != OMAP_DSS_GFX) && (channel != OMAP_DSS_CHANNEL_DIGIT)
+                && (pcd_highres_flag != 1) && (width >= 1280)){
+                DSSDBG(KERN_ERR"\n [DISPC] In %s , Changing disp clock\n",__func__);
+                //Jags_31_08 es2.0 dss clock timing corrections ++
+                pcd_highres_flag = 1;
+                dispc_set_lcd_divisor(OMAP_DSS_CHANNEL_LCD2, 1, 7);
+                //Jags_31_08 es2.0 dss clock timing corrections --
+        }
+
+
 	r = _dispc_setup_plane(plane,
 			   paddr, screen_width,
 			   pos_x, pos_y,
