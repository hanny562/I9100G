From 4bf919bf4d718de3900b3c033e615cb50e7b8292 Mon Sep 17 00:00:00 2001
From: Miguel Vadillo <vadillo@ti.com>
Date: Mon, 7 Mar 2011 11:28:58 -0600
Subject: syslink: ipu_pm: restore IPU if a message is pending

Check the mailbox and call restore after saving the
IPU context to allow IPU to attend any message that
arrived while it was saving the context. The saving
is needed since IPU already disabled the interruption
in it's side and a reset is needed.

Also increment the waiting time for IPU to finish
the saving context and be ready to be hibernated since
ipu_pm was not giving enough time to finish that task
and was aborting hibernation.

IPU needs to use two flags in share memory to check
if a message arrived in the middle of its own save
context these flags needs to be reflected also in the
ipu_pm side structs.

Change-Id: Ie320a45a6ba5f7954c082e939879fc902a50f050
Signed-off-by: Miguel Vadillo <vadillo@ti.com>
Signed-off-by: Juan Gutierrez <jgutierrez@ti.com>
Signed-off-by: Paul Hunt <hunt@ti.com>
---
 drivers/dsp/syslink/ipu_pm/ipu_pm.c |   50 +++++++++++++++++++++++++++-------
 drivers/dsp/syslink/ipu_pm/ipu_pm.h |   20 +++++++++++++-
 2 files changed, 58 insertions(+), 12 deletions(-)

diff --git a/drivers/dsp/syslink/ipu_pm/ipu_pm.c b/drivers/dsp/syslink/ipu_pm/ipu_pm.c
index 6d8f5da..9e33868 100644
--- a/drivers/dsp/syslink/ipu_pm/ipu_pm.c
+++ b/drivers/dsp/syslink/ipu_pm/ipu_pm.c
@@ -89,9 +89,15 @@
 /* Flag provided by BIOS */
 #define IDLE_FLAG_PHY_ADDR 0x9E0502D8
 
+/* A9-M3 mbox status */
+#define A9_M3_MBOX 0x4A0F4000
+#define MBOX_MESSAGE_STATUS 0x000000CC
+
 #define NUM_IDLE_CORES	((__raw_readl(appm3Idle) << 1) + \
 				(__raw_readl(sysm3Idle)))
 
+#define PENDING_MBOX_MSG	__raw_readl(a9_m3_mbox + MBOX_MESSAGE_STATUS)
+
 /** ============================================================================
  *  Forward declarations of internal functions
  *  ============================================================================
@@ -317,10 +323,12 @@ static struct omap_mbox *ducati_mbox;
 static struct iommu *ducati_iommu;
 static bool first_time = 1;
 static bool _is_iommu_up;
+static bool _is_mbox_up;
 
 /* BIOS flags states for each core in IPU */
 static void __iomem *sysm3Idle;
 static void __iomem *appm3Idle;
+static void __iomem *a9_m3_mbox;
 #ifdef SR_WA
 static void __iomem *issHandle;
 static void __iomem *fdifHandle;
@@ -2511,20 +2519,25 @@ int ipu_pm_save_ctx(int proc_id)
 		if (retval)
 			goto error;
 		handle->rcb_table->state_flag |= SYS_PROC_DOWN;
-		if (ducati_mbox)
+
+		/* If there is a message in the mbox restore
+		 * immediately after save.
+		 */
+		if (ducati_mbox && PENDING_MBOX_MSG)
+			goto restore;
+
+		if (ducati_mbox) {
 			omap_mbox_save_ctx(ducati_mbox);
-		else
+			_is_mbox_up = 0;
+		} else
 			pr_err("Not able to save mbox");
 		if (ducati_iommu) {
 			iommu_save_ctx(ducati_iommu);
 			_is_iommu_up = 0;
-		}
-		else
+		} else
 			pr_err("Not able to save iommu");
 	} else
 		goto error;
-
-
 exit:
 	mutex_unlock(ipu_pm_state.gate_handle);
 	return 0;
@@ -2535,6 +2548,11 @@ error:
 	mutex_unlock(ipu_pm_state.gate_handle);
 	pr_debug("Aborting hibernation process\n");
 	return -EINVAL;
+restore:
+	pr_debug("Starting restore_ctx since messages pending in mbox\n");
+	mutex_unlock(ipu_pm_state.gate_handle);
+	ipu_pm_restore_ctx(proc_id);
+	return 0;
 }
 EXPORT_SYMBOL(ipu_pm_save_ctx);
 
@@ -2602,15 +2620,15 @@ int ipu_pm_restore_ctx(int proc_id)
 		if (!(ipu_pm_get_state(proc_id) & SYS_PROC_DOWN))
 			goto exit;
 
-		if (ducati_mbox)
+		if (ducati_mbox && !_is_mbox_up) {
 			omap_mbox_restore_ctx(ducati_mbox);
-		else
+			_is_mbox_up = 1;
+		} else
 			pr_err("Not able to restore mbox");
-		if (ducati_iommu) {
+		if (ducati_iommu && !_is_iommu_up) {
 			iommu_restore_ctx(ducati_iommu);
 			_is_iommu_up = 1;
-		}
-		else
+		} else
 			pr_err("Not able to restore iommu");
 
 		pr_info("Wakeup SYSM3\n");
@@ -2737,9 +2755,17 @@ int ipu_pm_setup(struct ipu_pm_config *cfg)
 	memcpy(&ipu_pm_state.cfg, cfg, sizeof(struct ipu_pm_config));
 	ipu_pm_state.is_setup = true;
 
+	/* MBOX flag to check if there are pending messages */
+	a9_m3_mbox = ioremap(A9_M3_MBOX, PAGE_SIZE);
+	if (!a9_m3_mbox) {
+		retval = -ENOMEM;
+		goto exit;
+	}
+
 	/* BIOS flags to know the state of IPU cores */
 	sysm3Idle = ioremap(IDLE_FLAG_PHY_ADDR, (sizeof(void) * 2));
 	if (!sysm3Idle) {
+		iounmap(a9_m3_mbox);
 		retval = -ENOMEM;
 		goto exit;
 	}
@@ -2747,6 +2773,7 @@ int ipu_pm_setup(struct ipu_pm_config *cfg)
 	appm3Idle = (void *)sysm3Idle + sizeof(void *);
 	if (!appm3Idle) {
 		retval = -ENOMEM;
+		iounmap(a9_m3_mbox);
 		iounmap(sysm3Idle);
 		goto exit;
 	}
@@ -3027,6 +3054,7 @@ int ipu_pm_destroy(void)
 
 	first_time = 1;
 	iounmap(sysm3Idle);
+	iounmap(a9_m3_mbox);
 #ifdef SR_WA
 	iounmap(issHandle);
 	iounmap(fdifHandle);
diff --git a/drivers/dsp/syslink/ipu_pm/ipu_pm.h b/drivers/dsp/syslink/ipu_pm/ipu_pm.h
index 88a9cb4..4ed30f4 100644
--- a/drivers/dsp/syslink/ipu_pm/ipu_pm.h
+++ b/drivers/dsp/syslink/ipu_pm/ipu_pm.h
@@ -249,7 +249,7 @@
 #define ONLY_APPM3_IDLE		0x2
 #define ONLY_SYSM3_IDLE		0x1
 #define ALL_CORES_IDLE		0x3
-#define WAIT_FOR_IDLE_TIMEOUT	40u
+#define WAIT_FOR_IDLE_TIMEOUT	500u
 
 /* Macro to make a correct module magic number with refCount */
 #define IPU_PM_MAKE_MAGICSTAMP(x) ((IPU_PM_MODULEID << 12u) | (x))
@@ -401,6 +401,22 @@ struct rcb_block {
 	};
 };
 
+struct ms_agent_block {
+	unsigned addr;
+	unsigned clrmsk;
+	unsigned setmsk;
+	unsigned cpyaddr;
+	unsigned cpyclr;
+	unsigned cpyset;
+	unsigned oldval;
+	unsigned newval;
+};
+
+struct event_int {
+	unsigned mbox_event;
+	unsigned inter_m3_event;
+};
+
 struct sms {
 	unsigned rat;
 	unsigned pm_version;
@@ -409,6 +425,8 @@ struct sms {
 	struct ipu_pm_override pm_flags;
 	unsigned hib_time;
 	struct rcb_block rcb[RCB_MAX];
+	struct ms_agent_block ms_agent[3];
+	struct event_int event_int;
 };
 
 struct pm_event {
-- 
1.6.0.4

