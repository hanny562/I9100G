Index: kernel/drivers/cpufreq/cpufreq_hotplug.c
===================================================================
--- kernel.orig/drivers/cpufreq/cpufreq_hotplug.c	2011-05-31 15:55:54.328349206 +0900
+++ kernel/drivers/cpufreq/cpufreq_hotplug.c	2011-05-31 15:56:21.568347885 +0900
@@ -30,6 +30,9 @@
 #include <linux/err.h>
 #include <linux/slab.h>
 
+#include <mach/omap4-common.h>
+#include <plat/common.h>
+
 /* greater than 80% avg load across online CPUs increases frequency */
 #define DEFAULT_UP_FREQ_MIN_LOAD			(80)
 
@@ -459,6 +462,7 @@
 	struct cpufreq_policy *policy;
 	unsigned int index = 0;
 	unsigned int i, j;
+	struct device *mpu_dev = omap2_get_mpuss_device();
 
 	policy = this_dbs_info->cur_policy;
 
@@ -551,6 +555,7 @@
 			omap4_duty_policy_lock();
 			cpu_up(1);
 			omap4_duty_policy_unlock();
+			dpll_cascading_blocker_hold(mpu_dev);
 			goto out;
 		}
 
@@ -579,6 +584,7 @@
 				omap4_duty_policy_lock();
 				cpu_down(1);
 				omap4_duty_policy_unlock();
+				dpll_cascading_blocker_release(mpu_dev);
 			}
 			goto out;
 		}
@@ -605,19 +611,24 @@
 	struct cpu_dbs_info_s *dbs_info =
 		container_of(work, struct cpu_dbs_info_s, work.work);
 	unsigned int cpu = dbs_info->cpu;
+	struct device *mpu_dev = omap2_get_mpuss_device();
 
 	int delay = 0;
 	mutex_lock(&dbs_info->timer_mutex);
 	if (!dbs_info->boost_applied) {
-       dbs_check_cpu(dbs_info);
-       /* We want all related CPUs to do sampling nearly on same jiffy */
-       delay = usecs_to_jiffies(dbs_tuners_ins.sampling_rate);
-  } else {
-       delay = usecs_to_jiffies(dbs_tuners_ins.boost_timeout);
-       dbs_info->boost_applied = 0;
-       if (num_online_cpus() < 2)
-               cpu_up(1);
-  }
+		dbs_check_cpu(dbs_info);
+		/* We want all related CPUs to do sampling nearly on same jiffy */
+		delay = usecs_to_jiffies(dbs_tuners_ins.sampling_rate);
+	} else {
+		delay = usecs_to_jiffies(dbs_tuners_ins.boost_timeout);
+		dbs_info->boost_applied = 0;
+		
+		if (num_online_cpus() < 2)
+			cpu_up(1);
+			
+		if (num_online_cpus() > 1)
+			dpll_cascading_blocker_hold(mpu_dev);
+  	}
 	queue_delayed_work_on(cpu, khotplug_wq, &dbs_info->work, delay);
 	mutex_unlock(&dbs_info->timer_mutex);
 }
