From 941b7c79b45b8ea1cdfd0e692991579770c6a8ea Mon Sep 17 00:00:00 2001
From: Moiz Sonasath <m-sonasath@ti.com>
Date: Sun, 13 Mar 2011 12:23:25 -0500
Subject: USB: MUSB: Move the L3 constarint calls to Work Queue

Having the L3 constarint calls in the musb interrupt
handler was causing:
BUG: sleeping function called from invalid context at
kernel/mutex.c:94

This is because 'omap_pm_set_min_bus_tput' calls
'mutex_lock' which can sleep till it gets the lock.
But in interrupt context this is not allowed.

So, this patch moves the L3 contraint calls on attach/
detach into the musb work queue which is scheduled from
the musb interrupt handler.

Change-Id: I3da9a5bad32e4eb38a8ca5a1f4c6aee397bcdf8c
Signed-off-by: Moiz Sonasath <m-sonasath@ti.com>
---
 drivers/usb/musb/musb_core.c |   44 +++++++++++++++++++++++++----------------
 include/linux/usb/otg.h      |    1 +
 2 files changed, 28 insertions(+), 17 deletions(-)

diff --git a/drivers/usb/musb/musb_core.c b/drivers/usb/musb/musb_core.c
index c6baf01..d89e05f 100644
--- a/drivers/usb/musb/musb_core.c
+++ b/drivers/usb/musb/musb_core.c
@@ -463,6 +463,8 @@ static irqreturn_t musb_stage0_irq(struct musb *musb, u8 int_usb,
 	struct musb_hdrc_platform_data *plat = dev->platform_data;
 	struct omap_musb_board_data *data = plat->board_data;
 
+	musb->xceiv->event = -1;
+
 	DBG(3, "<== Power=%02x, DevCtl=%02x, int_usb=0x%x\n", power, devctl,
 		int_usb);
 
@@ -727,14 +729,11 @@ static irqreturn_t musb_stage0_irq(struct musb *musb, u8 int_usb,
 
 		musb->ep0_stage = MUSB_EP0_START;
 
+		musb->xceiv->event = USB_EVENT_ID;
+
 		/* Hold a wakelock */
 		wake_lock(&plat->musb_lock);
 
-		/* Hold a L3 constarint */
-		if (plat->set_min_bus_tput)
-			plat->set_min_bus_tput(musb->controller,
-					OCP_INITIATOR_AGENT, (200*1000*4));
-
 #ifdef CONFIG_USB_MUSB_OTG
 		/* flush endpoints when transitioning from Device Mode */
 		if (is_peripheral_active(musb)) {
@@ -800,14 +799,11 @@ b_host:
 				MUSB_MODE(musb), devctl);
 		handled = IRQ_HANDLED;
 
+		musb->xceiv->event = USB_EVENT_NONE;
+
 		/* Release the wakelock */
 		wake_unlock(&plat->musb_lock);
 
-		/* Release L3 constraint */
-		if (plat->set_min_bus_tput)
-			plat->set_min_bus_tput(musb->controller,
-						OCP_INITIATOR_AGENT, -1);
-
 		switch (musb->xceiv->state) {
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
 		case OTG_STATE_A_HOST:
@@ -874,16 +870,11 @@ b_host:
 		} else if (is_peripheral_capable()) {
 			DBG(1, "BUS RESET as %s\n", otg_state_string(musb));
 
+			musb->xceiv->event = USB_EVENT_VBUS;
+
 			/* Hold a wakelock */
 			wake_lock(&plat->musb_lock);
 
-			/* hold the L3 constraint as there was performance drop
-			 * with ondemand governor
-			 */
-			if (plat->set_min_bus_tput)
-				plat->set_min_bus_tput(musb->controller,
-					OCP_INITIATOR_AGENT, (200*1000*4));
-
 			switch (musb->xceiv->state) {
 #ifdef CONFIG_USB_OTG
 			case OTG_STATE_A_SUSPEND:
@@ -1877,12 +1868,31 @@ static const struct attribute_group musb_attr_group = {
 static void musb_irq_work(struct work_struct *data)
 {
 	struct musb *musb = container_of(data, struct musb, irq_work);
+	struct device *dev = musb->controller;
+	struct musb_hdrc_platform_data *plat = dev->platform_data;
 	static int old_state;
 
 	if (musb->xceiv->state != old_state) {
 		old_state = musb->xceiv->state;
 		sysfs_notify(&musb->controller->kobj, NULL, "mode");
 	}
+
+	if (musb->xceiv->event == USB_EVENT_VBUS) {
+		/* Hold a L3 constarint for better throughput */
+		if (plat->set_min_bus_tput)
+			plat->set_min_bus_tput(musb->controller,
+				OCP_INITIATOR_AGENT, (200*1000*4));
+	} else if (musb->xceiv->event == USB_EVENT_ID) {
+		/* Hold a L3 constarint for better throughput */
+		if (plat->set_min_bus_tput)
+			plat->set_min_bus_tput(musb->controller,
+				OCP_INITIATOR_AGENT, (200*1000*4));
+	} else if (musb->xceiv->event == USB_EVENT_NONE) {
+		/* Release L3 constraint on detach*/
+		if (plat->set_min_bus_tput)
+			plat->set_min_bus_tput(musb->controller,
+				OCP_INITIATOR_AGENT, -1);
+		}
 }
 
 /* --------------------------------------------------------------------------
diff --git a/include/linux/usb/otg.h b/include/linux/usb/otg.h
index 1af2c40..863e860 100644
--- a/include/linux/usb/otg.h
+++ b/include/linux/usb/otg.h
@@ -66,6 +66,7 @@ struct otg_transceiver {
 
 	u8			default_a;
 	enum usb_otg_state	state;
+	int			event;
 
 	struct usb_bus		*host;
 	struct usb_gadget	*gadget;
-- 
1.6.0.4

