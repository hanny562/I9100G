From 0c31ff9eb26af76340920bce29865ffd2b11cbf1 Mon Sep 17 00:00:00 2001
From: Misael Lopez Cruz <misael.lopez@ti.com>
Date: Tue, 22 Mar 2011 17:48:46 -0500
Subject: ASoC: twl6040: Add wakelock for headset detection interrupt

TWL6040 is kept active during a voice call, but CPU can go into
suspend state. If headset is inserted or removed while the CPU
is in suspend, SYS_NIRQ2 IRQ line will wake the CPU up and the
headset state will be acknowledged at kernel level, but the
event propagated to userspace layers to cause audio rerouting
might not be completed on-time before CPU goes back to suspend.
A wakelock is added to prevent CPU to go back to suspend
immediately after the event, instead it'll wait for 2 secs for
the event to be processed in userspace.

Change-Id: Idb0f59ab5b5200ed2b10c148545a03af879c2aad
Signed-off-by: Misael Lopez Cruz <misael.lopez@ti.com>
---
 sound/soc/codecs/twl6040.c |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/sound/soc/codecs/twl6040.c b/sound/soc/codecs/twl6040.c
index c690667..fd79e9d 100644
--- a/sound/soc/codecs/twl6040.c
+++ b/sound/soc/codecs/twl6040.c
@@ -28,6 +28,7 @@
 #include <linux/gpio.h>
 #include <linux/platform_device.h>
 #include <linux/slab.h>
+#include <linux/wakelock.h>
 #include <linux/i2c/twl.h>
 #include <linux/switch.h>
 #include <linux/mfd/twl6040-codec.h>
@@ -70,6 +71,7 @@ struct twl6040_jack_data {
 /* codec private data */
 struct twl6040_data {
 	struct twl6040_jack_data hs_jack;
+	struct wake_lock wake_lock;
 	int codec_powered;
 	int pll;
 	int non_lp;
@@ -419,9 +421,11 @@ static irqreturn_t twl6040_audio_handler(int irq, void *data)
 
 	intid = twl6040_reg_read(twl6040, TWL6040_REG_INTID);
 
-	if ((intid & TWL6040_PLUGINT) || (intid & TWL6040_UNPLUGINT))
+	if ((intid & TWL6040_PLUGINT) || (intid & TWL6040_UNPLUGINT)) {
+		wake_lock_timeout(&priv->wake_lock, 2 * HZ);
 		queue_delayed_work(priv->workqueue, &priv->delayed_work,
 				   msecs_to_jiffies(200));
+	}
 
 	return IRQ_HANDLED;
 }
@@ -1119,6 +1123,8 @@ static int twl6040_probe(struct snd_soc_codec *codec)
 		goto switch_err;
 	}
 
+	wake_lock_init(&priv->wake_lock, WAKE_LOCK_SUSPEND, "twl6040");
+
 	ret = twl6040_request_irq(codec->control_data, TWL6040_IRQ_PLUG,
 				  twl6040_audio_handler, "twl6040_irq_plug",
 				  codec);
@@ -1146,6 +1152,7 @@ static int twl6040_probe(struct snd_soc_codec *codec)
 bias_err:
 	twl6040_free_irq(codec->control_data, TWL6040_IRQ_PLUG, codec);
 irq_err:
+	wake_lock_destroy(&priv->wake_lock);
 	switch_dev_unregister(&jack->sdev);
 switch_err:
 	destroy_workqueue(priv->workqueue);
@@ -1161,6 +1168,7 @@ static int twl6040_remove(struct snd_soc_codec *codec)
 
 	twl6040_free_irq(codec->control_data, TWL6040_IRQ_PLUG, codec);
 	twl6040_set_bias_level(codec, SND_SOC_BIAS_OFF);
+	wake_lock_destroy(&priv->wake_lock);
 	switch_dev_unregister(&jack->sdev);
 	destroy_workqueue(priv->workqueue);
 	kfree(priv);
-- 
1.6.0.4

