Index: android-2.6.35/drivers/input/touchscreen/atmel_mxt1386.c
===================================================================
--- android-2.6.35.orig/drivers/input/touchscreen/atmel_mxt1386.c	2010-12-22 14:36:06.931988926 +0530
+++ android-2.6.35/drivers/input/touchscreen/atmel_mxt1386.c	2010-12-22 14:36:07.371989079 +0530
@@ -140,7 +140,7 @@
 module_param(debug, int, 0644);
 MODULE_PARM_DESC(debug, "Activate debugging output");
 
-int mxt_debug=0;
+int mxt_debug=1;
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static struct mxt_data *s_mxt;
@@ -345,21 +345,34 @@
 	struct i2c_msg msg[2];
 	__le16	le_addr;
 	struct mxt_data *mxt;
+	int ret = 0;
 
 	mxt = i2c_get_clientdata(client);
 
 	if (mxt != NULL) {
+//		printk("[SHANKAR] %s [%d] mxt->last_read_addr:0x%x mxt->msg_proc_addr:0x%x addr:0x%x length:%d \n", 
+//				__func__, __LINE__, mxt->last_read_addr, mxt->msg_proc_addr, addr, length);
+
 		if ((mxt->last_read_addr == addr) &&
 			(addr == mxt->msg_proc_addr)) {
-			if  (i2c_master_recv(client, value, length) == length)
+			ret= i2c_master_recv(client, value, length);
+			if(ret < 0)
+			{
+				mxt->read_fail_counter++;
+				printk("[SHANKAR] %s [%d] mxt->last_read_addr:0x%x mxt->msg_proc_addr:0x%x addr:0x%x length:%d read_fail_counter:%d\n", 
+					__func__, __LINE__, mxt->last_read_addr, mxt->msg_proc_addr, addr, length, mxt->read_fail_counter);
+				//Don't know why its failing for addr=0;
+				
+			}
+			if  (ret == length)
+			{
+//				printk("[SHANKAR] %s [%d] i2c_master_recv success  ret:%d , length:%d \n", __func__, __LINE__, ret, length);
 				return 0;
-			else
-				return -EIO;
+			}
 		} else {
 			mxt->last_read_addr = addr;
 		}
 	}
-
 	le_addr = cpu_to_le16(addr);
 	msg[0].addr  = client->addr;
 	msg[0].flags = 0x00;
@@ -370,10 +383,24 @@
 	msg[1].flags = I2C_M_RD;
 	msg[1].len   = length;
 	msg[1].buf   = (u8 *) value;
-	if  (i2c_transfer(adapter, msg, 2) == 2)
+
+retry_i2c:
+	ret = i2c_transfer(adapter, msg, 2);
+	if(ret >0 )
+	{
+		//printk("[SHANKAR] %s [%d] i2c_transfer sucess ret:%d\n", __func__, __LINE__, ret);
 		return 0;
+	}
 	else
+	{
+		mxt->read_fail_counter++;
+		if (mxt->read_fail_counter==2) {
+			//printk("[SHANKAR] %s [%d] i2c_transfer failed retrying \n", __func__, __LINE__);
+			goto retry_i2c;
+		}
+		//printk("[SHANKAR] %s [%d] i2c_transfer failed \n", __func__, __LINE__);
 		return -EIO;
+	}
 
 }
 
@@ -772,6 +799,7 @@
 		if (status & MXT_MSGB_T6_RESET) {
 			dev_info(&client->dev,
 				"maXTouch chip reset\n");
+			mdelay(300);
 		}
 		if (status == 0) {
 			dev_info(&client->dev,
@@ -941,7 +969,7 @@
 		mxt->message_size;
 
 	if (message_length < 256) {
-		message = kmalloc(message_length, GFP_KERNEL);
+		message = kzalloc(message_length, GFP_KERNEL);
 		if (message == NULL) {
 			dev_err(&client->dev, "Error allocating memory\n");
 			return;
@@ -983,7 +1011,6 @@
 			}
 			printk(KERN_INFO "\n");
 		}
-
 		if ((report_id != MXT_END_OF_MESSAGES) && (report_id != 0)) {
 
 			for (i = 0; i < message_length; i++)
@@ -1967,6 +1994,7 @@
 
     klogi("has been called!");
 
+    printk("[SHANKAR] %s[%d] \n", __func__, __LINE__);
     for (cnt=10; cnt>0; cnt--) {
         if (mxt_power_config(s_mxt) < 0)
             continue;
@@ -1978,7 +2006,7 @@
         return;
     }
     
-    mdelay(200);  // 200ms
+    mdelay(300);  // 200ms
 
     //calibrate_chip();
    // DISABLE_INTERRUPT(NV_FALSE);  // enable interrupt
@@ -1992,6 +2020,7 @@
 	struct mxt_platform_data *pdata;
 	struct input_dev         *input;
 	int error, i;
+	char buf[7];
 
 	printk(KERN_INFO "mXT224: mxt_probe\n");
 
@@ -2044,6 +2073,7 @@
 		goto err_free_mem;
 	}
 
+	memset(mxt, 0, sizeof(struct mxt_data));
 	/* Initialize Platform data */
 
 	pdata = client->dev.platform_data;
@@ -2070,7 +2100,12 @@
 	if (debug >= DEBUG_TRACE)
 		printk(KERN_INFO "maXTouch driver identifying chip\n");
 
-
+	i2c_set_clientdata(client, mxt);
+#if 0
+	printk("[SHANKAR]%s [%d] 2 dummy I2C read \n", __func__, __LINE__);
+	mxt_read_block_wo_addr(client, 7, buf);
+	mxt_read_block_wo_addr(client, 7, buf);
+#endif
 	if (mxt_identify(client, mxt) < 0) {
 		dev_err(&client->dev, "Chip could not be identified\n");
 		return -ENODEV;
@@ -2112,6 +2147,7 @@
 		printk(KERN_INFO "maXTouch driver setting abs parameters\n");
 	}
 
+	__set_bit(BTN_TOUCH, input->keybit);  // TO_CHK: added here?
 	__set_bit(EV_ABS, input->evbit);
 	/* single touch */
 	input_set_abs_params(input, ABS_X, 0, mxt->max_x_val, 0, 0);
@@ -2140,7 +2176,6 @@
 	if (debug >= DEBUG_TRACE)
 		printk(KERN_INFO "maXTouch driver setting client data\n");
 
-	i2c_set_clientdata(client, mxt);
 	if (debug >= DEBUG_TRACE)
 		printk(KERN_INFO "maXTouch driver setting drv data\n");
 
@@ -2196,7 +2231,6 @@
 	error = mxt_read_object_table(client, mxt);
 	if (error < 0)
 		goto err_free_irq;
-
 	/* pre-set configuration before soft reset */
 		error = mxt_config_settings(mxt);
 		if (error < 0)
@@ -2204,7 +2238,6 @@
 	
 		for (i=0; i<MXT_MAX_NUM_TOUCHES ; i++)	// _SUPPORT_MULTITOUCH_
 			mtouch_info[i].pressure=-1;
-
 	/* Schedule a worker routine to read any messages that might have
 	 * been sent before interrupts were enabled. */
 	cancel_delayed_work(&mxt->dwork);
Index: android-2.6.35/drivers/input/touchscreen/atmel_mxt1386_cfg.c
===================================================================
--- android-2.6.35.orig/drivers/input/touchscreen/atmel_mxt1386_cfg.c	2010-12-22 14:36:06.931988926 +0530
+++ android-2.6.35/drivers/input/touchscreen/atmel_mxt1386_cfg.c	2010-12-22 14:36:07.371989079 +0530
@@ -405,7 +405,7 @@
 	/* forces a reset of the chipset */
 	reset_chip(mxt, RESET_TO_NORMAL);
 
-	mdelay(100);  // 100ms
+	mdelay(350);  // 100ms
 	
 	return 0;
 }
Index: android-2.6.35/include/linux/atmel_mxt1386.h
===================================================================
--- android-2.6.35.orig/include/linux/atmel_mxt1386.h	2010-12-22 14:36:06.931988926 +0530
+++ android-2.6.35/include/linux/atmel_mxt1386.h	2010-12-22 14:36:07.371989079 +0530
@@ -25,7 +25,7 @@
 #define	MAXTOUCH_I2C_ADDR_HIGH				0x4B
 #define	MAXTOUCH_I2C_ADDR				MAXTOUCH_I2C_ADDR_HIGH
 
-#define	MAXTOUCH_FAMILYID				0x80
+#define	MAXTOUCH_FAMILYID				0xA0
 #define	MXT224_CAL_VARIANTID				0x01
 #define MXT224_UNCAL_VARIANTID                          0x00
 
