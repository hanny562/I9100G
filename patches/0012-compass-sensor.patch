Index: android-2.6.35/drivers/sensors/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/sensors/Kconfig	2010-12-22 14:36:04.141988371 +0530
+++ android-2.6.35/drivers/sensors/Kconfig	2010-12-22 14:36:40.311989136 +0530
@@ -8,5 +8,6 @@
 if NEW_SENSORS
 source "drivers/sensors/optical/Kconfig"
 source "drivers/sensors/accel/Kconfig"
+source "drivers/sensors/compass/Kconfig"
 endif # NEW_SENSORS
 
Index: android-2.6.35/drivers/sensors/compass/Kconfig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/compass/Kconfig	2010-12-22 14:36:04.371988428 +0530
@@ -0,0 +1,17 @@
+#
+# MAGNETIC Sensor Configuration
+#
+
+config COMPASS
+	bool "MAGNETIC Sensor"
+	default y
+	help
+	  This option enables magnetic sensors
+
+config COMPASS_AK8973B
+	depends on COMPASS
+	tristate "AK8973 driver"
+	default y
+	help
+	  This option enables magnetic sensors using ak8973 driver.
+
Index: android-2.6.35/drivers/sensors/compass/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/compass/Makefile	2010-12-22 14:36:04.371988428 +0530
@@ -0,0 +1,9 @@
+##############################################################################
+# COPYRIGHT(C)	: Samsung Electronics Co.Ltd, 2006-2011 ALL RIGHTS RESERVED
+# AUTHOR	: Throughc
+##############################################################################
+# VERSION&DATE	: Version 1.00	2007/12/25 (Throughc)
+##############################################################################
+
+obj-$(CONFIG_COMPASS_AK8973B)	+= ak8973b.o
+
Index: android-2.6.35/drivers/sensors/compass/ak8973b.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/compass/ak8973b.c	2010-12-22 14:36:04.371988428 +0530
@@ -0,0 +1,1004 @@
+/* drivers/i2c/chips/akm8973.c - akm8973 compass driver
+ *
+ * Copyright (C) 2007-2008 HTC Corporation.
+ * Author: Hou-Kun Chen <houkun.chen@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*
+ * Revised by AKM 2009/04/02
+ *
+ */
+
+#include <linux/interrupt.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <linux/irq.h>
+#include <linux/miscdevice.h>
+#include <linux/gpio.h>
+#include <linux/uaccess.h>
+#include <linux/delay.h>
+#include <linux/earlysuspend.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/freezer.h>
+#include <linux/akm8973_akmd.h>
+#include "ak8973b.h"
+
+#define DEBUG 0
+#define AKM8973_TEST_MODE_ENABLE 0
+#define MAX_FAILURE_COUNT 10
+
+static unsigned short normal_i2c[] = { I2C_CLIENT_END };
+
+I2C_CLIENT_INSMOD;
+
+static struct i2c_client *this_client;
+
+struct akm8973_data {
+	struct input_dev *input_dev;
+	struct akm8973_platform_data *pdata;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend;
+#endif
+};
+
+static DECLARE_WAIT_QUEUE_HEAD(open_wq);
+
+static atomic_t open_count;
+static atomic_t open_flag;
+static atomic_t reserve_open_flag;
+
+static atomic_t m_flag;
+static atomic_t a_flag;
+static atomic_t t_flag;
+static atomic_t mv_flag;
+static atomic_t	p_flag;
+
+static short akmd_delay;
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static atomic_t suspend_flag = ATOMIC_INIT(0);
+#endif
+
+/* following are the sysfs callback functions */
+
+#define config_ctrl_reg(name, address) \
+static ssize_t name##_show(struct device *dev, struct device_attribute *attr, \
+			   char *buf) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	return sprintf(buf, "%u\n", i2c_smbus_read_byte_data(client, address)); \
+} \
+static ssize_t name##_store(struct device *dev, struct device_attribute *attr, \
+			    const char *buf, size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	unsigned long val = simple_strtoul(buf, NULL, 10); \
+	if (val > 0xff) \
+		return -EINVAL; \
+	i2c_smbus_write_byte_data(client, address, val); \
+	return count; \
+} \
+static DEVICE_ATTR(name, S_IWUSR | S_IRUGO, name##_show, name##_store)
+
+config_ctrl_reg(ms1, AKECS_REG_MS1);
+
+static char ak_e2prom_data[3];
+
+static int AKI2C_RxData(char *rxData, int length)
+{
+	struct i2c_msg msgs[] = {
+		{
+		 .addr = this_client->addr,
+		 .flags = 0,
+		 .len = 1,
+		 .buf = rxData,
+		 },
+		{
+		 .addr = this_client->addr,
+		 .flags = I2C_M_RD,
+		 .len = length,
+		 .buf = rxData,
+		 },
+	};
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	if (i2c_transfer(this_client->adapter, msgs, 2) < 0) {
+		pr_err("AKI2C_RxData: transfer error\n");
+		return -EIO;
+	} else
+		return 0;
+}
+
+static int AKI2C_TxData(char *txData, int length)
+{
+	struct i2c_msg msg[] = {
+		{
+		 .addr = this_client->addr,
+		 .flags = 0,
+		 .len = length,
+		 .buf = txData,
+		 },
+	};
+
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	if (i2c_transfer(this_client->adapter, msg, 1) < 0) {
+		pr_err("AKI2C_TxData: transfer error\n");
+		return -EIO;
+	} else
+		return 0;
+}
+
+static int AKECS_Init(void)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	return 0;
+}
+
+
+static int AKECS_StartE2PRead(void)
+{
+	char buffer[2];
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	/* Set E2P mode */
+	buffer[0] = AKECS_REG_MS1;
+	buffer[1] = AKECS_MODE_E2P_READ;
+	/* Set data */
+	return AKI2C_TxData(buffer, 2);
+}
+
+
+static int akm_aot_open(struct inode *inode, struct file *file)
+{
+	int ret = -1;
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	if (atomic_cmpxchg(&open_count, 0, 1) == 0) {
+		if (atomic_cmpxchg(&open_flag, 0, 1) == 0) {
+			atomic_set(&reserve_open_flag, 1);
+			wake_up(&open_wq);
+			ret = 0;
+		}
+	}
+	return ret;
+}
+
+static int akm_aot_release(struct inode *inode, struct file *file)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	atomic_set(&reserve_open_flag, 0);
+	atomic_set(&open_flag, 0);
+	atomic_set(&open_count, 0);
+	wake_up(&open_wq);
+	return 0;
+}
+
+
+static void AKECS_Report_Value(short *rbuf)
+{
+	struct akm8973_data *data = i2c_get_clientdata(this_client);
+
+#if DEBUG
+	pr_info("Orientaion: yaw = %d, pitch = %d, roll = %d\n", rbuf[0],
+			rbuf[1], rbuf[2]);
+	pr_info("tmp = %d, m_stat= %d, g_stat=%d\n", rbuf[3],
+			rbuf[4], rbuf[5]);
+	pr_info("Acceleration:   x = %d LSB, y = %d LSB, z = %d LSB\n",
+			rbuf[6], rbuf[7], rbuf[8]);
+	pr_info("Magnetic:   x = %d LSB, y = %d LSB, z = %d LSB\n\n",
+			rbuf[9], rbuf[10], rbuf[11]);
+#endif
+
+	/*if flag is set, execute report */
+	/* Report magnetic sensor information */
+	if (atomic_read(&m_flag)) {
+		input_report_abs(data->input_dev, ABS_RX, rbuf[0]);
+		input_report_abs(data->input_dev, ABS_RY, rbuf[1]);
+		input_report_abs(data->input_dev, ABS_RZ, rbuf[2]);
+		input_report_abs(data->input_dev, ABS_RUDDER, rbuf[4]);
+	}
+
+	/* Report acceleration sensor information */
+	if (atomic_read(&a_flag)) {
+		input_report_abs(data->input_dev, ABS_X, rbuf[6]);
+		input_report_abs(data->input_dev, ABS_Y, rbuf[7]);
+		input_report_abs(data->input_dev, ABS_Z, rbuf[8]);
+		input_report_abs(data->input_dev, ABS_WHEEL, rbuf[5]);
+	}
+
+	/* Report temperature information */
+	if (atomic_read(&t_flag)) {
+		input_report_abs(data->input_dev, ABS_THROTTLE, rbuf[3]);
+	}
+
+	if (atomic_read(&mv_flag)) {
+		input_report_abs(data->input_dev, ABS_HAT0X, rbuf[9]);
+		input_report_abs(data->input_dev, ABS_HAT0Y, rbuf[10]);
+		input_report_abs(data->input_dev, ABS_BRAKE, rbuf[11]);
+	}
+
+	input_sync(data->input_dev);
+}
+
+
+static int AKECS_GetOpenStatus(void)
+{
+	wait_event_interruptible(open_wq, (atomic_read(&open_flag) != 0));
+	return atomic_read(&open_flag);
+}
+
+static int AKECS_GetCloseStatus(void)
+{
+	wait_event_interruptible(open_wq, (atomic_read(&open_flag) <= 0));
+	return atomic_read(&open_flag);
+}
+
+static void AKECS_CloseDone(void)
+{
+	atomic_set(&m_flag, 1);
+	atomic_set(&a_flag, 1);
+	atomic_set(&t_flag, 1);
+	atomic_set(&mv_flag, 1);
+	atomic_set(&p_flag, 1);
+}
+
+
+/*----------------------------------------------------------------------------*/
+//Description : Resetting AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static void AKECS_Reset (void)
+{
+	//gpio_set_value(GPIO_MSENSE_nRST, GPIO_LEVEL_LOW);
+	//udelay(120);
+	//gpio_set_value(GPIO_MSENSE_nRST, GPIO_LEVEL_HIGH);
+}
+
+/*----------------------------------------------------------------------------*/
+//Description : Setting measurement to AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static int AKECS_SetMeasure (void)
+{
+	char buffer[2];
+
+	/* Set measure mode */
+	buffer[0] = AKECS_REG_MS1;
+	buffer[1] = AKECS_MODE_MEASURE;
+
+	/* Set data */
+	return AKI2C_TxData(buffer, 2);
+}
+
+/*----------------------------------------------------------------------------*/
+//Description : Setting EEPROM to AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static int AKECS_SetE2PRead ( void )
+{
+	char buffer[2];
+
+	/* Set measure mode */
+	buffer[0] = AKECS_REG_MS1;
+	buffer[1] = AKECS_MODE_E2P_READ;
+	/* Set data */
+	return AKI2C_TxData(buffer, 2);
+}
+
+
+
+/*----------------------------------------------------------------------------*/
+//Description : Power Down to AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static int AKECS_PowerDown (void)
+{
+	char buffer[2];
+	int ret;
+
+	/* Set powerdown mode */
+	buffer[0] = AKECS_REG_MS1;
+	buffer[1] = AKECS_MODE_POWERDOWN;
+	/* Set data */
+	ret = AKI2C_TxData(buffer, 2);
+	if (ret < 0)
+		return ret;
+
+	/* Dummy read for clearing INT pin */
+	buffer[0] = AKECS_REG_TMPS;
+	/* Read data */
+	ret = AKI2C_RxData(buffer, 1);
+	if (ret < 0)
+		return ret;
+
+ return ret;
+}
+
+/*----------------------------------------------------------------------------*/
+//Description : Get EEPROM Data to AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static int AKECS_GetEEPROMData (void)
+{
+	int ret;
+	char buffer[RBUFF_SIZE + 1];
+
+	ret = AKECS_SetE2PRead();
+	if (ret < 0) return ret;
+
+	memset(buffer, 0, RBUFF_SIZE + 1);
+	buffer[0] = AKECS_EEP_EHXGA;
+	ret =  AKI2C_RxData(buffer, 3);
+
+	if (ret < 0) return ret;
+
+	ak_e2prom_data[0]= buffer[0];
+	ak_e2prom_data[1]= buffer[1];
+	ak_e2prom_data[2]= buffer[2];
+
+	return ret;
+}
+
+static int AKECS_SetMode(char mode)
+{
+	int ret = 0;
+
+	switch (mode) {
+		case AKECS_MODE_MEASURE:
+			ret = AKECS_SetMeasure();
+			break;
+		case AKECS_MODE_E2P_READ:
+			ret = AKECS_SetE2PRead();
+			break;
+		case AKECS_MODE_POWERDOWN:
+			ret = AKECS_PowerDown();
+			break;
+		default:
+			return -EINVAL;
+	}
+
+	/* wait at least 300us after changing mode */
+	msleep(1);
+	return ret;
+}
+
+static int AKECS_TransRBuff(char *rbuf, int size)
+{
+	if(size < RBUFF_SIZE + 1)
+		return -EINVAL;
+
+	// read C0 - C4
+	rbuf[0] = AKECS_REG_ST;
+	return AKI2C_RxData(rbuf, RBUFF_SIZE + 1);
+
+}
+
+
+/*----------------------------------------------------------------------------*/
+//Description : Get EEPROM Data to AKECS
+//WHO : AKEK GWLEE
+//DATE : 2008 12 08
+/*----------------------------------------------------------------------------*/
+static int AKECS_GetData (short *rbuf)
+{
+	int ret;
+  	char buffer[RBUFF_SIZE + 1];
+
+	memset(buffer, 0, RBUFF_SIZE + 1);
+	buffer[0] = AKECS_REG_TMPS;
+
+	ret =  AKI2C_RxData(buffer, 4);  //temp, x, y, z
+	if(ret<0) {
+		pr_err("AKECS_GetData: read failed\n");
+		return ret;
+	}
+	else {
+		rbuf[0] = 35 + (120 -buffer[0])*10/16;
+		rbuf[1] = buffer[1];
+		rbuf[2] = buffer[2];
+		rbuf[3] = buffer[3];
+	}
+  return ret;
+}
+
+static void AKECS_DATA_Measure(void)
+{
+	short  value[12];
+	short mag_sensor[4] ={0, 0, 0, 0};
+
+	AKECS_GetData(mag_sensor);
+	value[0]=0;
+	value[1]=0;
+	value[2]=0;
+	value[3]=mag_sensor[0];		/* temparature */
+	value[4]=0;
+	value[5]=0;
+	value[6]=0;
+	value[7]=0;
+	value[8]=0;
+	value[9]=mag_sensor[1];		/* mag_x */
+	value[10]=mag_sensor[2];	/* mag_y */
+	value[11]=mag_sensor[3];	/* mag_z */
+
+	AKECS_Report_Value(value);
+}
+
+
+static int
+akm_aot_ioctl(struct inode *inode, struct file *file,
+	      unsigned int cmd, unsigned long arg)
+{
+	void __user *argp = (void __user *)arg;
+	short flag;
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	switch (cmd) {
+	case ECS_IOCTL_APP_SET_MFLAG:
+	case ECS_IOCTL_APP_SET_AFLAG:
+	case ECS_IOCTL_APP_SET_TFLAG:
+	case ECS_IOCTL_APP_SET_MVFLAG:
+		if (copy_from_user(&flag, argp, sizeof(flag)))
+			return -EFAULT;
+		if (flag < 0 || flag > 1)
+			return -EINVAL;
+		break;
+	case ECS_IOCTL_APP_SET_DELAY:
+		if (copy_from_user(&flag, argp, sizeof(flag)))
+			return -EFAULT;
+		break;
+	default:
+		break;
+	}
+
+	switch (cmd) {
+	case ECS_IOCTL_APP_SET_MFLAG:
+		atomic_set(&m_flag, flag);
+		break;
+	case ECS_IOCTL_APP_GET_MFLAG:
+		flag = atomic_read(&m_flag);
+		break;
+	case ECS_IOCTL_APP_SET_AFLAG:
+		atomic_set(&a_flag, flag);
+		break;
+	case ECS_IOCTL_APP_GET_AFLAG:
+		flag = atomic_read(&a_flag);
+		break;
+	case ECS_IOCTL_APP_SET_TFLAG:
+		atomic_set(&t_flag, flag);
+		break;
+	case ECS_IOCTL_APP_GET_TFLAG:
+		flag = atomic_read(&t_flag);
+		break;
+	case ECS_IOCTL_APP_SET_MVFLAG:
+		atomic_set(&mv_flag, flag);
+		break;
+	case ECS_IOCTL_APP_GET_MVFLAG:
+		flag = atomic_read(&mv_flag);
+		break;
+	case ECS_IOCTL_APP_SET_DELAY:
+		akmd_delay = flag;
+		break;
+	case ECS_IOCTL_APP_GET_DELAY:
+		flag = akmd_delay;
+		break;
+	default:
+		return -ENOTTY;
+	}
+
+	switch (cmd) {
+	case ECS_IOCTL_APP_GET_MFLAG:
+	case ECS_IOCTL_APP_GET_AFLAG:
+	case ECS_IOCTL_APP_GET_TFLAG:
+	case ECS_IOCTL_APP_GET_MVFLAG:
+	case ECS_IOCTL_APP_GET_DELAY:
+		if (copy_to_user(argp, &flag, sizeof(flag)))
+			return -EFAULT;
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static int akmd_open(struct inode *inode, struct file *file)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	return nonseekable_open(inode, file);
+}
+
+static int akmd_release(struct inode *inode, struct file *file)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	AKECS_CloseDone();
+	return 0;
+}
+
+static int
+akmd_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	   unsigned long arg)
+{
+#if DEBUG
+	int i;
+#endif
+	void __user *argp = (void __user *)arg;
+
+	char msg[RBUFF_SIZE + 1], rwbuf[16];
+	int ret = -1, status;
+	short mode, value[12], delay;
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	switch (cmd) {
+	case ECS_IOCTL_READ:
+	case ECS_IOCTL_WRITE:
+		if (copy_from_user(&rwbuf, argp, sizeof(rwbuf)))
+			return -EFAULT;
+		break;
+	case ECS_IOCTL_SET_MODE:
+		if (copy_from_user(&mode, argp, sizeof(mode)))
+			return -EFAULT;
+		break;
+	case ECS_IOCTL_SET_YPR:
+		if (copy_from_user(&value, argp, sizeof(value)))
+			return -EFAULT;
+		break;
+	default:
+		break;
+	}
+
+	switch (cmd) {
+	case ECS_IOCTL_INIT:
+#if DEBUG
+		pr_info("ECS_IOCTL_INIT %x\n", cmd);
+#endif
+		ret = AKECS_Init();
+		if (ret < 0)
+			return ret;
+		break;
+	case ECS_IOCTL_RESET:
+#if DEBUG
+		pr_info("ECS_IOCTL_RESET %x\n", cmd);
+#endif
+		AKECS_Reset();
+		break;
+	case ECS_IOCTL_READ:
+#if DEBUG
+		pr_info("ECS_IOCTL_READ %x\n", cmd);
+		pr_info(" len %02x:", rwbuf[0]);
+		pr_info(" addr %02x:", rwbuf[1]);
+#endif
+		if (rwbuf[0] < 1)
+			return -EINVAL;
+		ret = AKI2C_RxData(&rwbuf[1], rwbuf[0]);
+#if DEBUG
+		for (i = 0; i < rwbuf[0]; i++)
+			pr_info(" %02x", rwbuf[i + 1]);
+		pr_info(" ret = %d\n", ret);
+#endif
+		if (ret < 0)
+			return ret;
+		break;
+	case ECS_IOCTL_WRITE:
+#if DEBUG
+		pr_info("ECS_IOCTL_WRITE %x\n", cmd);
+		pr_info(" len %02x:", rwbuf[0]);
+		for (i = 0; i < rwbuf[0]; i++)
+			pr_info(" %02x", rwbuf[i + 1]);
+#endif
+		if (rwbuf[0] < 2)
+			return -EINVAL;
+		ret = AKI2C_TxData(&rwbuf[1], rwbuf[0]);
+#if DEBUG
+		pr_info(" ret = %d\n", ret);
+#endif
+		if (ret < 0)
+			return ret;
+		break;
+	case ECS_IOCTL_SET_MODE:
+#if DEBUG
+		pr_info("ECS_IOCTL_SET_MODE %x mode=%x\n", cmd, mode);
+#endif
+		ret = AKECS_SetMode((char)mode);
+#if DEBUG
+		pr_info(" ret = %d\n", ret);
+#endif
+		if (ret < 0)
+			return ret;
+		break;
+	case ECS_IOCTL_GETDATA:
+#if DEBUG
+		pr_info("ECS_IOCTL_GETDATA %x\n", cmd);
+#endif
+		ret = AKECS_TransRBuff(msg, RBUFF_SIZE + 1);
+#if DEBUG
+		pr_info(" ret = %d\n", ret);
+#endif
+		if (ret < 0)
+			return ret;
+#if DEBUG
+		for (i = 0; i < ret; i++)
+			pr_info(" %02x", msg[i]);
+		pr_info("\n");
+#endif
+		break;
+	case ECS_IOCTL_SET_YPR:
+#if DEBUG
+		pr_info("ECS_IOCTL_SET_YPR %x ypr=%x\n", cmd,
+		       (unsigned int)value);
+#endif
+		AKECS_Report_Value(value);
+		//AKECS_DATA_Measure();
+		break;
+	case ECS_IOCTL_GET_OPEN_STATUS:
+#if DEBUG
+		pr_info("ECS_IOCTL_GET_OPEN_STATUS %x start\n", cmd);
+#endif
+		status = AKECS_GetOpenStatus();
+#if DEBUG
+		pr_info("ECS_IOCTL_GET_OPEN_STATUS %x end status=%x\n", cmd,
+		       status);
+#endif
+		break;
+	case ECS_IOCTL_GET_CLOSE_STATUS:
+#if DEBUG
+		pr_info("ECS_IOCTL_GET_CLOSE_STATUS %x start\n", cmd);
+#endif
+		status = AKECS_GetCloseStatus();
+#if DEBUG
+		pr_info("ECS_IOCTL_GET_CLOSE_STATUS %x end status=%x\n", cmd,
+		       status);
+#endif
+		break;
+	case ECS_IOCTL_GET_DELAY:
+		delay = akmd_delay;
+#if DEBUG
+		pr_info("ECS_IOCTL_GET_DELAY %x delay=%x\n", cmd, delay);
+#endif
+		break;
+	default:
+#if DEBUG
+		pr_info("Unknown cmd %x\n", cmd);
+#endif
+		return -ENOTTY;
+	}
+
+	switch (cmd) {
+	case ECS_IOCTL_READ:
+		if (copy_to_user(argp, &rwbuf, sizeof(rwbuf)))
+			return -EFAULT;
+		break;
+	case ECS_IOCTL_GETDATA:
+		if (copy_to_user(argp, &msg, sizeof(msg)))
+			return -EFAULT;
+		break;
+	case ECS_IOCTL_GET_OPEN_STATUS:
+	case ECS_IOCTL_GET_CLOSE_STATUS:
+		if (copy_to_user(argp, &status, sizeof(status)))
+			return -EFAULT;
+		break;
+	case ECS_IOCTL_GET_DELAY:
+		if (copy_to_user(argp, &delay, sizeof(delay)))
+			return -EFAULT;
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+#if AKM8973_TEST_MODE_ENABLE
+void write_akm8973_reg(unsigned char reg_to_print, unsigned char value)
+{
+	char buf[2] = {0,0};
+	int ret;
+
+	buf[0] = reg_to_print;
+	buf[1] = value;
+	ret = AKI2C_TxData(buf, 2);
+}
+
+
+void read_akm8973_reg(char reg_to_print)
+{
+	char buf[4] = {0,0,0,0};
+	int ret;
+
+	buf[0] = reg_to_print;
+	ret = AKI2C_RxData(buf, 1);
+}
+#endif	// AKM8973_TEST_MODE_ENABLE
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void akm8973_early_suspend(struct early_suspend *handler)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	atomic_set(&suspend_flag, 1);
+	if (atomic_read(&open_flag) == 2)
+		AKECS_SetMode(AKECS_MODE_POWERDOWN);
+
+	atomic_set(&reserve_open_flag, atomic_read(&open_flag));
+	atomic_set(&open_flag, 0);
+	wake_up(&open_wq);
+}
+
+static void akm8973_late_resume(struct early_suspend *handler)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	atomic_set(&suspend_flag, 0);
+	atomic_set(&open_flag, atomic_read(&reserve_open_flag));
+	wake_up(&open_wq);
+}
+#endif
+
+static int akm8973_init_client(struct i2c_client *client)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	init_waitqueue_head(&open_wq);
+
+	/* As default, report no information */
+	atomic_set(&m_flag, 0);
+	atomic_set(&a_flag, 0);
+	atomic_set(&t_flag, 0);
+	atomic_set(&mv_flag, 0);
+
+	return 0;
+}
+
+static const struct file_operations akmd_fops = {
+	.owner = THIS_MODULE,
+	.open = akmd_open,
+	.release = akmd_release,
+	.ioctl = akmd_ioctl,
+};
+
+static const struct file_operations akm_aot_fops = {
+	.owner = THIS_MODULE,
+	.open = akm_aot_open,
+	.release = akm_aot_release,
+	.ioctl = akm_aot_ioctl,
+};
+
+static struct miscdevice akm_aot_device = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "akm8973_aot",
+	.fops = &akm_aot_fops,
+};
+
+static struct miscdevice akmd_device = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "akm8973_dev",
+	.fops = &akmd_fops,
+};
+
+int akm8973_probe(struct i2c_client *client, const struct i2c_device_id *devid)
+{
+	struct akm8973_data *akm;
+	int err;
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		err = -ENODEV;
+		goto exit_check_functionality_failed;
+	}
+
+	akm = kzalloc(sizeof(struct akm8973_data), GFP_KERNEL);
+	if (!akm) {
+		err = -ENOMEM;
+		goto exit_alloc_data_failed;
+	}
+
+	akm->pdata = client->dev.platform_data;
+	i2c_set_clientdata(client, akm);
+	akm8973_init_client(client);
+	this_client = client;
+
+	akm->input_dev = input_allocate_device();
+
+	if (!akm->input_dev) {
+		err = -ENOMEM;
+		pr_err(
+		       "akm8973_probe: Failed to allocate input device\n");
+		goto exit_input_dev_alloc_failed;
+	}
+
+	set_bit(EV_ABS, akm->input_dev->evbit);
+
+	/* yaw */
+	input_set_abs_params(akm->input_dev, ABS_RX, 0, 23040, 0, 0);
+	/* pitch */
+	input_set_abs_params(akm->input_dev, ABS_RY, -11520, 11520, 0, 0);
+	/* roll */
+	input_set_abs_params(akm->input_dev, ABS_RZ, -5760, 5760, 0, 0);
+	/* x-axis acceleration */
+	input_set_abs_params(akm->input_dev, ABS_X, -5760, 5760, 0, 0);
+	/* y-axis acceleration */
+	input_set_abs_params(akm->input_dev, ABS_Y, -5760, 5760, 0, 0);
+	/* z-axis acceleration */
+	input_set_abs_params(akm->input_dev, ABS_Z, -5760, 5760, 0, 0);
+	/* temparature */
+	input_set_abs_params(akm->input_dev, ABS_THROTTLE, -30, 85, 0, 0);
+	/* status of magnetic sensor */
+	input_set_abs_params(akm->input_dev, ABS_RUDDER, 0, 3, 0, 0);
+	/* status of acceleration sensor */
+	input_set_abs_params(akm->input_dev, ABS_WHEEL, 0, 3, 0, 0);
+	/* x-axis of raw magnetic vector */
+	input_set_abs_params(akm->input_dev, ABS_HAT0X, -2048, 2032, 0, 0);
+	/* y-axis of raw magnetic vector */
+	input_set_abs_params(akm->input_dev, ABS_HAT0Y, -2048, 2032, 0, 0);
+	/* z-axis of raw magnetic vector */
+	input_set_abs_params(akm->input_dev, ABS_BRAKE, -2048, 2032, 0, 0);
+
+	akm->input_dev->name = "compass";
+	akmd_delay = 0;
+
+	err = input_register_device(akm->input_dev);
+
+	if (err) {
+		pr_err(
+		       "akm8973_probe: Unable to register input device: %s\n",
+		       akm->input_dev->name);
+		goto exit_input_register_device_failed;
+	}
+
+	err = misc_register(&akmd_device);
+	if (err) {
+		pr_err("akm8973_probe: akmd_device register failed\n");
+		goto exit_misc_device_register_failed;
+	}
+
+	err = misc_register(&akm_aot_device);
+	if (err) {
+		pr_err("akm8973_probe: akm_aot_device register failed\n");
+		goto exit_misc_device_register_failed;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_ms1);
+	if (err) {
+		pr_err("akm8973_probe: sysfs dev_attr_ms1=%x \n", dev_attr_ms1);
+		goto exit_misc_device_register_failed;
+	}
+
+#if AKM8973_TEST_MODE_ENABLE
+	write_akm8973_reg(0xE0,0);
+
+	read_akm8973_reg(0xC0);
+	read_akm8973_reg(0xC1);
+	read_akm8973_reg(0xC2);
+	read_akm8973_reg(0xC3);
+	read_akm8973_reg(0xC4);
+	read_akm8973_reg(0xE0);
+	read_akm8973_reg(0xE1);
+	read_akm8973_reg(0xE2);
+	read_akm8973_reg(0xE3);
+	read_akm8973_reg(0xE4);
+	read_akm8973_reg(0xE5);
+	read_akm8973_reg(0xE6);
+#endif
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	akm->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	akm->early_suspend.suspend = akm8973_early_suspend;
+	akm->early_suspend.resume = akm8973_late_resume;
+	register_early_suspend(&akm->early_suspend);
+#endif
+	return 0;
+
+exit_misc_device_register_failed:
+exit_input_register_device_failed:
+	input_free_device(akm->input_dev);
+exit_input_dev_alloc_failed:
+	kfree(akm);
+exit_alloc_data_failed:
+exit_check_functionality_failed:
+	return err;
+}
+
+static int akm8973_detect(struct i2c_client *client, int kind,
+			  struct i2c_board_info *info)
+{
+#if DEBUG
+	pr_info("%s\n", __func__);
+#endif
+	strlcpy(info->type, "akm8973", I2C_NAME_SIZE);
+	return 0;
+}
+
+static int akm8973_remove(struct i2c_client *client)
+{
+	struct akm8973_data *akm = i2c_get_clientdata(client);
+#if DEBUG
+	pr_info("AK8973 compass driver: init\n");
+#endif
+	input_unregister_device(akm->input_dev);
+	kfree(akm);
+	return 0;
+}
+
+static const struct i2c_device_id akm8973_id[] = {
+	{"akm8973", 0},
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, akm8973_id);
+
+static struct i2c_driver akm8973_driver = {
+	.class = I2C_CLASS_HWMON,
+	.probe = akm8973_probe,
+	.remove = akm8973_remove,
+	.id_table = akm8973_id,
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = "akm8973",
+		   },
+	.detect = akm8973_detect,
+	// .address_data = &addr_data,
+};
+
+static int __init akm8973_init(void)
+{
+#if DEBUG
+	pr_info("AK8973 compass driver: init\n");
+#endif
+	return i2c_add_driver(&akm8973_driver);
+}
+
+static void __exit akm8973_exit(void)
+{
+#if DEBUG
+	pr_info("AK8973 compass driver: exit\n");
+#endif
+	i2c_del_driver(&akm8973_driver);
+}
+
+module_init(akm8973_init);
+module_exit(akm8973_exit);
+
+MODULE_AUTHOR("Hou-Kun Chen <hk_chen@htc.com>");
+MODULE_DESCRIPTION("AK8973 compass driver");
+MODULE_LICENSE("GPL");
Index: android-2.6.35/drivers/sensors/compass/ak8973b.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/compass/ak8973b.h	2010-12-22 14:36:04.371988428 +0530
@@ -0,0 +1,124 @@
+/*
+ * Definitions for ak8973 compass chip.
+ */
+#ifndef AK8973B_H
+#define AK8973B_H
+
+#include <linux/ioctl.h>
+
+#define SENSOR_OPER_MODE			1 /*0: acc only, 1: all */
+
+
+/* Compass device dependent definition */
+#define AKECS_MODE_MEASURE  0x00    /* Starts measurement. Please use AKECS_MODE_MEASURE_SNG */
+/* or AKECS_MODE_MEASURE_SEQ instead of this. */
+#define AKECS_MODE_PFFD     0x01    /* Start pedometer and free fall detect. */
+#define AKECS_MODE_E2P_READ 0x02    /* E2P access mode (read). */
+#define AKECS_MODE_POWERDOWN    0x03    /* Power down mode */
+
+#define AKECS_MODE_MEASURE_SNG  0x10    /* Starts single measurement */
+#define AKECS_MODE_MEASURE_SEQ  0x11    /* Starts sequential measurement */
+
+/* Default register settings */
+#define CSPEC_AINT      0x01    /* Amplification for acceleration sensor */
+#define CSPEC_SNG_NUM       0x01    /* Single measurement mode */
+#define CSPEC_SEQ_NUM       0x02    /* Sequential measurement mode */
+#define CSPEC_SFRQ_32       0x00    /* Measurement frequency: 32Hz */
+#define CSPEC_SFRQ_64       0x01    /* Measurement frequency: 64Hz */
+#define CSPEC_MCS       0x07    /* Clock frequency */
+#define CSPEC_MKS       0x01    /* Clock type: CMOS level */
+#define CSPEC_INTEN     0x01    /* Interruption pin enable: Enable */
+
+
+#define RBUFF_SIZE		4	/* Rx buffer size */
+#define MAX_CALI_SIZE	0x1000U	/* calibration buffer size */
+#define AKECS_REG_ST		0xC0
+#define AKECS_REG_TMPS		0xC1
+#define AKECS_REG_H1X		0xC2
+#define AKECS_REG_H1Y		0xC3
+#define AKECS_REG_H1Z		0xC4
+#define AKECS_REG_MS1		0xE0
+
+#define AKECS_REG_HXDA		0xE1
+#define AKECS_REG_HYDA		0xE2
+#define AKECS_REG_HZDA		0xE3
+#define AKECS_REG_HXGA		0xE4
+#define AKECS_REG_HYGA		0xE5
+#define AKECS_REG_HZGA		0xE6
+
+// AKECS EEPROM address
+#define AKECS_EEP_ETS		  0x62
+#define AKECS_EEP_EVIR		0x63
+#define AKECS_EEP_EIHE		0x64
+#define AKECS_EEP_ETST		0x65
+#define AKECS_EEP_EHXGA	  0x66
+#define AKECS_EEP_EHYGA	  0x67
+#define AKECS_EEP_EHZGA	  0x68
+#define AKMIO				0xA1
+
+/* IOCTLs for AKM library */
+#define ECS_IOCTL_INIT                  _IO(AKMIO, 0x01)
+#define ECS_IOCTL_WRITE                 _IOW(AKMIO, 0x02, char[5])
+#define ECS_IOCTL_READ                  _IOWR(AKMIO, 0x03, char[5])
+#define ECS_IOCTL_RESET      	          _IO(AKMIO, 0x04)
+#define ECS_IOCTL_INT_STATUS            _IO(AKMIO, 0x05)
+#define ECS_IOCTL_FFD_STATUS            _IO(AKMIO, 0x06)
+#define ECS_IOCTL_SET_MODE              _IOW(AKMIO, 0x07, short)
+#define ECS_IOCTL_GETDATA               _IOR(AKMIO, 0x08, char[RBUFF_SIZE+1])
+#define ECS_IOCTL_GET_NUMFRQ            _IOR(AKMIO, 0x09, char[2])
+#define ECS_IOCTL_SET_PERST             _IO(AKMIO, 0x0A)
+#define ECS_IOCTL_SET_G0RST             _IO(AKMIO, 0x0B)
+#define ECS_IOCTL_SET_YPR               _IOW(AKMIO, 0x0C, short[12])
+#define ECS_IOCTL_GET_OPEN_STATUS       _IOR(AKMIO, 0x0D, int)
+#define ECS_IOCTL_GET_CLOSE_STATUS      _IOR(AKMIO, 0x0E, int)
+#define ECS_IOCTL_GET_CALI_DATA         _IOR(AKMIO, 0x0F, char[MAX_CALI_SIZE])
+#define ECS_IOCTL_GET_DELAY             _IOR(AKMIO, 0x30, short)
+
+#define EMCS_IOCTL_OPEN		201
+#define EMCS_IOCTL_CLOSE	202
+#define ECS_IOCTL_DEVMGR_GET_DATA	203							/* for Device Manager Test */
+
+/* IOCTLs for APPs */
+#define ECS_IOCTL_APP_SET_MODE		_IOW(AKMIO, 0x10, short)
+#define ECS_IOCTL_APP_SET_MFLAG		_IOW(AKMIO, 0x11, short)
+#define ECS_IOCTL_APP_GET_MFLAG		_IOW(AKMIO, 0x12, short)
+#define ECS_IOCTL_APP_SET_AFLAG		_IOW(AKMIO, 0x13, short)
+#define ECS_IOCTL_APP_GET_AFLAG		_IOR(AKMIO, 0x14, short)
+#define ECS_IOCTL_APP_SET_TFLAG		_IOR(AKMIO, 0x15, short)
+#define ECS_IOCTL_APP_GET_TFLAG		_IOR(AKMIO, 0x16, short)
+#define ECS_IOCTL_APP_RESET_PEDOMETER   _IO(AKMIO, 0x17)
+#define ECS_IOCTL_APP_SET_DELAY		_IOW(AKMIO, 0x18, short)
+#define ECS_IOCTL_APP_GET_DELAY		ECS_IOCTL_GET_DELAY
+#define ECS_IOCTL_APP_SET_MVFLAG	_IOW(AKMIO, 0x19, short)	/* Set raw magnetic vector flag */
+#define ECS_IOCTL_APP_GET_MVFLAG	_IOR(AKMIO, 0x1A, short)	/* Get raw magnetic vector flag */
+#define ECS_IOCTL_APP_SET_PFLAG		_IOW(AKMIO, 0x1B, short)
+#define ECS_IOCTL_APP_GET_PFLAG		_IOR(AKMIO, 0x1C, short)
+
+/* IOCTLs for pedometer */
+#define ECS_IOCTL_SET_STEP_CNT          _IOW(AKMIO, 0x20, short)
+
+#define ECS_IOCTL_APP_SET_ACC_MODE _IO(AKMIO, 0x21)
+
+/* Default GPIO setting */
+#define ECS_RST		108	/*MISC4, bit2 */
+//#define ECS_CLK_ON	103  //for compile,  dont necessary
+//#define ECS_INTR		102	/*INT2, bit1 */
+
+#define AK8973B_PERIOD 500000000 //0.5 sec
+
+/*********** for debug **********************************************************/
+#if 0
+#define gprintk(fmt, x... ) printk( "%s(%d): " fmt, __FUNCTION__ ,__LINE__, ## x)
+#else
+#define gprintk(x...) do { } while (0)
+#endif
+/*******************************************************************************/
+
+struct akm8976_platform_data {
+	int reset;
+	int clk_on;
+	int intr;
+};
+
+#endif
+
Index: android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:04.151988197 +0530
+++ android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:54.402612411 +0530
@@ -772,6 +772,8 @@
 CONFIG_OPTICAL_ISL29023=y
 CONFIG_ACCEL=y
 CONFIG_ACCEL_KXSD9=y
+CONFIG_COMPASS=y
+CONFIG_COMPASS_AK8973B=y
 CONFIG_MISC_DEVICES=y
 # CONFIG_AD525X_DPOT is not set
 CONFIG_ANDROID_PMEM=y
Index: android-2.6.35/include/linux/akm8973_akmd.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/include/linux/akm8973_akmd.h	2010-12-22 14:36:04.381988846 +0530
@@ -0,0 +1,70 @@
+/*
+ * Definitions for akm8973 compass chip.
+ */
+#ifndef AKM8973_H
+#define AKM8973_H
+
+#include <linux/ioctl.h>
+
+#ifdef __KERNEL__
+
+struct akm8973_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(void);
+	int (*power_off)(void);
+};
+
+/* Compass device dependent definition */
+#define AKECS_MODE_MEASURE	0x00	/* Starts measurement. */
+#define AKECS_MODE_E2P_READ	0x02	/* E2P access mode (read). */
+#define AKECS_MODE_POWERDOWN	0x03	/* Power down mode */
+
+#define RBUFF_SIZE		4	/* Rx buffer size */
+
+/* AK8973 register address */
+#define AKECS_REG_ST			0xC0
+#define AKECS_REG_TMPS			0xC1
+#define AKECS_REG_H1X			0xC2
+#define AKECS_REG_H1Y			0xC3
+#define AKECS_REG_H1Z			0xC4
+
+#define AKECS_REG_MS1			0xE0
+#define AKECS_REG_HXDA			0xE1
+#define AKECS_REG_HYDA			0xE2
+#define AKECS_REG_HZDA			0xE3
+#define AKECS_REG_HXGA			0xE4
+#define AKECS_REG_HYGA			0xE5
+#define AKECS_REG_HZGA			0xE6
+
+#endif
+
+#define AKMIO                           0xA1
+
+/* IOCTLs for AKM library */
+#define ECS_IOCTL_INIT                  _IO(AKMIO, 0x01)
+#define ECS_IOCTL_WRITE                 _IOW(AKMIO, 0x02, char[5])
+#define ECS_IOCTL_READ                  _IOWR(AKMIO, 0x03, char[5])
+#define ECS_IOCTL_RESET      	        _IO(AKMIO, 0x04)
+#define ECS_IOCTL_SET_MODE              _IOW(AKMIO, 0x07, short)
+#define ECS_IOCTL_GETDATA               _IOR(AKMIO, 0x08, char[RBUFF_SIZE+1])
+#define ECS_IOCTL_GET_NUMFRQ            _IOR(AKMIO, 0x09, char[2])
+#define ECS_IOCTL_SET_YPR               _IOW(AKMIO, 0x0C, short[12])
+#define ECS_IOCTL_GET_OPEN_STATUS       _IOR(AKMIO, 0x0D, int)
+#define ECS_IOCTL_GET_CLOSE_STATUS      _IOR(AKMIO, 0x0E, int)
+#define ECS_IOCTL_GET_DELAY             _IOR(AKMIO, 0x30, short)
+
+/* IOCTLs for APPs */
+#define ECS_IOCTL_APP_SET_MFLAG		_IOW(AKMIO, 0x11, short)
+#define ECS_IOCTL_APP_GET_MFLAG		_IOW(AKMIO, 0x12, short)
+#define ECS_IOCTL_APP_SET_AFLAG		_IOW(AKMIO, 0x13, short)
+#define ECS_IOCTL_APP_GET_AFLAG		_IOR(AKMIO, 0x14, short)
+#define ECS_IOCTL_APP_SET_TFLAG		_IOR(AKMIO, 0x15, short)
+#define ECS_IOCTL_APP_GET_TFLAG		_IOR(AKMIO, 0x16, short)
+#define ECS_IOCTL_APP_SET_DELAY		_IOW(AKMIO, 0x18, short)
+#define ECS_IOCTL_APP_GET_DELAY		ECS_IOCTL_GET_DELAY
+#define ECS_IOCTL_APP_SET_MVFLAG	_IOW(AKMIO, 0x19, short) /* Set raw magnetic vector flag */
+#define ECS_IOCTL_APP_GET_MVFLAG	_IOR(AKMIO, 0x1A, short) /* Get raw magnetic vector flag */
+
+#endif
+
