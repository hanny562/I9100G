From: Wenbiao Wang <wwang@ti.com>
Date: Thu, 26 May 2011 20:03:32 +0000 (-0500)
Subject:     OMAP4: Disable RTS during suspend
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=86b5ca13c01c1d0d2a92201f99ec0bd65f5d7228

OMAP4: Disable RTS during suspend

    The patch only applies to cases when auto-RTS mode is used. During suspend,
    we need to set RTS as invalid before shutting down UART. During wakeup,
    we need to make sure RTS was not changed to be valid until UART is
    ready to receive data. Otherwise, UART may lose some data from clients.

    This change is ported from Moto.
    commit 900024ea8480698429cd2a42fb0aa64a299815cf
    Author: Yuanyuan Zhong <a6510c@motorola.com>

Change-Id: I7709877ce32281847246aee7c1a46f97ada97ff1

Signed-off-by: Wenbiao Wang <wwang@ti.com>
---

Index: kernel/arch/arm/mach-omap2/serial.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/serial.c	2011-05-27 13:04:41.000000000 +0900
+++ kernel/arch/arm/mach-omap2/serial.c	2011-05-27 13:18:33.000000000 +0900
@@ -512,6 +512,19 @@
 	list_for_each_entry(uart, &uart_list, node) {
 		if (num == uart->num && uart->can_sleep) {
 			omap_uart_enable_rtspullup(uart);
+			/*
+			 * There seems to be a window here where
+			 * data could still be on the way to the
+			 * fifo. This delay is ~1 byte time @ 115.2k
+			 */
+			udelay(80);
+#ifdef CONFIG_SERIAL_OMAP
+			if (omap_uart_active(num, 0)) {
+				omap_uart_block_sleep(uart);
+				omap_uart_disable_rtspullup(uart);
+				return;
+			}
+#endif
 			omap_uart_disable_clocks(uart);
 			return;
 		}
Index: kernel/arch/arm/plat-omap/include/plat/omap-serial.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/omap-serial.h	2011-05-27 13:04:42.000000000 +0900
+++ kernel/arch/arm/plat-omap/include/plat/omap-serial.h	2011-05-27 13:18:33.000000000 +0900
@@ -117,6 +117,7 @@
 	int			uart_wakeup_event;
 	void			(*plat_hold_wakelock)(void *p, int flag);
 
+	unsigned char		ctsrts;
 	u16			rts_padconf;
 	int			rts_override;
 	u16			padconf_wake_ev;
@@ -172,6 +173,8 @@
 	unsigned char		msr_saved_flags;
 	char			name[20];
 	unsigned long		port_activity;
+	unsigned char		ctsrts;
+	int			restore_autorts;
 	unsigned int		baud_rate;
 	void			(*plat_hold_wakelock)(void *up, int flag);
 };
Index: kernel/drivers/serial/omap-serial.c
===================================================================
--- kernel.orig/drivers/serial/omap-serial.c	2011-05-27 13:05:32.000000000 +0900
+++ kernel/drivers/serial/omap-serial.c	2011-05-27 13:18:33.000000000 +0900
@@ -63,6 +63,7 @@
 static void uart_tx_dma_callback(int lch, u16 ch_status, void *data);
 static void serial_omap_rxdma_poll(unsigned long uart_no);
 static int serial_omap_start_rxdma(struct uart_omap_port *up);
+static void serial_omap_set_autorts(struct uart_omap_port *p, int set);
 static int omap4_uart_cts_wakeup(int uart_no, int state);
 
 #if 1// TI patch --> UART Tx errata patch
@@ -77,6 +78,12 @@
 
 static inline void serial_out(struct uart_omap_port *up, int offset, int value)
 {
+	if (up->restore_autorts) {
+		if (offset == UART_MCR && value & UART_MCR_RTS)
+			value &= ~UART_MCR_RTS;
+		if (offset == UART_EFR && value & UART_EFR_RTS)
+			value &= ~UART_EFR_RTS;
+	}
 	offset <<= up->port.regshift;
 	writew(value, up->port.membase + offset);
 }
@@ -301,6 +308,11 @@
 
 	if (!up->use_dma) {
 		serial_omap_enable_ier_thri(up);
+
+		if (up->restore_autorts) {
+			up->restore_autorts = 0;
+			serial_omap_set_autorts(up, 1);
+		}
 		return;
 	}
 
@@ -349,6 +361,11 @@
 				up->uart_dma.uart_dma_tx, 0);
 	/* FIXME: Cache maintenance needed here? */
 	omap_start_dma(up->uart_dma.tx_dma_channel);
+
+	if (up->restore_autorts) {
+		up->restore_autorts = 0;
+		serial_omap_set_autorts(up, 1);
+	}
 }
 
 static unsigned int check_modem_status(struct uart_omap_port *up)
@@ -478,8 +495,15 @@
 	unsigned char mcr = 0;
 
 	dev_dbg(up->port.dev, "serial_omap_set_mctrl+%d\n", up->pdev->id);
-	if (mctrl & TIOCM_RTS)
-		mcr |= UART_MCR_RTS;
+	if (mctrl & TIOCM_RTS) {
+		/*
+		 * We need to be careful not to cause
+		 * RTS to assert when we have a pending
+		 * auto-rts restore.
+		 */
+		if (!up->restore_autorts)
+			mcr |= UART_MCR_RTS;
+	}
 	if (mctrl & TIOCM_DTR)
 		mcr |= UART_MCR_DTR;
 	if (mctrl & TIOCM_OUT1)
@@ -490,6 +514,8 @@
 		mcr |= UART_MCR_LOOP;
 
 	mcr |= up->mcr;
+	if (!(mctrl & TIOCM_RTS))
+		mcr &= ~UART_MCR_RTS;
 	serial_out(up, UART_MCR, mcr);
 }
 
@@ -508,6 +534,51 @@
 	spin_unlock_irqrestore(&up->port.lock, flags);
 }
 
+static void serial_omap_set_autorts(struct uart_omap_port *p, int set)
+{
+	u8 lcr_val = 0, mcr_val = 0, efr_val = 0;
+	u8 lcr_backup = 0, mcr_backup = 0, efr_backup = 0;
+
+	lcr_val = serial_in(p, UART_LCR);
+	lcr_backup = lcr_val;
+	/* Enter Config mode B */
+	serial_out(p, UART_LCR, 0xbf);
+
+	efr_val = serial_in(p, UART_EFR);
+	efr_backup = efr_val;
+
+	/*
+	 * Enhanced functions write enable.
+	 * Enables writes to IER[7:4], FCR[5:4], MCR[7:5]
+	 */
+	serial_out(p, UART_EFR, efr_val | 0x10);
+
+	mcr_val = serial_in(p, UART_MCR);
+	mcr_backup = mcr_val;
+	/* Enable access to TCR_REG and TLR_REG */
+	serial_out(p, UART_MCR, mcr_val | 0x40);
+
+	/* Set RX_FIFO_TRIG levels */
+	serial_out(p, 6, 0x0f);
+
+	efr_val = serial_in(p, UART_EFR);
+	if (set)
+		serial_out(p, UART_EFR, efr_val | (1 << 6));
+	else
+	serial_out(p, UART_EFR, efr_val & ~(1 << 6));
+
+
+	mcr_val = serial_in(p, UART_MCR);
+	/* Restore original state of TCR_TLR access */
+	serial_out(p, UART_MCR, (mcr_val & ~0x40) | (mcr_backup & 0x40));
+
+	/* Enhanced function write disable. */
+	serial_out(p, UART_EFR, serial_in(p, UART_EFR) & ~0x10);
+
+	/* Normal operation */
+	serial_out(p, UART_LCR, lcr_backup);
+}
+
 static int serial_omap_startup(struct uart_port *port)
 {
 	struct uart_omap_port *up = (struct uart_omap_port *)port;
@@ -606,6 +677,7 @@
 {
 	struct uart_omap_port *up = (struct uart_omap_port *)port;
 	unsigned long flags = 0;
+	u8 lcr, efr;
 
 	dev_dbg(up->port.dev, "serial_omap_shutdown+%d\n", up->pdev->id);
 	/*
@@ -614,9 +686,20 @@
 	up->ier = 0;
 	serial_out(up, UART_IER, 0);
 
+	/* If we're using auto-rts then disable it.  */
 	spin_lock_irqsave(&up->port.lock, flags);
+	lcr = serial_in(up, UART_LCR);
+	serial_out(up, UART_LCR, 0xbf);
+	efr = serial_in(up, UART_EFR);
+	serial_out(up, UART_LCR, lcr);
+
+	if (efr & UART_EFR_RTS) {
+		serial_omap_set_autorts(up, 0);
+		up->restore_autorts = 1;
+	}
+
 	up->port.mctrl &= ~TIOCM_OUT2;
-	serial_omap_set_mctrl(&up->port, up->port.mctrl);
+	serial_omap_set_mctrl(&up->port, (up->port.mctrl & ~TIOCM_RTS));
 	spin_unlock_irqrestore(&up->port.lock, flags);
 
 	/*
@@ -910,7 +993,8 @@
 	/* Hardware Flow Control Configuration */
 
 	if (termios->c_cflag & CRTSCTS) {
-		efr |= (UART_EFR_CTS | UART_EFR_RTS);
+		efr |= ((up->ctsrts & UART_EFR_CTS) |
+				(up->restore_autorts ? 0 : UART_EFR_RTS));
 		serial_out(up, UART_LCR, UART_LCR_DLAB);
 
 		up->mcr = serial_in(up, UART_MCR);
@@ -1200,9 +1284,53 @@
 {
 	struct uart_omap_port *up = platform_get_drvdata(pdev);
 	struct omap_uart_port_info *omap_up_info = pdev->dev.platform_data;
+	static unsigned int fifo_suspendbrks;
+	u8 lcr, efr;
 
 	/* Reset the uart wakeup event */
 	omap_up_info->uart_wakeup_event = 0;
+	/* Disable interrupts from this port */
+	serial_out(up, UART_IER, 0);
+
+	/* If we're using auto-rts then disable it. */
+	lcr = serial_in(up, UART_LCR);
+	serial_out(up, UART_LCR, 0xbf);
+	efr = serial_in(up, UART_EFR);
+	serial_out(up, UART_LCR, lcr);
+
+	if (efr & UART_EFR_RTS) {
+		serial_omap_set_autorts(up, 0);
+		up->restore_autorts = 1;
+		/*
+		 * Force RTS output to inactive (high) after disable autorts
+		 * mode. This RTS bit might not be restored when enable autorts
+		 * next time, since the RTS output controlled by hardware
+		 * flow control.
+		 */
+		serial_omap_set_mctrl(&up->port, (up->port.mctrl & ~TIOCM_RTS));
+	}
+
+	/*
+	 * There seems to be a window here where
+	 * data could still be on the way to the
+	 * fifo. This delay is ~1 byte time @ 115.2k
+	 */
+	udelay(80);
+
+	if (omap_uart_active(up->port.line, 0)) {
+		fifo_suspendbrks++;
+		printk(KERN_WARNING "UART%d FIFO break suspend %d\n",
+				up->port.line, fifo_suspendbrks);
+
+		if (up->restore_autorts) {
+			up->restore_autorts = 0;
+			serial_omap_set_autorts(up, 1);
+		}
+		serial_out(up, UART_IER, up->ier);
+		return -EBUSY;
+	}
+
+	serial_out(up, UART_IER, up->ier);
 
 	if (up)
 		uart_suspend_port(&serial_omap_reg, &up->port);
@@ -1439,6 +1567,7 @@
 	up->port.irqflags = omap_up_info->irqflags;
 	up->port.uartclk = omap_up_info->uartclk;
 	up->uart_dma.uart_base = mem->start;
+	up->ctsrts = omap_up_info->ctsrts;
 	up->plat_hold_wakelock = omap_up_info->plat_hold_wakelock;
 	/* Initialise this to zero, would be initialsed
 	 * to the corrcet value at set_stermios.
