Index: android-2.6.35/arch/arm/plat-omap/include/plat/board.h
===================================================================
--- android-2.6.35.orig/arch/arm/plat-omap/include/plat/board.h	2010-12-10 15:11:19.000000000 +0530
+++ android-2.6.35/arch/arm/plat-omap/include/plat/board.h	2010-12-22 14:36:56.692612297 +0530
@@ -38,6 +38,8 @@
 #define OMAP_TAG_FLASH_PART	0x4f81
 #define OMAP_TAG_VERSION_STR	0x4f82
 
+#define SAMSUNG_OMAP4_PWR_GPIO		3
+
 struct omap_clock_config {
 	/* 0 for 12 MHz, 1 for 13 MHz and 2 for 19.2 MHz */
 	u8 system_clock_type;
Index: android-2.6.35/drivers/input/misc/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/input/misc/Kconfig	2010-12-10 15:11:21.000000000 +0530
+++ android-2.6.35/drivers/input/misc/Kconfig	2010-12-22 14:36:03.383239835 +0530
@@ -262,6 +262,16 @@
 	  To compile this driver as a module, choose M here: the module will be
 	  called cm109.
 
+config SAMSUNG_OMAP4_PWRBUTTON
+	tristate "SAMSUNG OMAP4 Power button Driver"
+	depends on ARCH_OMAP4
+	help
+	  Say Y here if you want to enable power key reporting via the
+	  dedicated GPIO of Samsung OMAP4 board.
+
+	  To compile this driver as a module, choose M here. The module will
+	  be called SAMSUNG_OMAP4_PWRBUTTON.
+
 config INPUT_TWL4030_PWRBUTTON
 	tristate "TWL4030 Power button Driver"
 	depends on TWL4030_CORE
Index: android-2.6.35/drivers/input/misc/Makefile
===================================================================
--- android-2.6.35.orig/drivers/input/misc/Makefile	2010-12-10 15:11:21.000000000 +0530
+++ android-2.6.35/drivers/input/misc/Makefile	2010-12-22 14:36:03.383239835 +0530
@@ -20,6 +20,7 @@
 obj-$(CONFIG_HP_SDC_RTC)		+= hp_sdc_rtc.o
 obj-$(CONFIG_INPUT_IXP4XX_BEEPER)	+= ixp4xx-beeper.o
 obj-$(CONFIG_INPUT_KEYCHORD)		+= keychord.o
+obj-$(CONFIG_SAMSUNG_OMAP4_PWRBUTTON)	+= samsung_omap4_pwrbutton.o
 obj-$(CONFIG_INPUT_KEYSPAN_REMOTE)	+= keyspan_remote.o
 obj-$(CONFIG_INPUT_M68K_BEEP)		+= m68kspkr.o
 obj-$(CONFIG_INPUT_MAX8925_ONKEY)	+= max8925_onkey.o
Index: android-2.6.35/drivers/input/misc/samsung_omap4_pwrbutton.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/input/misc/samsung_omap4_pwrbutton.c	2010-12-22 14:36:03.383239835 +0530
@@ -0,0 +1,146 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General
+ * Public License. See the file "COPYING" in the main directory of this
+ * archive for more details.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/input.h>
+#include <linux/jiffies.h>
+#include <plat/gpio.h>
+#include <plat/hardware.h>
+#include <plat/board.h>
+#include <plat/mux.h>
+
+static int __devinit power_key_driver_probe(struct platform_device *plat_dev);
+static irqreturn_t powerkey_press_handler(int irq_num, void * dev);
+
+static irqreturn_t powerkey_press_handler(int irq_num, void * dev)
+{
+	struct input_dev *ip_dev = (struct input_dev *)dev;
+	int key_press_status=0;
+
+	if(!ip_dev){
+		printk("Input Device not allocated\n");
+		return IRQ_HANDLED;
+	}
+
+	key_press_status = gpio_get_value(SAMSUNG_OMAP4_PWR_GPIO);
+
+	if( key_press_status < 0 ){
+		printk("Failed to read GPIO value\n");
+		return IRQ_HANDLED;
+	}
+
+	input_report_key(ip_dev,KEY_POWER,key_press_status);
+	input_sync(ip_dev);
+	printk("Sent KEY_POWER event = %d\n",key_press_status);
+	printk("[PWR-KEY] KEY_POWER event = %d\n",key_press_status);
+	return IRQ_HANDLED;
+}
+
+static int __devinit power_key_driver_probe(struct platform_device *plat_dev)
+{
+	struct input_dev *power_key=NULL;
+	int pwr_key_irq=-1, err=0;
+
+	printk("IN POWER KEY DRIVER PROBE ### \n");
+	pwr_key_irq = platform_get_irq(plat_dev, 0);
+	if (pwr_key_irq <= 0) {
+		printk("failed to map the power key to an IRQ %d\n",pwr_key_irq);
+		err = -ENXIO;
+		return err;
+	}
+
+	power_key = input_allocate_device();
+	if(!power_key) {
+		printk("failed to allocate an input devd %d \n", pwr_key_irq);
+		err = -ENOMEM;
+		return err;
+	}
+
+	err = request_irq(pwr_key_irq, &powerkey_press_handler,
+			IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+			"power_key_driver", power_key);
+	if(err) {
+		printk("failed to request an IRQ handler for num %d\n", pwr_key_irq);
+		goto free_input_dev;
+	}
+
+	/* Let the power key wake the system */
+	enable_irq_wake(pwr_key_irq);
+	printk("\n Power Key Drive:Assigned IRQ num %d SUCCESS \n",pwr_key_irq);
+	printk("\n Power Key Driver:Assigned IRQ num %d SUCCESS \n",pwr_key_irq);
+
+	/* register the input device now */
+	power_key->evbit[0] = BIT_MASK(EV_KEY);
+	power_key->keybit[BIT_WORD(KEY_POWER)] = BIT_MASK(KEY_POWER);
+	power_key->name = "power_key_driver";
+	power_key->phys = "power_key_driver/input0";
+	power_key->dev.parent = &plat_dev->dev;
+	platform_set_drvdata(plat_dev, power_key);
+
+	err = input_register_device(power_key);
+	if (err) {
+		printk("power key couldn't be registered: %d\n", err);
+		goto release_irq_num;
+	}
+
+	return 0;
+
+release_irq_num:
+	free_irq(pwr_key_irq,NULL); //pass devID as NULL as device registration failed
+
+free_input_dev:
+	input_free_device(power_key);
+
+	return err;
+}
+
+static int __devexit power_key_driver_remove(struct platform_device *plat_dev)
+{
+	struct input_dev *ip_dev = platform_get_drvdata(plat_dev);
+	int pwr_key_irq = 0;
+
+	pwr_key_irq = platform_get_irq(plat_dev, 0);
+	free_irq(pwr_key_irq, ip_dev);
+	input_unregister_device(ip_dev);
+	return 0;
+}
+
+struct platform_driver power_key_driver_t = {
+	.probe		= &power_key_driver_probe,
+	.remove		= __devexit_p(power_key_driver_remove),
+	.driver		= {
+		.name	= "samsung_omap4_pwr_key",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init power_key_driver_init(void)
+{
+	printk("Registered POWER KEy Driver ####\n\n");
+	return platform_driver_register(&power_key_driver_t);
+}
+module_init(power_key_driver_init);
+
+static void __exit power_key_driver_exit(void)
+{
+	platform_driver_unregister(&power_key_driver_t);
+}
+module_exit(power_key_driver_exit);
+
+MODULE_ALIAS("platform:power key driver");
+MODULE_DESCRIPTION("Samsung OMAP4 power key driver");
+MODULE_LICENSE("GPL");
+
Index: android-2.6.35/drivers/misc/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/misc/Kconfig	2010-12-10 15:11:21.000000000 +0530
+++ android-2.6.35/drivers/misc/Kconfig	2010-12-22 14:36:54.432612947 +0530
@@ -315,6 +315,13 @@
 	  This driver can also be built as a module.  If so, the module
 	  will be called tsl2550.
 
+config TWL6030_POWER_OFF
+	tristate "TWL6030 Power Off"
+	depends on I2C && ARCH_OMAP4
+	help
+	  Say yes here to get the support of turning off or shutting down
+	  the TWL6030 PMIC chip.
+
 config SENSORS_BH1780
 	tristate "ROHM BH1780GLI ambient light sensor"
 	depends on I2C && SYSFS
Index: android-2.6.35/drivers/misc/Makefile
===================================================================
--- android-2.6.35.orig/drivers/misc/Makefile	2010-12-10 15:11:21.000000000 +0530
+++ android-2.6.35/drivers/misc/Makefile	2010-12-22 14:36:54.412612489 +0530
@@ -39,4 +39,5 @@
 obj-$(CONFIG_WL127X_RFKILL)	+= wl127x-rfkill.o
 obj-$(CONFIG_APANIC)		+= apanic.o
 obj-$(CONFIG_SENSORS_AK8975)	+= akm8975.o
+obj-$(CONFIG_TWL6030_POWER_OFF) += twl6030-pwroff.o
 obj-$(CONFIG_TWL6040_VIB)	+= twl6040-vib.o
Index: android-2.6.35/drivers/misc/twl6030-pwroff.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/misc/twl6030-pwroff.c	2010-12-22 14:36:03.383239835 +0530
@@ -0,0 +1,49 @@
+#include <linux/module.h>
+#include <linux/pm.h>
+#include <linux/i2c/twl.h>
+#include <linux/reboot.h>
+
+#include <plat/gpio.h>
+#include <plat/mux.h>
+
+#define PHOENIX_DEV_ON		0x06
+#define DEV_OFF			0x07
+
+static void twl6030_power_off(void)
+{
+	u8 val = 0;
+	int err = 0, i = 0;
+
+	val = DEV_OFF;
+	err = twl_i2c_write_u8(TWL_MODULE_PM_MASTER, val, PHOENIX_DEV_ON);
+	if(err){
+		printk(KERN_ERR"\n Error while trying to write PHOENIX_DEV_ON register,err=%d\n",err);
+		return;
+	}
+}
+
+static void samsung_omap4_power_off(void)
+{
+	printk(KERN_ERR"\n Device Going to POWER OFF \n");
+	twl6030_power_off();
+	return;
+}
+
+static int __init twl6030_power_off_init(void)
+{
+	pm_power_off = &samsung_omap4_power_off;
+	return 0;
+}
+module_init(twl6030_power_off_init);
+
+static void __exit twl6030_power_off_exit(void)
+{
+	pm_power_off = NULL;
+}
+module_exit(twl6030_power_off_exit);
+
+MODULE_ALIAS("TWL6030 POWER OFF");
+MODULE_DESCRIPTION("PHOENIX DEVICE SHUT DOWN");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("SRINIDHI RAO srinidhi.rao@samsung.com");
+
Index: android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:03.121988711 +0530
+++ android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:56.133862522 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35
-# Fri Oct  8 18:25:01 2010
+# Thu Oct 14 16:48:29 2010
 #
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
@@ -287,6 +287,7 @@
 CONFIG_SAMSUNG_OMAP4_TAB_REV=2
 # CONFIG_MACH_OMAP4_PANDA is not set
 # CONFIG_ERRATA_OMAP4_AXI2OCP is not set
+# CONFIG_ENABLE_L3_ERRORS is not set
 
 #
 # Processor Type
@@ -327,6 +328,7 @@
 CONFIG_ARM_ERRATA_720789=y
 CONFIG_ARM_GIC=y
 CONFIG_COMMON_CLKDEV=y
+# CONFIG_FIQ_DEBUGGER is not set
 
 #
 # Bus support
@@ -773,6 +775,7 @@
 CONFIG_KERNEL_DEBUGGER_CORE=y
 # CONFIG_ISL29003 is not set
 # CONFIG_SENSORS_TSL2550 is not set
+CONFIG_TWL6030_POWER_OFF=y
 # CONFIG_SENSORS_BH1780 is not set
 # CONFIG_SENSORS_AK8975 is not set
 CONFIG_TWL6040_VIB=y
@@ -955,6 +958,7 @@
 # CONFIG_INPUT_POWERMATE is not set
 # CONFIG_INPUT_YEALINK is not set
 # CONFIG_INPUT_CM109 is not set
+CONFIG_SAMSUNG_OMAP4_PWRBUTTON=y
 # CONFIG_INPUT_TWL4030_PWRBUTTON is not set
 # CONFIG_INPUT_TWL4030_VIBRA is not set
 # CONFIG_INPUT_TWL6040_VIBRA is not set
@@ -1700,6 +1704,7 @@
 # CONFIG_USB_GPIO_VBUS is not set
 # CONFIG_USB_ULPI is not set
 # CONFIG_TWL4030_USB is not set
+# CONFIG_TWL6030_USB is not set
 CONFIG_NOP_USB_XCEIV=y
 CONFIG_MMC=y
 # CONFIG_MMC_DEBUG is not set
@@ -1926,6 +1931,7 @@
 CONFIG_SYSLINK_USE_SYSMGR=y
 CONFIG_SYSLINK_IOMMU_ENABLE=y
 CONFIG_SYSLINK_RECOVERY=y
+# CONFIG_DMM_DMA_API is not set
 
 #
 # File systems
@@ -2136,6 +2142,7 @@
 # CONFIG_LOCK_STAT is not set
 # CONFIG_DEBUG_SPINLOCK_SLEEP is not set
 # CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set
+CONFIG_STACKTRACE=y
 # CONFIG_DEBUG_KOBJECT is not set
 # CONFIG_DEBUG_HIGHMEM is not set
 # CONFIG_DEBUG_BUGVERBOSE is not set
Index: android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- android-2.6.35.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:03.121988711 +0530
+++ android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:56.682612790 +0530
@@ -216,11 +216,39 @@
 	.dev.platform_data = &gpios,
 };
 
+static struct resource samsung_omap4_pwr_key_rsc = {
+	.start	= 0,
+	.end	= 0,
+	.flags	= IORESOURCE_IRQ|IORESOURCE_IRQ_LOWLEVEL,
+};
+
+static struct platform_device samsung_omap4_pwr_device = {
+	.name		= "samsung_omap4_pwr_key",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= &samsung_omap4_pwr_key_rsc,
+};
+
+static inline void __init samsung_omap4_pwr_key_irq_init(void)
+{
+	/*TODO: Do a gpio_to_irq() and gpio_request() followed by gpio_direction_input() */
+	samsung_omap4_pwr_key_rsc.start = gpio_to_irq(SAMSUNG_OMAP4_PWR_GPIO);
+	printk(KERN_ERR "Got GPIO to IRQ number %d\n", samsung_omap4_pwr_key_rsc.start);
+	if (gpio_request(SAMSUNG_OMAP4_PWR_GPIO, "pwr_key_irq") < 0) {
+		printk("\n Failed to request SAMSUNG_OMAP4_PWR_GPIO %d\n", SAMSUNG_OMAP4_PWR_GPIO);
+		samsung_omap4_pwr_key_rsc.start = 0;
+		return;
+	}
+	gpio_direction_input(SAMSUNG_OMAP4_PWR_GPIO);
+	printk("Configured SAMSUNG_OMAP4_PWR_GPIO\n");
+}
+
 static struct platform_device *omap4tab_devices[] __initdata = {
 	&wl128x_device,
 	&omap4tab_hdmi_audio_device,
 	&omap4tab_vib,
 	&omap4tab_keypad_led,
+	&samsung_omap4_pwr_device,
 };
 
 static void __init omap4_tab_10_1_init_irq(void)
@@ -768,6 +796,8 @@
 	gpio_request(100, "TOUCH ENable GPIO");
 	gpio_direction_output(100, 1);
 	msleep(10);
+
+	samsung_omap4_pwr_key_irq_init();
 }
 
 static void __init omap4_tab_10_1_map_io(void)
