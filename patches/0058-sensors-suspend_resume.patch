Index: android-2.6.35_10.1/drivers/sensors/optical/gp2a.c
===================================================================
--- android-2.6.35_10.1.orig/drivers/sensors/optical/gp2a.c	2010-12-30 11:54:20.097462793 +0530
+++ android-2.6.35_10.1/drivers/sensors/optical/gp2a.c	2010-12-30 12:11:56.268081071 +0530
@@ -1,5 +1,6 @@
 #include<asm/uaccess.h>
 #include<asm/mach-types.h>
+#include<asm/atomic.h>
 #include<linux/module.h>
 #include<linux/init.h>
 #include<linux/input.h>
@@ -10,7 +11,7 @@
 #include <linux/slab.h>
 #include<linux/gpio.h>
 #include <linux/i2c/twl6030-gpadc.h>
-
+#include<linux/earlysuspend.h>
 #define MODULE_NAME "gp2a"
 
 #if 0
@@ -52,6 +53,7 @@
 struct i2c_client *client;
 struct input_dev *inputdev;
 struct mutex lock;
+struct early_suspend gp2a_early_suspend;
 };
 
 static struct twl6030_gpadc_request conv_request = {
@@ -76,7 +78,7 @@
 
 int gp2a_timeout = -1;
 static int gp2a_initialize_register(u8 mode);
-
+static atomic_t is_true_suspend =ATOMIC_INIT(0);
 // GP2A has different i2c_read.
 // The register address and the buffer (in which data is to be read)
 // must go in one single "i2c_transfer"
@@ -102,29 +104,6 @@
 	if(count !=1)
 		ret= -1;
 	return ret;
-#if 0
-	int ret;
-	char outbuffer[2] = { 0, 0 };
-
-	outbuffer[0] = reg;
-
-	ret = i2c_master_send(gp2a_client, outbuffer, 1);
-	if (ret < 0) {
-		printk(KERN_WARNING "%s: error asking for gsensor data at "
-			"address %02x,%02x: %d\n",
-			__func__, gp2a_client->addr, reg, ret);
-		return ret;
-	}
-
-	mdelay(1);
-
-	ret = i2c_master_recv(gp2a_client, rdata, length);
-	if (ret < 0) {
-		printk(KERN_ERR "%s: error reading gsensor data at ""address %02x,%02x: %d\n", __func__, gp2a_client->addr, reg, ret);
-		return ret;
-	}
-	return 0;
-#endif
 }
 
 
@@ -143,15 +122,16 @@
 	msg[0].buf=data;
 
 	count = i2c_transfer(gp2a_client->adapter, msg, 1);
-	if(count !=1)
-	{
+	if(count !=1){
 		ret = -1;
 	}
-
 	return ret;
 }
 
 
+
+
+
 static int gp2a_get_lux_value(u8 *lux_value)
 {
 #ifdef GP2A_DEBUG
@@ -162,8 +142,7 @@
 	unsigned int als_out;
 	
 	ret = gp2a_i2c_read(REG_PROX,lux_value);
-	if(ret <0)
-	{
+	if(ret <0){
 		printk("gp2a_i2c_read failed !!\n");
 	}
 
@@ -204,13 +183,14 @@
 				printk("Error in gp2a_set_operation_mode: REG_OPMOD \n");
 			}
 			#endif
-			if((ret = gp2a_initialize_register(NORMAL_MODE))<0)
-			{
+			if(gp2a_dev<0){
+				printk(KERN_ERR "Error in GP2A device");
+				}
+			if((ret = gp2a_initialize_register(NORMAL_MODE))<0){
 				ret = -EFAULT;
 				printk("Error in gp2a_register_initialization\n");
 			}
-			if(gp2a_timeout < 0)
-			{
+			if(gp2a_timeout < 0){
 				gp2a_timeout=msecs_to_jiffies(200);
 			}
 		
@@ -257,15 +237,13 @@
 		case NORMAL_MODE:
 		{
 			printk("Light[GP2A] Initializing Registers in Normal-Mode\n");
-			if((ret = gp2a_i2c_write(REG_GAIN,0x08))<0)
-			{
+			if((ret = gp2a_i2c_write(REG_GAIN,0x08))<0){
 				printk("Error in gp2a_initialize_register: REG_GAIN \n");
 				return ret;
 			}
 			#ifdef GP2A_DEBUG
 			msleep(10);
-			if((ret=gp2a_i2c_read(REG_GAIN,&return_reg_value))<0)
-			{
+			if((ret=gp2a_i2c_read(REG_GAIN,&return_reg_value))<0) {
 				printk("Error in gp2a_initiaize_register:gp2a_i2c_read:REG_GAIN\n");
 				return ret;
 			}
@@ -311,7 +289,6 @@
 	}
 }
 
-
 static int gp2a_ioctl(struct inode *inode, struct file *filp, unsigned int ioctl_cmd, unsigned long arg )
 {
 	int ret =0;
@@ -369,6 +346,7 @@
 
 		case GP2A_LIGHT_IOC_GET_OPERATION_MODE:
 		{
+			
 			return 0;
 			//TODO
 		}
@@ -427,6 +405,50 @@
 	//.release = gp2a_release,
 };
 
+#ifdef CONFIG_PM
+static int gp2a_suspend(struct i2c_client * client, pm_message_t mesg)
+{
+        int ret =-1;
+	 gp2a_timeout=-1;
+	atomic_set(&is_true_suspend ,1);
+        printk(KERN_ERR MODULE_NAME ": suspending device...\n");
+        flush_workqueue(gp2a_work_q);
+        cancel_delayed_work(&gp2a_delayed_work_q);
+        if((ret = gp2a_i2c_write(REG_OPMOD,0x00))<0) //Software-Shutdown Enabled.
+
+                        {
+                        ret=-EFAULT;
+                        printk("Error in gp2a_set_operation_mode: REG_OPMOD \n");
+                        }
+
+        return 0;
+}
+
+static int gp2a_resume(struct i2c_client * client)
+{
+        int ret =-1;
+        #ifdef GP2A_DEBUG
+        #endif
+	if(atomic_read(&is_true_suspend)){
+	        printk(KERN_INFO MODULE_NAME ": resuming device...\n");
+        	if((ret = gp2a_initialize_register(NORMAL_MODE))<0){
+                                ret = -EFAULT;
+                                printk("Error in gp2a_register_initialization\n");
+                        }
+       		if(gp2a_timeout < 0){
+                                gp2a_timeout=msecs_to_jiffies(200);
+                        }
+       		queue_delayed_work(gp2a_work_q, &gp2a_delayed_work_q, gp2a_timeout);
+	}
+	
+        return 0;
+}
+#else
+#define gp2a_suspend NULL
+#define gp2a_resume NULL
+
+#endif
+
 
 static int gp2a_probe(struct i2c_client *client,const struct i2c_device_id *id )
 {
@@ -451,7 +473,6 @@
 	i2c_set_clientdata(client, gp2a_dev);
 	gp2a_client = client;
 	
-	
 	printk(KERN_INFO MODULE_NAME"Registering [GP2A_LIGHT] Light-Driver at address:%d",gp2a_client->addr);
 	printk("--------%s %d\n",__func__,__LINE__);
 	
@@ -523,6 +544,11 @@
                 printk(KERN_ERR "failed to get GP2A Power on GPIO\n");
                 return -EFAULT;
         }
+	
+	gp2a_dev->gp2a_early_suspend.suspend = gp2a_suspend;
+        gp2a_dev->gp2a_early_suspend.resume = gp2a_resume;
+        register_early_suspend(&gp2a_dev->gp2a_early_suspend);
+
 
 	#ifdef GP2A_DEBUG
 	// Initializing the device;
@@ -549,34 +575,13 @@
 static int  gp2a_remove(struct i2c_client *client)
 {
 	struct gp2a_dev *gp2a = i2c_get_clientdata(client);
-
+	unregister_early_suspend(&gp2a_dev->gp2a_early_suspend);
 	input_unregister_device(gp2a->inputdev);
 	input_free_device(gp2a->inputdev);
 	kfree(gp2a);
 
 	return 0;
 }
-#if CONFIG_PM
-static int gp2a_suspend(struct i2c_client * client, pm_message_t mesg)
-{
-	#ifdef GP2A_DEBUG
-	printk(KERN_INFO MODULE_NAME ": suspending device...\n");
-	#endif
-	return 0;
-}
-
-static int gp2a_resume(struct i2c_client * client)
-{
-	#ifdef GP2A_DEBUG
-	printk(KERN_INFO MODULE_NAME ": resuming device...\n");
-	#endif
-	return 0;
-}
-#else
-#define gp2a_suspend NULL
-#define gp2a_resume NULL
-
-#endif
 
 static const struct i2c_device_id gp2a_ids[] = {	
         { MODULE_NAME, 0 },
@@ -593,9 +598,9 @@
 	.id_table = gp2a_ids,
 	.probe = gp2a_probe,
 	.remove = gp2a_remove,
-#if CONFIG_PM
-	.suspend = gp2a_suspend,
-	.resume = gp2a_resume,
+#ifdef CONFIG_PM
+//	.suspend = gp2a_suspend,
+//	.resume = gp2a_resume,
 #endif
 };
 
Index: android-2.6.35_10.1/drivers/sensors/gyro-mpu3050/mpu3050.h
===================================================================
--- android-2.6.35_10.1.orig/drivers/sensors/gyro-mpu3050/mpu3050.h	2010-12-30 11:54:20.097462793 +0530
+++ android-2.6.35_10.1/drivers/sensors/gyro-mpu3050/mpu3050.h	2010-12-30 12:11:56.268081071 +0530
@@ -4,7 +4,7 @@
 #if 0
 #define MPU3050_DEBUG	1
 #endif
-
+#include<linux/earlysuspend.h>
 /*Debug Related Macros */
 #define error(fmt,arg...) printk(fmt "\n",## arg)
 
@@ -70,6 +70,7 @@
 struct input_dev *inputdev;
 struct mutex lock;
 struct mpu3050_dev_state state;
+struct early_suspend mpu3050_early_suspend;
 };
 
 // MPU-3050 details
Index: android-2.6.35_10.1/drivers/sensors/gyro-mpu3050/mpu3050.c
===================================================================
--- android-2.6.35_10.1.orig/drivers/sensors/gyro-mpu3050/mpu3050.c	2010-12-30 11:54:20.097462793 +0530
+++ android-2.6.35_10.1/drivers/sensors/gyro-mpu3050/mpu3050.c	2010-12-30 12:11:56.268081071 +0530
@@ -23,7 +23,7 @@
 static struct delayed_work mpu3050_delayed_work_q;
 
 int mpu3050_timeout = -1;
-
+static atomic_t is_true_suspend =ATOMIC_INIT(0);
 int mpu3050_i2c_read( u8 reg, u8 *rdata , int length) //Read from register "reg", in buffer "rdata","length" number of bytes
 {
 	int count =0;
@@ -37,48 +37,21 @@
 
 	count = i2c_transfer(mpu3050_client->adapter, msg, 1);
 	
-	if(count==1)
-	{
-		msg[0].addr=mpu3050_client->addr;
+	if(count==1){
+	        msg[0].addr=mpu3050_client->addr;
 		msg[0].flags=I2C_M_RD;
 		msg[0].len=length;
 		msg[0].buf=rdata;
 		count = i2c_transfer(mpu3050_client->adapter, msg, 1);
-
-		if(count != 1)
-		{
+		if(count != 1){
 			ret = -1;
 		}
 	}
-	else
-	{
+	else{
 		ret=-1;
 	}
 
 	return ret;
-#if 0
-	int ret;
-	char outbuffer[2] = { 0, 0 };
-
-	outbuffer[0] = reg;
-
-	ret = i2c_master_send(mpu3050_client, outbuffer, 1);
-	if (ret < 0) {
-		printk(KERN_WARNING "%s: error asking for gsensor data at "
-			"address %02x,%02x: %d\n",
-			__func__, mpu3050_client->addr, reg, ret);
-		return ret;
-	}
-
-	mdelay(1);
-
-	ret = i2c_master_recv(mpu3050_client, rdata, length);
-	if (ret < 0) {
-		printk(KERN_ERR "%s: error reading gsensor data at ""address %02x,%02x: %d\n", __func__, mpu3050_client->addr, reg, ret);
-		return ret;
-	}
-	return 0;
-#endif
 }
 	
 int mpu3050_i2c_write(u8 reg, u8 value)
@@ -334,7 +307,7 @@
 
 			else
 			{
-				mpu3050_timeout = msecs_to_jiffies(delay);
+				mpu3050_timeout = msecs_to_jiffies(50+delay);
 				printk("mpu3050 polling delay=%d\n", mpu3050_timeout);
 			}
 
@@ -361,6 +334,54 @@
 	.release = mpu3050_release,
 };
 
+#if CONFIG_PM
+static int mpu3050_suspend(struct i2c_client * client, pm_message_t mesg)
+{
+        #ifdef MPU3050_DEBUG
+        printk(KERN_INFO MODULE_NAME ": suspending device...\n");
+        #endif
+	  int ret =-1;
+	mpu3050_timeout =-1;
+        atomic_set(&is_true_suspend,1);
+        printk(KERN_ERR MODULE_NAME ": suspending device...\n");
+        flush_workqueue(mpu3050_work_q);
+        cancel_delayed_work(&mpu3050_delayed_work_q);
+	 if((ret = mpu3050_i2c_write( MPU3050_PWR_MGMNT, GYRO_MODE_STANDBY )) < 0){
+                        ret = -EFAULT;
+                        printk("Error in Suspending Gyro Device:GYRO_MODE_STANDBY\n");
+                }
+
+        return 0;
+
+}
+
+static int mpu3050_resume(struct i2c_client * client)
+{
+	int ret=-1;
+        #ifdef MPU3050_DEBUG
+        printk(KERN_INFO MODULE_NAME ": resuming device...\n");
+        #endif
+	 if(atomic_read(&is_true_suspend)){
+                printk(KERN_INFO MODULE_NAME ": resuming device...\n");
+                if((ret = mpu3050_set_operation_mode(GYRO_POWER_ON))<0){
+                                ret = -EFAULT;
+                                printk("MPU3050:resuming :Error in Resuming Gyro Device\n");
+                        }
+                if(mpu3050_timeout < 0){
+                                mpu3050_timeout=msecs_to_jiffies(200);
+                        }
+                queue_delayed_work(mpu3050_work_q, &mpu3050_delayed_work_q, mpu3050_timeout);
+        }
+        return 0;
+}
+#else
+
+#define mpu3050_suspend NULL
+#define mpu3050_resume NULL
+
+#endif
+                                               
+
 static int mpu3050_probe(struct i2c_client *client,const struct i2c_device_id *id )
 {
 	int ret = 0;
@@ -383,7 +404,6 @@
 	mpu3050_dev->client = client;
 	i2c_set_clientdata(client, mpu3050_dev);
 	mpu3050_client = client;
-	
 	#ifdef MPU3050_DEBUG
 		printk(KERN_INFO MODULE_NAME"Registering [MPU-3050] Gyro-Driver at address:%d",mpu3050_client->addr);
 		printk("--------%s %d\n",__func__,__LINE__);
@@ -446,6 +466,9 @@
 	mpu3050_work_q = create_singlethread_workqueue("gyro_sensor_mpu3050_work_queue");
 	INIT_DELAYED_WORK( (struct delayed_work *)&mpu3050_delayed_work_q, mpu3050_work);
 
+	mpu3050_dev->mpu3050_early_suspend.suspend = mpu3050_suspend;
+        mpu3050_dev->mpu3050_early_suspend.resume = mpu3050_resume;
+        register_early_suspend(&mpu3050_dev->mpu3050_early_suspend);
 
 	#ifdef MPU3050_DEBUG
 	// Initializing the device;
@@ -467,7 +490,7 @@
 static int  mpu3050_remove(struct i2c_client *client)
 {
 	struct mpu3050_dev *mpu3050 = i2c_get_clientdata(client);
-
+	 unregister_early_suspend(&mpu3050_dev->mpu3050_early_suspend);
 	input_unregister_device(mpu3050->inputdev);
 	input_free_device(mpu3050->inputdev);
 	kfree(mpu3050);
@@ -475,28 +498,6 @@
 	return 0;
 }
 
-#if CONFIG_PM
-static int mpu3050_suspend(struct i2c_client * client, pm_message_t mesg)
-{
-	#ifdef MPU3050_DEBUG
-	printk(KERN_INFO MODULE_NAME ": suspending device...\n");
-	#endif
-	return 0;
-}
-
-static int mpu3050_resume(struct i2c_client * client)
-{
-	#ifdef MPU3050_DEBUG
-	printk(KERN_INFO MODULE_NAME ": resuming device...\n");
-	#endif
-	return 0;
-}
-#else
-
-#define mpu3050_suspend NULL
-#define mpu3050_resume NULL
-
-#endif
 
 static const struct i2c_device_id mpu3050_ids[] = {	
         { MODULE_NAME, 0 },
@@ -513,8 +514,8 @@
 	.probe = mpu3050_probe,
 	.remove = mpu3050_remove,
 #if CONFIG_PM
-	.suspend = mpu3050_suspend,
-	.resume = mpu3050_resume,
+//	.suspend = mpu3050_suspend,
+//	.resume = mpu3050_resume,
 #endif
 };
 
