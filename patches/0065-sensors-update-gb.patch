Index: android-2.6.35/drivers/sensors/accel/kxsd9.c
===================================================================
--- android-2.6.35.orig/drivers/sensors/accel/kxsd9.c	2010-12-24 21:16:16.381037795 +0530
+++ android-2.6.35/drivers/sensors/accel/kxsd9.c	2010-12-29 12:26:04.734916324 +0530
@@ -63,6 +63,11 @@
 
 static struct input_dev *kxsd9_input_dev;
 
+int kxsd9_timeout = -1;
+
+static struct workqueue_struct *kxsd9_work_q;
+static struct delayed_work kxsd9_delayed_work_q;
+
 int kxsd9_enable(struct kxsd9 *kxsd9,int on)
 {
 	if (!kxsd9->seq && !kxsd9->on) {
@@ -168,7 +173,7 @@
 static int kxsd9_remove(struct i2c_client * client)
 {
 	struct kxsd9 *kxsd9 = i2c_get_clientdata(client);
-
+	unregister_early_suspend(&kxsd9->kxsd9_early_suspend);
 	input_unregister_device(kxsd9->inputdev);
 	input_free_device(kxsd9->inputdev);
 
@@ -186,6 +191,9 @@
 #if KXSD9_DEBUG
 	printk(KERN_INFO MODULE_NAME ": suspending device...\n");
 #endif
+	kxsd9_timeout =-1;
+	flush_workqueue(kxsd9_work_q);
+        cancel_delayed_work(&kxsd9_delayed_work_q);
 	return 0;
 }
 
@@ -194,6 +202,10 @@
 #if KXSD9_DEBUG
 	printk(KERN_INFO MODULE_NAME ": resuming device...\n");
 #endif
+	if(kxsd9_timeout < 0){
+			kxsd9_timeout=msecs_to_jiffies(200);
+			}
+	queue_delayed_work(kxsd9_work_q, &kxsd9_delayed_work_q, kxsd9_timeout);
 	return 0;
 }
 #else
@@ -222,6 +234,184 @@
 	return 0;
 }
 
+void kxsd9_set_operation_mode(u8 mode)
+{
+
+	switch(mode)
+	{
+		//POWER_UP
+		case 1 : 
+		{	
+			printk("KXSD9 Power-up\n");
+			if(kxsd9_timeout < 0)
+			{
+				kxsd9_timeout=msecs_to_jiffies(200);
+			}
+		
+			queue_delayed_work(kxsd9_work_q, &kxsd9_delayed_work_q, kxsd9_timeout);
+			break;
+		}
+
+		//POWER_DOWN
+		case 0 :
+		{
+			printk("KXSD( Power-down\n");
+			kxsd9_timeout=-1;
+			flush_workqueue(kxsd9_work_q);
+			break;
+		}
+
+	}
+
+}
+
+static int kxsd9_work(void)
+{
+	u8 lux_value;
+	int ret =0;
+
+	kxsd9acc_t data;
+	ret = kxsd9_read_accel_xyz(kxsd9 , &data);
+
+	if(ret < 0)
+	{
+		printk("kxsd9_read_accel_xyz FAILED\n");
+		return (-1);
+	}
+
+#if KXSD9_DEBUG
+	printk("KXSD9 : kxsd9_work called!! X=%d Y=%d Z=%d\n", data.x, data.y, data.z);
+#endif
+
+	input_report_abs(kxsd9_input_dev, ABS_X, data.y/16 );
+	input_report_abs(kxsd9_input_dev, ABS_Y, data.x/16 );
+	input_report_abs(kxsd9_input_dev, ABS_Z, data.z/16 );
+
+	input_sync(kxsd9_input_dev);
+
+	if(kxsd9_timeout > -1)
+	{
+		#if KXSD9_DEBUG
+		printk("KXSD9 : queuing next at delay= %u\n", kxsd9_timeout);
+		#endif
+		queue_delayed_work(kxsd9_work_q, &kxsd9_delayed_work_q, kxsd9_timeout);
+	}
+
+	return 0;
+}
+
+
+/**************************sysfs-interface**************************/
+
+static ssize_t poll_delay_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int64_t delay_to_report;
+	
+	if (kxsd9_timeout<0)
+	{
+		delay_to_report = -1 ;
+	}
+	else
+	{
+		delay_to_report = (int64_t)jiffies_to_msecs(kxsd9_timeout);
+	}
+
+#if KXSD9_DEBUG
+	printk("delay_to_report=%lld\n", delay_to_report );
+#endif
+	return snprintf(buf, PAGE_SIZE, "%lld\n", delay_to_report);
+}
+
+
+static ssize_t poll_delay_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	int err;
+	int64_t new_delay;
+
+#if KXSD9_DEBUG
+	printk("buf=%s\n", buf);
+	printk("size=%u\n", size);
+#endif
+
+	err = strict_strtoll(buf, 10, &new_delay);
+	if ( err < 0 )
+		return err;
+
+	kxsd9_timeout = msecs_to_jiffies(200);
+
+
+#ifdef KXSD9_DEBUG
+	printk("poll_delay_store called. new_delay=%lld\n", new_delay);
+	printk("poll_delay_store called. kxsd9_timeout=%d\n", kxsd9_timeout);
+#endif
+	return size;
+}
+
+
+static ssize_t accel_enable_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+#ifdef KXSD9_DEBUG
+	printk("enabled=%d\n", ((kxsd9_timeout < 0) ? 0 : 1) );
+#endif
+	return snprintf(buf, PAGE_SIZE, "%d\n", ((kxsd9_timeout < 0) ? 0 : 1) );
+}
+
+
+static ssize_t accel_enable_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	bool new_value;
+	int ret = 0;
+
+	if (sysfs_streq(buf, "1"))
+		new_value = true;
+	else if (sysfs_streq(buf, "0"))
+		new_value = false;
+	else {
+		pr_err("%s: invalid value %d\n", __func__, *buf);
+		return -EINVAL;
+	}
+
+#if KXSD9_DEBUG
+	printk("new_value = %d, old state = %d\n", new_value, ((kxsd9_timeout < 0) ? 0 : 1) );
+#endif
+
+	if (new_value && (kxsd9_timeout < 0) ) {
+		kxsd9_set_operation_mode(1);
+
+	} else if (!new_value && (kxsd9_timeout > -1) ) {
+		kxsd9_set_operation_mode(0);
+	}
+
+	(ret < 0) ? NULL : (ret = size) ;
+
+	return ret;
+}
+
+
+static struct device_attribute dev_attr_poll_delay =
+	__ATTR(poll_delay, S_IRUGO | S_IWUGO | S_IXUGO,
+	       poll_delay_show, poll_delay_store);
+
+static struct device_attribute dev_attr_accel_enable =
+	__ATTR(enable, S_IRUGO | S_IWUGO | S_IXUGO,
+	       accel_enable_show, accel_enable_store);
+
+
+static struct attribute *accel_sysfs_attrs[] = {
+	&dev_attr_accel_enable.attr,
+	&dev_attr_poll_delay.attr,
+	NULL
+};
+
+static struct attribute_group accel_attribute_group = {
+	.attrs = accel_sysfs_attrs,
+};
+
+
+
+/*****************************************************************/
+
+
 int kxsd9_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,  unsigned long arg)
 {
 	int err = 0;
@@ -379,6 +569,19 @@
     		goto release_input_dev;
   	}
 
+	result = sysfs_create_group(&kxsd9_input_dev->dev.kobj, &accel_attribute_group);
+	if (result) {
+		pr_err("%s: could not create sysfs group\n", __func__);
+		goto release_input_dev;
+	}
+
+	kxsd9->kxsd9_early_suspend.suspend = kxsd9_suspend;
+        kxsd9->kxsd9_early_suspend.resume = kxsd9_resume;
+        register_early_suspend(&kxsd9->kxsd9_early_suspend);
+
+	//Workqueue Initialisation
+	kxsd9_work_q = create_singlethread_workqueue("accel_sensor_kxsd9_work_queue");
+	INIT_DELAYED_WORK( (struct delayed_work *)&kxsd9_delayed_work_q, kxsd9_work);
         //kxsd9_read_accel_xyz(kxsd9, &accels );
 
 	return 0;
Index: android-2.6.35/drivers/sensors/accel/kxsd9.h
===================================================================
--- android-2.6.35.orig/drivers/sensors/accel/kxsd9.h	2010-12-24 21:16:16.381037795 +0530
+++ android-2.6.35/drivers/sensors/accel/kxsd9.h	2010-12-29 12:26:04.734916324 +0530
@@ -55,6 +55,7 @@
 
 	int pedo_up,pedo_lim;
 	unsigned short pedo_count;
+	struct early_suspend kxsd9_early_suspend;
 };
 
 typedef struct  {
@@ -95,7 +96,7 @@
 	KXSD9_WR_FUNC_PTR;		  	/**< function pointer to the SPI/I2C write function */
 	KXSD9_RD_FUNC_PTR;		  	/**< function pointer to the SPI/I2C read function */
 	void (*delay_msec)( MDELAY_DATA_TYPE ); /**< function pointer to a pause in mili seconds function */
-	struct early_suspend early_suspend;	/**< suspend function */
+	//struct early_suspend early_suspend;	/**< suspend function */
 } kxsd9_t;
 
 
Index: android-2.6.35/drivers/sensors/gyro-mpu3050/mpu3050.c
===================================================================
--- android-2.6.35.orig/drivers/sensors/gyro-mpu3050/mpu3050.c	2010-12-24 21:16:42.021037838 +0530
+++ android-2.6.35/drivers/sensors/gyro-mpu3050/mpu3050.c	2010-12-29 12:26:04.734916324 +0530
@@ -323,6 +323,108 @@
 	}
 }
 
+/***********************Sysfs Interface *********************************/
+static ssize_t poll_delay_show( struct device *dev, struct device_attribute *attr, char *buf)
+{
+        int64_t delay_to_report;
+
+        if (mpu3050_timeout<0)
+        {
+                delay_to_report = -1 ;
+        }
+        else
+        {
+                delay_to_report = (int64_t)jiffies_to_msecs(mpu3050_timeout);
+        }
+
+        printk("delay_to_report=%lld\n", delay_to_report );
+
+        return snprintf(buf, PAGE_SIZE, "%lld\n", delay_to_report);
+}
+
+
+static ssize_t poll_delay_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+        int err;
+        int64_t new_delay;
+
+
+        printk("buf=%s\n", buf);
+        printk("size=%u\n", size);
+
+        err = strict_strtoll(buf, 10, &new_delay);
+        if ( err < 0 )
+                return err;
+
+
+#ifdef GP2A_DEBUG
+        printk("poll_delay_store called. new_delay=%lld\n", new_delay);
+        printk("poll_delay_store called.mpu3050_timeout=%d\n", mpu3050_timeout);
+#endif
+        return size;
+}
+static ssize_t gyro_enable_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+        printk("enabled=%d\n", ((mpu3050_timeout < 0) ? 0 : 1) );
+        return snprintf(buf, PAGE_SIZE, "%d\n", ((mpu3050_timeout < 0) ? 0 : 1) );
+}
+
+
+static ssize_t gyro_enable_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+        bool new_value;
+        int ret = 0;
+
+        if (sysfs_streq(buf, "1"))
+                new_value = true;
+        else if (sysfs_streq(buf, "0"))
+                new_value = false;
+        else {
+                pr_err("%s: invalid value %d\n", __func__, *buf);
+                return -EINVAL;
+        }
+
+        printk("new_value = %d, old state = %d\n", new_value, ((mpu3050_timeout < 0) ? 0 : 1) );
+        if (new_value && (mpu3050_timeout < 0) ) {
+
+                ret = mpu3050_set_operation_mode(GYRO_POWER_ON);
+                if (ret < 0) {
+                        printk("GYRO POWER_UP failed!!\n");
+                        ret = -EINVAL;
+                }
+
+        } else if (!new_value && (mpu3050_timeout > -1) ) {
+                ret = mpu3050_set_operation_mode(GYRO_POWER_OFF);
+                if (ret < 0) {
+                        printk("GYRO POWER_DOWN failed!!\n");
+                        ret = -EINVAL;
+                }
+        }
+
+        (ret < 0) ? NULL : (ret = size) ;
+
+        return ret;
+}
+
+
+static struct device_attribute dev_attr_poll_delay =
+        __ATTR(poll_delay, S_IRUGO | S_IWUGO | S_IXUGO,
+               poll_delay_show, poll_delay_store);
+
+static struct device_attribute dev_attr_gyro_enable =
+        __ATTR(enable, S_IRUGO | S_IWUGO | S_IXUGO,
+               gyro_enable_show, gyro_enable_store);
+
+
+static struct attribute *gyro_sysfs_attrs[] = {
+        &dev_attr_gyro_enable.attr,
+        &dev_attr_poll_delay.attr,
+        NULL
+};
+
+static struct attribute_group gyro_attribute_group = {
+        .attrs = gyro_sysfs_attrs,
+};
 
 struct file_operations mpu_fops =
 {
@@ -460,6 +562,11 @@
 		printk("mpu3050 Gyro Sensor couldn't be registered:%d\n",ret);
 		goto release_input_dev;
 	}	
+	 ret = sysfs_create_group(&gyro_input->dev.kobj, &gyro_attribute_group);
+        if (ret) {
+                pr_err("%s: could not create sysfs group\n", __func__);
+                goto release_input_dev;
+        }
 
 
 	//Workqueue Initialisation
Index: android-2.6.35/drivers/sensors/gyro-mpu3050/mpu3050.h
===================================================================
--- android-2.6.35.orig/drivers/sensors/gyro-mpu3050/mpu3050.h	2010-12-24 21:16:42.021037838 +0530
+++ android-2.6.35/drivers/sensors/gyro-mpu3050/mpu3050.h	2010-12-29 12:26:04.734916324 +0530
@@ -4,7 +4,9 @@
 #if 0
 #define MPU3050_DEBUG	1
 #endif
+
 #include<linux/earlysuspend.h>
+
 /*Debug Related Macros */
 #define error(fmt,arg...) printk(fmt "\n",## arg)
 
Index: android-2.6.35/drivers/sensors/optical/gp2a.c
===================================================================
--- android-2.6.35.orig/drivers/sensors/optical/gp2a.c	2010-12-29 12:26:01.424290714 +0530
+++ android-2.6.35/drivers/sensors/optical/gp2a.c	2010-12-29 12:26:04.734916324 +0530
@@ -169,7 +169,7 @@
 
 static int gp2a_set_operation_mode(u8 mode)
 {
-	int ret=-1;
+	int ret = 0;
 
 	switch(mode)
 	{
@@ -230,7 +230,7 @@
 
 static int gp2a_initialize_register(u8 mode)
 {
-	int ret =-1;
+	int ret = 0;
 	u8 return_reg_value=0;
 
 
@@ -283,14 +283,124 @@
 			printk("Light[GP2A] Initializing Registers in Interrupt-Mode\n");
 			return 0;
 		}
+	}
 
-		default:
-		{
-			return ret;
+	return ret;
+}
+
+
+/**************************sysfs-interface**************************/
+
+static ssize_t poll_delay_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int64_t delay_to_report;
+	
+	if (gp2a_timeout<0)
+	{
+		delay_to_report = -1 ;
+	}
+	else
+	{
+		delay_to_report = (int64_t)jiffies_to_msecs(gp2a_timeout);
+	}
+
+	printk("delay_to_report=%lld\n", delay_to_report );
+
+	return snprintf(buf, PAGE_SIZE, "%lld\n", delay_to_report);
+}
+
+
+static ssize_t poll_delay_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	int err;
+	int64_t new_delay;
+
+
+	printk("buf=%s\n", buf);
+	printk("size=%u\n", size);
+
+	err = strict_strtoll(buf, 10, &new_delay);
+	if ( err < 0 )
+		return err;
+
+	gp2a_timeout = msecs_to_jiffies(new_delay);
+
+
+#ifdef GP2A_DEBUG
+	printk("poll_delay_store called. new_delay=%lld\n", new_delay);
+	printk("poll_delay_store called. gp2a_timeout=%d\n", gp2a_timeout);
+#endif
+	return size;
+}
+
+
+static ssize_t light_enable_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	printk("enabled=%d\n", ((gp2a_timeout < 0) ? 0 : 1) );
+	return snprintf(buf, PAGE_SIZE, "%d\n", ((gp2a_timeout < 0) ? 0 : 1) );
+}
+
+
+static ssize_t light_enable_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	bool new_value;
+	int ret = 0;
+
+	if (sysfs_streq(buf, "1"))
+		new_value = true;
+	else if (sysfs_streq(buf, "0"))
+		new_value = false;
+	else {
+		pr_err("%s: invalid value %d\n", __func__, *buf);
+		return -EINVAL;
+	}
+
+	printk("new_value = %d, old state = %d\n", new_value, ((gp2a_timeout < 0) ? 0 : 1) );
+	if (new_value && (gp2a_timeout < 0) ) {
+
+		ret = gp2a_set_operation_mode(POWER_UP);
+		if (ret < 0) {
+			printk("POWER_UP failed!!\n");
+			ret = -EINVAL;
+		}
+
+	} else if (!new_value && (gp2a_timeout > -1) ) {
+		ret = gp2a_set_operation_mode(POWER_DOWN);
+		if (ret < 0) {
+			printk("POWER_DOWN failed!!\n");
+			ret = -EINVAL;
 		}
 	}
+
+	(ret < 0) ? NULL : (ret = size) ;
+
+	return ret;
 }
 
+
+static struct device_attribute dev_attr_poll_delay =
+	__ATTR(poll_delay, S_IRUGO | S_IWUGO | S_IXUGO,
+	       poll_delay_show, poll_delay_store);
+
+static struct device_attribute dev_attr_light_enable =
+	__ATTR(enable, S_IRUGO | S_IWUGO | S_IXUGO,
+	       light_enable_show, light_enable_store);
+
+
+static struct attribute *light_sysfs_attrs[] = {
+	&dev_attr_light_enable.attr,
+	&dev_attr_poll_delay.attr,
+	NULL
+};
+
+static struct attribute_group light_attribute_group = {
+	.attrs = light_sysfs_attrs,
+};
+
+
+/*****************************************************************/
+
+
 static int gp2a_ioctl(struct inode *inode, struct file *filp, unsigned int ioctl_cmd, unsigned long arg )
 {
 	int ret =0;
@@ -484,7 +594,7 @@
 
 	if(result_light <0)
 	{
-		printk(KERN_ERR "Error while registering[GP2A_LIGHT] the char-device\n");
+		printk(KERN_ERR "GP2A: Error while registering[GP2A_LIGHT] the char-device\n");
 		return result_light;
 	}
 
@@ -534,6 +644,11 @@
 		goto release_input_dev;
 	}	
 
+	ret = sysfs_create_group(&light_input->dev.kobj, &light_attribute_group);
+	if (ret) {
+		pr_err("%s: could not create sysfs group\n", __func__);
+		goto release_input_dev;
+	}
 
 	//Workqueue Initialisation
 	gp2a_work_q = create_singlethread_workqueue("light_sensor_gp2a_work_queue");
@@ -578,6 +693,7 @@
 {
 	struct gp2a_dev *gp2a = i2c_get_clientdata(client);
 	unregister_early_suspend(&gp2a_dev->gp2a_early_suspend);
+	sysfs_remove_group(&gp2a->inputdev->dev.kobj, &light_attribute_group);
 	input_unregister_device(gp2a->inputdev);
 	input_free_device(gp2a->inputdev);
 	kfree(gp2a);
@@ -600,10 +716,7 @@
 	.id_table = gp2a_ids,
 	.probe = gp2a_probe,
 	.remove = gp2a_remove,
-#ifdef CONFIG_PM
-//	.suspend = gp2a_suspend,
-//	.resume = gp2a_resume,
-#endif
+
 };
 
 
