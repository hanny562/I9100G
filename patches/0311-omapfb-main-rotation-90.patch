Index: kernel/drivers/video/omap2/omapfb/omapfb-main.c
===================================================================
--- kernel.orig/drivers/video/omap2/omapfb/omapfb-main.c	2011-04-14 14:58:32.700760477 +0530
+++ kernel/drivers/video/omap2/omapfb/omapfb-main.c	2011-04-14 14:59:08.049514746 +0530
@@ -960,6 +960,34 @@
 	*vaddr = data_start_v;
 }
 
+static void calc_output_size_with_aspect_ratio(
+		int width_disp_out, int height_disp_out, int width_in,
+		int height_in, u16 *width_out, u16 *height_out,
+		u16 *posx_out, u16 *posy_out)
+{
+	if (width_disp_out * height_in > height_disp_out * width_in) {
+		/*
+		* If aspect-ratio of display > aspect-ratio of input-buffer
+		* i.e If (width_disp_out/height_disp_out) > (width_in/height_in)
+		*/
+		*height_out = height_disp_out;
+		*width_out = (width_in * height_disp_out) / height_in;
+		*posy_out = 0;
+		*posx_out = (width_disp_out - *width_out) >> 1;
+	} else {
+		/*
+		 * If aspect-ratio of display < aspect-ratio of input-buffer
+		 * i.e If (width_disp_out/height_disp_out) <
+		 * (width_in/height_in).This would also take care of the case
+		 * where apsect ratio is same for both input & display device.
+		 */
+		 *width_out = width_disp_out;
+		 *height_out = (height_in * width_disp_out) / width_in;
+		 *posx_out = 0;
+		 *posy_out = (height_disp_out - *height_out) >> 1;
+	}
+}
+
 /* setup overlay according to the fb */
 int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 		u16 posx, u16 posy, u16 outw, u16 outh)
@@ -991,16 +1019,15 @@
 	DBG("setup_overlay %d, posx %d, posy %d, outw %d, outh %d\n", ofbi->id,
 			posx, posy, outw, outh);
 
-	if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
-			xres = var->xres;
-			yres = var->yres;
-	} else {
-	if (rotation == FB_ROTATE_CW || rotation == FB_ROTATE_CCW) {
-		xres = var->yres;
-		yres = var->xres;
-	} else {
-		xres = var->xres;
-		yres = var->yres;
+	xres = var->xres;
+	yres = var->yres;
+
+	/* if rotation == 90* or 270* */
+	if (ofbi->rotation_type != OMAP_DSS_ROT_TILER) {
+		if ((rotation == FB_ROTATE_CW)
+			|| (rotation == FB_ROTATE_CCW)) {
+			xres = var->yres;
+			yres = var->xres;
 		}
 	}
 
@@ -1041,13 +1068,21 @@
 	info.paddr = data_start_p;
 	info.vaddr = data_start_v;
 	info.screen_width = screen_width;
-	if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
-		info.width =
-			((rotation == 1) | (rotation == 3)) ? yres : xres;
-	} else {
 	info.width = xres;
-	}
 	info.height = yres;
+
+	if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
+		/* if rotation == 90* or 270*,last bit of roation would be 1 */
+		if ((rotation == FB_ROTATE_CW)
+			|| (rotation == FB_ROTATE_CCW))
+			info.width = yres;
+		/* if rotation == 90* or 270* */
+		if ((ovl->id != OMAP_DSS_GFX)
+			&& ((rotation == FB_ROTATE_CW)
+			|| (rotation == FB_ROTATE_CCW)))
+			info.height = xres;
+	}
+
 	info.color_mode = mode;
 	info.rotation_type = ofbi->rotation_type;
 	info.rotation = rotation;
@@ -1055,14 +1090,19 @@
 
 	info.pos_x = posx;
 	info.pos_y = posy;
-	if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
-		info.out_width =
-			((rotation == 1) | (rotation == 3)) ? outh : outw;
-	} else {
 	info.out_width = outw;
-	}
 	info.out_height = outh;
 
+	if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
+		/* if rotation == 90* or 270* */
+		if ((rotation == FB_ROTATE_CW)
+			|| (rotation == FB_ROTATE_CCW)) {
+			info.out_width = outh;
+			if (ovl->id != OMAP_DSS_GFX)
+				info.out_height = outw;
+		}
+	}
+
 	r = ovl->set_overlay_info(ovl, &info);
 	if (r) {
 		DBG("ovl->setup_overlay_info failed\n");
@@ -1111,48 +1151,58 @@
 			continue;
 		}
 
-		if (init || (ovl->caps & OMAP_DSS_OVL_CAP_SCALE) == 0) {
-			rotation = (var->rotate + ofbi->rotation[i]) % 4;
-			if (ofbi->rotation_type == OMAP_DSS_ROT_TILER) {
-					outw = var->xres;
-					outh = var->yres;
-			} else {
-			if (rotation == FB_ROTATE_CW ||
-					rotation == FB_ROTATE_CCW) {
-				outw = var->yres;
-				outh = var->xres;
-			} else {
-				outw = var->xres;
-				outh = var->yres;
+		rotation = (var->rotate + ofbi->rotation[i]) % 4;
+
+		/* Rotation not supported if framebuffer is not in tiler
+		 * memory for omap4430.
+		 */
+		if (cpu_is_omap44xx()) {
+			if (rotation && (ofbi->rotation_type
+						!= OMAP_DSS_ROT_TILER)) {
+				DBG("Rotation not supported if framebuffer \
+					 is not in tiler");
+				return -EINVAL;
 			}
+		}
+
+		outw = var->xres;
+		outh = var->yres;
+
+		if (init || (ovl->caps & OMAP_DSS_OVL_CAP_SCALE) == 0) {
+			if (ofbi->rotation_type != OMAP_DSS_ROT_TILER) {
+				if ((rotation == FB_ROTATE_CW)
+					|| (rotation == FB_ROTATE_CCW)) {
+					outw = var->yres;
+					outh = var->xres;
+				}
 			}
 		} else {
 			/*It comes here for vid1 on fb */
 			DBG("Its video pipeline.scaling is enabled");
-			rotation = (var->rotate + ofbi->rotation[i]) % 4;
-
 			/* get the device resolution */
 			display = ovl->manager->device;
 			display->driver->get_resolution(display, &w, &h);
 
-			if (rotation == FB_ROTATE_CW ||
-					rotation == FB_ROTATE_CCW) {
-				outw = ofbi->fit_to_screen ? h : var->yres;
-				outh = ofbi->fit_to_screen ? w : var->xres;
+			/* if rotation is 90* or 270* */
+			if ((rotation == FB_ROTATE_CW)
+				|| (rotation == FB_ROTATE_CCW)) {
+				if (ofbi->fit_to_screen) {
+					calc_output_size_with_aspect_ratio(w,
+					h, var->yres, var->xres, &outh, &outw,
+					&posx, &posy);
+				}
 			} else {
-				DBG("info.out_width = %d, info.out_height = %d\
-				take care of this for vid pipeline", outw, outh);
-				outw = ofbi->fit_to_screen ? w : var->xres;
-				outh = ofbi->fit_to_screen ? h : var->yres;
+				if (ofbi->fit_to_screen) {
+					calc_output_size_with_aspect_ratio(w,
+					h, var->xres, var->yres, &outw, &outh,
+					&posx, &posy);
+				}
 			}
 		}
 
-		if (init) {
+		if (init || ovl->id == OMAP_DSS_GFX) {
 			posx = 0;
 			posy = 0;
-		} else {
-			posx = ovl->info.pos_x;
-			posy = ovl->info.pos_y;
 		}
 
 		r = omapfb_setup_overlay(fbi, ovl, posx, posy, outw, outh);
@@ -1168,6 +1218,7 @@
 	return r;
 }
 
+
 /* checks var and eventually tweaks it to something supported,
  * DO NOT MODIFY PAR */
 static int omapfb_check_var(struct fb_var_screeninfo *var, struct fb_info *fbi)
