Index: kernel/arch/arm/mach-omap2/board-t1.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/board-t1.c	2011-03-15 00:52:45.000000000 +0900
+++ kernel/arch/arm/mach-omap2/board-t1.c	2011-03-15 02:02:31.137877551 +0900
@@ -104,6 +104,9 @@
 static void omap4_charger_cb(u8 attached);
 static void omap4_jig_cb(u8 attached);
 static void omap4_fsa9480_reset_cb(void);
+#ifdef CONFIG_VIDEO_MHL_V1
+static void omap4_mhl_cb(u8 attached);
+#endif
 
 static struct wake_lock uart_lock;
 #define TWL6030_RTC_GPIO			6
@@ -215,6 +218,10 @@
 	.charger_cb = omap4_charger_cb,
 	.jig_cb = omap4_jig_cb,
 	.reset_cb = omap4_fsa9480_reset_cb,
+	#ifdef CONFIG_VIDEO_MHL_V1
+    .mhl_cb         = omap4_mhl_cb,
+    #endif
+
 };
 
 #define SENSOR_MPU_NAME				"mpu3050"
@@ -350,6 +357,34 @@
 	printk("\nBoard file [FSA9480]: Reset Callback \n");
 }
 
+#ifdef CONFIG_VIDEO_MHL_V1
+extern void MHL_On(bool on);
+
+static bool fsa9480_is_mhl_attached(void)
+{
+        int val;
+
+        gpio_request(OMAP_GPIO_MHL_SEL, "MHL_SEL");
+        val = gpio_get_value(OMAP_GPIO_MHL_SEL);
+        gpio_free(OMAP_GPIO_MHL_SEL);
+
+        return !!val;
+}
+
+static void omap4_mhl_cb(u8 attached)
+{
+    /*TODO */
+       printk("\nBoard file [FSA9480]: MHL Callback\n");
+       gpio_request(OMAP_GPIO_MHL_SEL, "MHL_SEL");
+       gpio_direction_output(OMAP_GPIO_MHL_SEL,1);
+       gpio_free(OMAP_GPIO_MHL_SEL);
+      /*[Dharam] commented for the debugging purpose.As omap4_mhl_cb(1) is forced while initializing the board..we need to call MHL_On later after
+        initialization and probing has been complete.*/
+      // MHL_On(attached);
+}
+#endif
+
+
 static struct matrix_keymap_data t1_omap4_keymap_data = {
 	.keymap = t1_omap4_keymap,
 	.keymap_size = ARRAY_SIZE(t1_omap4_keymap),
@@ -1566,6 +1601,23 @@
 	 {
 		I2C_BOARD_INFO("geomagnetic", 0x2e),
 	 },
+	 #ifdef CONFIG_VIDEO_MHL_V1
+        {
+                I2C_BOARD_INFO("SII9234", 0x72>>1),
+        },
+
+        {
+                I2C_BOARD_INFO("SII9234A", 0x7A>>1),
+        },
+        {
+                I2C_BOARD_INFO("SII9234B", 0x92>>1),
+        },
+
+        {
+                I2C_BOARD_INFO("SII9234C", 0xC8>>1),
+        },
+    #endif
+
 #if 0	 
 	{
 	 I2C_BOARD_INFO("pn544", 0x2b),
@@ -2118,6 +2170,11 @@
 	sec_class = class_create(THIS_MODULE, "sec");
 	if (IS_ERR(sec_class))
 		pr_err("Class(sec) Creating Fail!!!\n");
+/*[Dharam]forced call of omap4_mhl_cb(1)..will be removed from here later. */
+#ifdef CONFIG_VIDEO_MHL_V1
+    omap4_mhl_cb(1);
+#endif
+
 }
 
 static void __init omap_board_map_io(void)
Index: kernel/arch/arm/mach-omap2/mux_t1_rev_r00.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/mux_t1_rev_r00.c	2011-03-15 00:52:45.000000000 +0900
+++ kernel/arch/arm/mach-omap2/mux_t1_rev_r00.c	2011-03-15 01:23:35.637878255 +0900
@@ -125,8 +125,8 @@
 	OMAP4_MUX(GPMC_NCS1, OMAP_MUX_MODE3),
 	/* [--OUT] gpmc_ncs2 - gpio_52 - IPC_HOST_WAKEUP */
 	//OMAP4_MUX(GPMC_NCS2, OMAP_MUX_MODE3 | OMAP_PIN_INPUT),
-	/* [IN---] gpmc_ncs3 - gpio_53 - IPC_SLAVE_WAKEUP */
-	OMAP4_MUX(GPMC_NCS3, OMAP_MUX_MODE3),
+	/* [IN---] gpmc_ncs3 - gpio_53 - MHL_SEL */
+	OMAP4_MUX(GPMC_NCS3, OMAP_MUX_MODE3| OMAP_PULL_ENA | OMAP_OFF_EN),
 	/* [--OUT] gpmc_nwp - gpio_54 - TOUCH_EN */
 	OMAP4_MUX(GPMC_NWP, OMAP_MUX_MODE3),
 	/* [--OUT] gpmc_clk - gpio_55 - ACTIVE_STATE */
@@ -225,10 +225,10 @@
 	//OMAP4_MUX(USBB1_HSIC_DATA, OMAP_MUX_MODE0 | OMAP_PIN_INPUT | OMAP_PIN_OFF_INPUT_PULLDOWN),
 	/* [-N-C-] usbb1_hsic_strobe - gpio_97 - NC */
 	//OMAP4_MUX(USBB1_HSIC_STROBE, OMAP_MUX_MODE0 | OMAP_PIN_INPUT | OMAP_PIN_OFF_INPUT_PULLDOWN),
-	/* [IN---] usbc1_icusb_dp - gpio_98 - MSENSOR_MHL_SDA_3.3V */
-	//OMAP4_MUX(USBC1_ICUSB_DP, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
-	/* [IN---] usbc1_icusb_dm - gpio_99 - MSENSOR_MHL_SCL_3.3V */
-	//OMAP4_MUX(USBC1_ICUSB_DM, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
+	/* [IN---] usbc1_icusb_dp - gpio_98 - MHL_SDA_1.8V */
+	OMAP4_MUX(USBC1_ICUSB_DP, OMAP_MUX_MODE3 | OMAP_PIN_INPUT),
+	/* [IN---] usbc1_icusb_dm - gpio_99 - MHL_SCL_1.8V */
+	OMAP4_MUX(USBC1_ICUSB_DM, OMAP_MUX_MODE3 | OMAP_PIN_INPUT),
 	/* [--OUT] sdmmc1_clk - gpio_100 -  */
 	OMAP4_MUX(SDMMC1_CLK, OMAP_MUX_MODE0 | OMAP_PULL_ENA | OMAP_OFF_EN),
 	/* [--OUT] sdmmc1_cmd - gpio_101 - T_FLASH_CMD */
@@ -382,7 +382,8 @@
 	/* [--OUT] usbb2_hsic_data - gpio_169 - NC */
 	OMAP4_MUX(USBB2_HSIC_DATA, OMAP_MUX_MODE3),
 	/* [--OUT] usbb2_hsic_strobe - gpio_170 - MHL_SEL */
-	OMAP4_MUX(USBB2_HSIC_STROBE, OMAP_MUX_MODE3 | OMAP_PULL_ENA | OMAP_OFF_EN),
+	 /*[Dharam] MHL_SEL uses now gpio_53.*/
+	//OMAP4_MUX(USBB2_HSIC_STROBE, OMAP_MUX_MODE3 | OMAP_PULL_ENA | OMAP_OFF_EN),
 	/* [IN---] kpd_col3 - gpio_171 - USB_OTG_EN */
 	OMAP4_MUX(UNIPRO_TX0, OMAP_MUX_MODE1 | OMAP_PIN_OFF_INPUT_PULLDOWN),
 	/* [IN---] kpd_col3 - gpio_171 - USB_OTG_EN */
@@ -396,7 +397,7 @@
 	/* [IN---] kpd_col3 - gpio_171 - USB_OTG_EN */
 	OMAP4_MUX(UNIPRO_TY2, OMAP_MUX_MODE3),
 	/* [IN---] kpd_row3 - gpi_175 - MHL_INT */
-	OMAP4_MUX(UNIPRO_RX0, OMAP_MUX_MODE1 | OMAP_PIN_INPUT_PULLUP | OMAP_PIN_OFF_INPUT_PULLDOWN),
+	OMAP4_MUX(UNIPRO_RX0, OMAP_MUX_MODE3 | OMAP_PIN_INPUT_PULLUP | OMAP_PIN_OFF_INPUT_PULLDOWN),
 	/* [IN---] kpd_row4 - gpi_176 - HOME_KEY */
 	OMAP4_MUX(UNIPRO_RY0, OMAP_MUX_MODE1 | OMAP_PIN_INPUT_PULLUP | OMAP_PIN_OFF_INPUT_PULLDOWN),
 	/* [-N-C-] kpd_row5 - gpi_177 - NC */
Index: kernel/arch/arm/plat-omap/include/plat/mux_t1_rev_r00.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/mux_t1_rev_r00.h	2011-03-15 00:52:45.000000000 +0900
+++ kernel/arch/arm/plat-omap/include/plat/mux_t1_rev_r00.h	2011-03-15 01:25:40.317877480 +0900
@@ -89,4 +89,16 @@
 #define OMAP_GPIO_KEY_PWRON			3
 #define OMAP_GPIO_KEY_HOME			176
 
+/*MHL Related GPIOs */
+#ifdef CONFIG_VIDEO_MHL_V1
+#define OMAP_GPIO_MHL_RST           60
+#define OMAP_GPIO_MHL_SEL          53
+#define OMAP_GPIO_MHL_INT          175
+#define OMAP_GPIO_MHL_WAKEUP    64
+#define OMAP_GPIO_MHL_SCL_18V   99
+#define OMAP_GPIO_MHL_SDA_18V   98
+#endif
+
+#define OMAP_GPIO_HDMI_EN   100
+
 #endif /* __MUX_T1_H__ */
Index: kernel/drivers/media/video/omap/mhl_v1/Common_Def.h
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/Common_Def.h	2011-03-14 13:58:00.000000000 +0900
+++ kernel/drivers/media/video/omap/mhl_v1/Common_Def.h	2011-03-15 01:29:02.657881838 +0900
@@ -17,7 +17,7 @@
 
 #include <linux/types.h>
 #include <linux/i2c.h>
-
+#include <plat/mux_t1_rev_r00.h>
 
 typedef u8 byte;
 typedef u32 word;
@@ -154,10 +154,10 @@
 #define		MHL_MAX_BUFFER_SIZE				MHL_SCRATCHPAD_SIZE	// manually define highest number
 
 //GPIO Pin configuration of Sii9234
-#define GPIO_MHL_RST    60
-#define GPIO_MHL_INT    175
-#define GPIO_MHL_SEL    170
-#define GPIO_MHL_WAKE_UP        64
+#define GPIO_MHL_RST    OMAP_GPIO_MHL_RST
+#define GPIO_MHL_INT    OMAP_GPIO_MHL_INT
+#define GPIO_MHL_SEL    OMAP_GPIO_MHL_SEL
+#define GPIO_MHL_WAKE_UP        OMAP_GPIO_MHL_WAKEUP
 
 #define GPIO_MHL_INT_AF
 #define GPIO_MHL_WAKE_UP_AF    
@@ -166,8 +166,8 @@
 #define GPIO_MSENSOR_MHL_SDA_AF                 0x3
 #define GPIO_MSENSOR_MHL_SCL_28V
 #define GPIO_MSENSOR_MHL_SCL_AF                 0x3
-#define GPIO_MHL_SDA_18V 					98           
-#define GPIO_MHL_SCL_18V					99           
+#define GPIO_MHL_SDA_18V 					OMAP_GPIO_MHL_SDA_18V     
+#define GPIO_MHL_SCL_18V					OMAP_GPIO_MHL_SCL_18V           
 #define GPIO_AP_HDMI_SDA
 #define GPIO_AP_HDMI_SDA_AF
 #define GPIO_AP_HDMI_SCL     GPIO_MSENSOR_MHL_SCL_28V
@@ -177,7 +177,7 @@
 #define MHL_INT_IRQ          gpio_to_irq(GPIO_MHL_INT)
 #define MHL_WAKEUP_IRQ               gpio_to_irq(GPIO_MHL_WAKE_UP)
 
-#define GPIO_HDMI_EN    100
+#define GPIO_HDMI_EN    OMAP_GPIO_HDMI_EN
 #define GPIO_HDMI_HPD   63
 #define GPIO_HDMI_EN_REV07  GPIO_HDMI_EN 
 #define GPIO_LEVEL_LOW  0
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234.c
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/sii9234.c	2011-03-14 13:58:00.000000000 +0900
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234.c	2011-03-15 01:51:59.047877762 +0900
@@ -290,7 +290,8 @@
 		SII_DEV_DBG("I2C not ready");
 		return 0;
 	}
-	u8 buf;
+	u8 buf=0;
+	printk("[Dharam] reading reg:%x\n",reg);
 
 	OMAP_GPIO_I2C_RD_DATA i2c_rd_param;
 	//OMAP_GPIO_I2C_CLIENT *client=(OMAP_GPIO_I2C_CLIENT *)client;
@@ -309,6 +310,7 @@
 	}
 	return ret;
 	*/
+	printk("[Dharam] read value:%x\n",buf);
 }
 EXPORT_SYMBOL(sii9234_i2c_read);
 
@@ -382,128 +384,67 @@
 
 static int sii9234_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-	/* int retval; */
-	struct class *mhl_class;
-	struct device *mhl_dev;
+	 struct class *mhl_class;
+     struct device *mhl_dev;
 
 	printk(KERN_ERR"[MHL_TEST] sii9234_i2c_probe");
 	
-	sii9234_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x72>>1,100);
+	sii9234_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x72,100);
 	
 	printk(KERN_ERR "SII9234 attach success!!!\n");
 	MHL_i2c_init = 1;
 
-	int ret=0;
-	sii9234_wq = create_singlethread_workqueue("sii9234_wq");
-	INIT_WORK(&sii9234_int_work, sii9234_interrupt_event_work);
-	
-	ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
-				IRQF_SHARED , "mhl_int", (void *)sii9234_i2c_client ); 
-	if (ret) {
-		printk(KERN_ERR "unable to request irq mhl_int"
-					" err:: %d\n", ret);
-		return ret;
-	}		
-	printk(KERN_ERR "MHL int request successful %d\n", ret);
-	
-	ret = request_threaded_irq(MHL_WAKEUP_IRQ, NULL,
-		mhl_wake_up_irq_handler, IRQF_SHARED,
-		"mhl_wake_up", (void *) sii9234_i2c_client);
-	if (ret) {
-		printk(KERN_ERR "unable to request irq mhl_wake_up"
-					" err:: %d\n", ret);
-		return ret;
-	}		
-	
+	 printk(KERN_ERR "SII9234 attach success!!!\n");
+
+   mhl_class = class_create(THIS_MODULE, "mhl");
+    if (IS_ERR(mhl_class))
+    {
+        pr_err("Failed to create class(mhl)!\n");
+    }
+
+    mhl_dev = device_create(mhl_class, NULL, 0, NULL, "mhl_dev");
+    if (IS_ERR(mhl_dev))
+    {
+        pr_err("Failed to create device(mhl_dev)!\n");
+    }
+
+    if (device_create_file(mhl_dev, &dev_attr_MHD_file) < 0)
+        printk(KERN_ERR "Failed to create device file(%s)!\n", dev_attr_MHD_file.attr.name);
+
+   //Routines for checking the read and write operations are working properly or not
+    OMAP_GPIO_I2C_RD_DATA i2c_rd_param;
+    u8 reg=0x03;
+    u8 buf =0;
+    i2c_rd_param.reg_len = 1;
+    i2c_rd_param.reg_addr = &reg;
+    i2c_rd_param.rdata_len = 1;
+    i2c_rd_param.rdata = &buf;
+    int x =omap_gpio_i2c_read(sii9234_i2c_client,&i2c_rd_param);
+    printk("[Dharam]%s read/write testing..value read=%x return_status=%x\n",__func__,buf,x);
+
 	return 0;
 
 }
 static int sii9234a_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        /* int retval; */
-        struct class *mhl_class;
-        struct device *mhl_dev;
-        sii9234a_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x7A>>1,100);
+        sii9234a_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x7A,100);
         printk(KERN_ERR "SII9234A attach success!!!\n");
         MHL_i2c_init = 1;
-
-        int ret=0;
-        sii9234_wq = create_singlethread_workqueue("sii9234_wq");
-        INIT_WORK(&sii9234_int_work, sii9234_interrupt_event_work);
-
-        /*ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
-                                IRQF_SHARED , "mhl_int", (void *) state);
-        if (ret) {
-                printk(KERN_ERR "unable to request irq mhl_int"
-                                        " err:: %d\n", ret);
-                return ret;
-        }
-        printk(KERN_ERR "MHL int reques successful %d\n", ret);
-
-        ret = request_threaded_irq(MHL_WAKEUP_IRQ, NULL,
-                mhl_wake_up_irq_handler, IRQF_SHARED,
-                "mhl_wake_up", (void *) state);
-        if (ret) {
-                printk(KERN_ERR "unable to request irq mhl_wake_up"
-                                        " err:: %d\n", ret);
-                return ret;
-        }
-        */
-
         return 0;
 
 }
 static int sii9234b_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        /* int retval; */
-        struct class *mhl_class;
-        struct device *mhl_dev;
-		
-
-
         printk(KERN_ERR"[MHL_TEST] sii9234b_i2c_probe");
-
-        sii9234b_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x92>>1,100);
+        sii9234b_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x92,100);
         printk(KERN_ERR "SII9234B attach success!!!\n");
-        MHL_i2c_init = 1;
-
-        int ret=0;
-        sii9234_wq = create_singlethread_workqueue("sii9234_wq");
-        INIT_WORK(&sii9234_int_work, sii9234_interrupt_event_work);
-
-        /*ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
-                                IRQF_SHARED , "mhl_int", (void *) state);
-        if (ret) {
-                printk(KERN_ERR "unable to request irq mhl_int"
-                                        " err:: %d\n", ret);
-                return ret;
-        }
-        printk(KERN_ERR "MHL int reques successful %d\n", ret);
-
-        ret = request_threaded_irq(MHL_WAKEUP_IRQ, NULL,
-                mhl_wake_up_irq_handler, IRQF_SHARED,
-                "mhl_wake_up", (void *) state);
-        if (ret) {
-                printk(KERN_ERR "unable to request irq mhl_wake_up"
-                                        " err:: %d\n", ret);
-                return ret;
-        }
-        */
-
         return 0;
 
 }
 static int sii9234c_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        /* int retval; */
-        struct class *mhl_class;
-        struct device *mhl_dev;
-
-
         printk(KERN_ERR"[MHL_TEST] sii9234c_i2c_probe");
-
-        sii9234c_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0xC8>>1,100);
-        
+        sii9234c_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0xC8,100);
         printk(KERN_ERR "SII9234C attach success!!!\n");
         MHL_i2c_init = 1;
 
@@ -511,25 +452,25 @@
         sii9234_wq = create_singlethread_workqueue("sii9234_wq");
         INIT_WORK(&sii9234_int_work, sii9234_interrupt_event_work);
 
-        /*ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
-                                IRQF_SHARED , "mhl_int", (void *) state);
+        ret = request_threaded_irq(MHL_INT_IRQ, NULL, mhl_int_irq_handler,
+                                IRQF_SHARED , "mhl_int", (void *)sii9234c_i2c_client);
         if (ret) {
                 printk(KERN_ERR "unable to request irq mhl_int"
                                         " err:: %d\n", ret);
                 return ret;
         }
-        printk(KERN_ERR "MHL int reques successful %d\n", ret);
+        printk(KERN_ERR "MHL int request successful %d\n", ret);
 
         ret = request_threaded_irq(MHL_WAKEUP_IRQ, NULL,
                 mhl_wake_up_irq_handler, IRQF_SHARED,
-                "mhl_wake_up", (void *) state);
+                "mhl_wake_up", (void *) sii9234c_i2c_client);
         if (ret) {
                 printk(KERN_ERR "unable to request irq mhl_wake_up"
                                         " err:: %d\n", ret);
                 return ret;
         }
-        */
-
+        //[Dharam]Calling MHL_On(1) for testing purpose.
+        MHL_On(1);
         return 0;
 
 }
@@ -659,52 +600,25 @@
 
 void sii9234_cfg_power(bool on)
 {
-	static struct regulator *regulator;
-
-	regulator = regulator_get(NULL, "vmipi_1.1v");
-
-	if(IS_ERR(regulator)){
-		printk(KERN_ERR "%s : ERROR: failed to get regulator \n",
-							__func__);
-		goto out;
-	}
 
 	if(on)
 	{
-//		s3c_gpio_cfgpin(GPIO_HDMI_EN,S3C_GPIO_OUTPUT);	//HDMI_EN
-		if(system_rev < 7)
-			gpio_set_value(GPIO_HDMI_EN,GPIO_LEVEL_HIGH);
-		else
-			gpio_set_value(GPIO_HDMI_EN_REV07,GPIO_LEVEL_HIGH);
-		if (!reg_en) {
-			regulator_enable(regulator);
-			regulator_put(regulator);
-			reg_en = 1;
-		}
-		
-		//s3c_gpio_cfgpin(GPIO_MHL_RST,S3C_GPIO_OUTPUT);	//MHL_RST
-		//s3c_gpio_setpull(GPIO_MHL_RST, S3C_GPIO_PULL_NONE);
-	
+            if(gpio_direction_output(GPIO_HDMI_EN,GPIO_LEVEL_HIGH))
+                printk("[MHL_TEST]error in making HDMI_EN High\n");
+            printk("[MHL_TEST]HDMI_EN:%d",gpio_get_value(GPIO_HDMI_EN));
+            if(gpio_direction_output(GPIO_MHL_RST, GPIO_LEVEL_LOW))
+                printk("[MHL_TEST]error in making GPIO_MHL_RST Low\n");
+            msleep(50);
+            if(gpio_direction_output(GPIO_MHL_RST, GPIO_LEVEL_HIGH))
+                printk("[MHL_TEST]error in making GPIO_MHL_RST high\n");
+            printk("[MHL_TEST]MHL_RST:%d",gpio_get_value(GPIO_MHL_RST));
 
-		//s3c_gpio_setpull(GPIO_AP_SCL_18V, S3C_GPIO_PULL_DOWN);
-		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
-		msleep(50);
-		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_HIGH);
-		//s3c_gpio_setpull(GPIO_AP_SCL_18V, S3C_GPIO_PULL_NONE);
 	}
 	else
 	{
-		if (reg_en) {
-			regulator_disable(regulator);
-			regulator_put(regulator);
-			reg_en = 0;
-		}
-		if(system_rev < 7)
-		  gpio_set_value(GPIO_HDMI_EN,GPIO_LEVEL_LOW);
-		else
-			gpio_set_value(GPIO_HDMI_EN_REV07,GPIO_LEVEL_LOW);
-		
-		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+		  gpio_direction_output(GPIO_HDMI_EN,GPIO_LEVEL_LOW);
+          gpio_direction_output(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+
 	}
 	printk(KERN_ERR "[MHL]%s : %d \n",__func__,on);
 
@@ -715,38 +629,17 @@
 
 static void sii9234_cfg_gpio()
 {
-	//s3c_gpio_cfgpin(GPIO_AP_SDA_18V, S3C_GPIO_SFN(0x0));	//AP_MHL_SDA
-	//s3c_gpio_setpull(GPIO_AP_SDA_18V, S3C_GPIO_PULL_NONE);
-
-	//s3c_gpio_cfgpin(GPIO_AP_SCL_18V,S3C_GPIO_SFN(0x1));	//AP_MHL_SCL
-	//s3c_gpio_setpull(GPIO_AP_SCL_18V, S3C_GPIO_PULL_NONE);
-
-	//s3c_gpio_cfgpin(GPIO_MHL_WAKE_UP,S3C_GPIO_INPUT);//GPH1(6) XEINT 14
 	set_irq_type(MHL_WAKEUP_IRQ, IRQ_TYPE_EDGE_RISING);
-	//s3c_gpio_setpull(GPIO_MHL_WAKE_UP, S3C_GPIO_PULL_DOWN);
-
-	//s3c_gpio_setpull(GPIO_MHL_INT, S3C_GPIO_PULL_DOWN);
-	set_irq_type(MHL_INT_IRQ, IRQ_TYPE_EDGE_RISING);
-//	s3c_gpio_cfgpin(GPIO_MHL_INT, GPIO_MHL_INT_AF); 
-
-	if(system_rev < 7) {
-		//s3c_gpio_cfgpin(GPIO_HDMI_EN,S3C_GPIO_OUTPUT);	//HDMI_EN
-		gpio_set_value(GPIO_HDMI_EN,GPIO_LEVEL_LOW);
-		//s3c_gpio_setpull(GPIO_HDMI_EN, S3C_GPIO_PULL_NONE);
-	}
-	else {
-		//s3c_gpio_cfgpin(GPIO_HDMI_EN_REV07,S3C_GPIO_OUTPUT);	//HDMI_EN
-		gpio_set_value(GPIO_HDMI_EN_REV07,GPIO_LEVEL_LOW);
-		//s3c_gpio_setpull(GPIO_HDMI_EN_REV07, S3C_GPIO_PULL_NONE);
-	}
-
-	//s3c_gpio_cfgpin(GPIO_MHL_RST,S3C_GPIO_OUTPUT);
-	//s3c_gpio_setpull(GPIO_MHL_RST, S3C_GPIO_PULL_NONE);
-	gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
-
-	//s3c_gpio_cfgpin(GPIO_MHL_SEL,S3C_GPIO_OUTPUT);
-	//s3c_gpio_setpull(GPIO_MHL_SEL, S3C_GPIO_PULL_NONE);
-	gpio_set_value(GPIO_MHL_SEL, GPIO_LEVEL_LOW);
+    set_irq_type(MHL_INT_IRQ, IRQ_TYPE_EDGE_RISING);
+    gpio_request(GPIO_HDMI_EN,NULL);
+    if(gpio_direction_output(GPIO_HDMI_EN,GPIO_LEVEL_LOW))
+         printk("%s error in making GPIO_HDMI_EN Low\n",__func__);
+    gpio_request(GPIO_MHL_RST,NULL);
+    if(gpio_direction_output(GPIO_MHL_RST,GPIO_LEVEL_LOW))
+        printk("%s error in making GPIO_HDMI_EN Low\n",__func__);
+    gpio_request(GPIO_MHL_SEL,NULL);
+    if(gpio_direction_output(GPIO_MHL_SEL,GPIO_LEVEL_LOW))
+        printk("%s error in making GPIO_HDMI_EN Low\n",__func__);
 
 }
 
