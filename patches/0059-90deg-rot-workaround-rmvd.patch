Index: Kernel/drivers/media/video/omap/omap_s3d_overlay.c
===================================================================
--- Kernel.orig/drivers/media/video/omap/omap_s3d_overlay.c	2011-01-24 11:55:54.000000000 +0530
+++ Kernel/drivers/media/video/omap/omap_s3d_overlay.c	2011-02-16 13:11:08.572104445 +0530
@@ -2384,7 +2384,7 @@
 
 	mutex_lock(&dev->lock);
 
-	err = omap_vout_new_window(&dev->crop, &dev->win, &dev->fbuf, win);
+	err = omap_vout_new_window(&dev->crop, &dev->win, &dev->fbuf, win, dev->rotation);
 	if (err) {
 		mutex_unlock(&dev->lock);
 		return err;
Index: Kernel/drivers/media/video/omap/omap_vout.c
===================================================================
--- Kernel.orig/drivers/media/video/omap/omap_vout.c	2011-02-11 14:43:44.000000000 +0530
+++ Kernel/drivers/media/video/omap/omap_vout.c	2011-02-16 13:11:08.572104445 +0530
@@ -423,7 +423,7 @@
 static inline int rotate_90_or_270(const struct omap_vout_device *vout)
 {
 	return (vout->rotation == dss_rotation_90_degree ||
-			vout->rotation == dss_rotation_270_degree);
+             vout->rotation == dss_rotation_270_degree);
 }
 
 /*
@@ -942,6 +942,7 @@
 	info.pos_y = posy;
 	info.out_width = outw;
 	info.out_height = outh;
+
 	info.global_alpha =
 		vout->vid_info.overlays[0]->info.global_alpha;
 	if (!cpu_is_omap44xx()) {
@@ -1044,7 +1045,7 @@
 			posy = win->w.top;
 			break;
 		}
-
+	
 		ret = omapvid_setup_overlay(vout, ovl, posx, posy,
 				outw, outh, addr, uv_addr);
 		if (ret)
@@ -1101,7 +1102,6 @@
 		}
 #endif
 	}
-
 	return 0;
 }
 
@@ -1246,6 +1246,7 @@
 	int process = false;
 	unsigned long flags;
 	int irq = 0;
+
 	if (!vout->streaming)
 		return;
 
@@ -2159,16 +2160,15 @@
 	if (dev_buf_type & OMAP_FLAG_IDEV)
 		multiplier = 2;
 
-	if (!cpu_is_omap44xx() && rotate_90_or_270(vout)) {
+	if (/*!cpu_is_omap44xx()&& */ rotate_90_or_270(vout)) {
 		vout->fbuf.fmt.height = timing->x_res;
 		vout->fbuf.fmt.width = timing->y_res * multiplier;
 	} else {
 		vout->fbuf.fmt.height = timing->y_res * multiplier;
 		vout->fbuf.fmt.width = timing->x_res;
 	}
-
+	
 	/* change to samller size is OK */
-
 	bpp = omap_vout_try_format(&f->fmt.pix);
 	if (V4L2_PIX_FMT_NV12 == f->fmt.pix.pixelformat)
 		f->fmt.pix.sizeimage = f->fmt.pix.width * f->fmt.pix.height * 3/2;
@@ -2877,13 +2877,26 @@
 			info.enabled = 1;
 			info.paddr = addr;
 			info.p_uv_addr = uv_addr;
+
+			info.pos_x = vout->win.w.left;
+			info.pos_y = vout->win.w.top;
+			if(info.rotation == 1 || info.rotation == 3)
+			{
+                        	info.out_width = vout->win.w.height;
+                        	info.out_height = vout->win.w.width;
+			}
+			else
+			{
+				info.out_width = vout->win.w.width;
+				info.out_height = vout->win.w.height;
+			}
+
 			if (ovl->set_overlay_info(ovl, &info)) {
 				ret = -EINVAL;
 				goto streamon_err1;
 			}
 		}
 	}
-
 	/* First save the configuration in ovelray structure */
 	ret = omapvid_init(vout, addr, uv_addr);
 	if (ret)
Index: Kernel/drivers/media/video/omap/omap_voutlib.c
===================================================================
--- Kernel.orig/drivers/media/video/omap/omap_voutlib.c	2011-02-10 12:46:55.000000000 +0530
+++ Kernel/drivers/media/video/omap/omap_voutlib.c	2011-02-16 13:11:08.572104445 +0530
@@ -57,12 +57,34 @@
  * impossible and cannot reasonably be adjusted.
  */
 int omap_vout_try_window(struct v4l2_framebuffer *fbuf,
-			struct v4l2_window *new_win)
+			struct v4l2_window *new_win, int rotation)
 {
 	struct v4l2_rect try_win;
+	
+	int tmp;
 
-	/* make a working copy of the new_win rectangle */
+#if 0	
+	if (rotation) {
+		try_win.width = new_win->w.height;
+		try_win.height = new_win->w.width;
+		try_win.left = new_win->w.left;
+		try_win.top = new_win->w.top;
+	} else {
+		/* make a working copy of the new_win rectangle */
+		try_win = new_win->w;
+	}
+#endif	
+	
 	try_win = new_win->w;
+	
+	printk("omap_vout_try_window rot %d\n", rotation);
+	
+	if(rotation == 1 || rotation == 3)
+	{
+		tmp = try_win.left;
+		try_win.left = try_win.top;
+		try_win.top = tmp;
+	}
 
 	/* adjust the preview window so it fits on the display by clipping any
 	 * offscreen areas
@@ -79,10 +101,29 @@
 		try_win.width : fbuf->fmt.width;
 	try_win.height = (try_win.height < fbuf->fmt.height) ?
 		try_win.height : fbuf->fmt.height;
-	if (try_win.left + try_win.width > fbuf->fmt.width)
-		try_win.width = fbuf->fmt.width - try_win.left;
-	if (try_win.top + try_win.height > fbuf->fmt.height)
-		try_win.height = fbuf->fmt.height - try_win.top;
+
+
+	if(rotation == 1 || rotation == 3)
+	{
+		if (try_win.left + try_win.height > fbuf->fmt.height)
+                	try_win.height = fbuf->fmt.height - try_win.left;
+	        if (try_win.top + try_win.width > fbuf->fmt.width)
+        	        try_win.width = fbuf->fmt.width - try_win.top;
+
+		//try_win.top = (fbuf->fmt.width - try_win.width)/2;
+		//try_win.left = (fbuf->fmt.height - try_win.height)/2;
+	}
+	else
+	{
+		if (try_win.left + try_win.width > fbuf->fmt.width)
+			try_win.width = fbuf->fmt.width - try_win.left;
+		if (try_win.top + try_win.height > fbuf->fmt.height)
+			try_win.height = fbuf->fmt.height - try_win.top;
+
+		//try_win.top = (fbuf->fmt.height - try_win.height)/2;
+        //try_win.left = (fbuf->fmt.width - try_win.width)/2;
+
+	}
 	try_win.width &= ~1;
 	try_win.height &= ~1;
 
@@ -105,11 +146,11 @@
  */
 int omap_vout_new_window(struct v4l2_rect *crop,
 		struct v4l2_window *win, struct v4l2_framebuffer *fbuf,
-		struct v4l2_window *new_win)
+		struct v4l2_window *new_win, int rotation)
 {
 	int err;
 
-	err = omap_vout_try_window(fbuf, new_win);
+	err = omap_vout_try_window(fbuf, new_win, rotation);
 	if (err)
 		return err;
 
Index: Kernel/drivers/media/video/omap/omap_voutlib.h
===================================================================
--- Kernel.orig/drivers/media/video/omap/omap_voutlib.h	2010-12-10 15:11:21.000000000 +0530
+++ Kernel/drivers/media/video/omap/omap_voutlib.h	2011-02-16 13:11:08.572104445 +0530
@@ -25,7 +25,7 @@
 
 extern int omap_vout_new_window(struct v4l2_rect *crop,
 		struct v4l2_window *win, struct v4l2_framebuffer *fbuf,
-		struct v4l2_window *new_win);
+		struct v4l2_window *new_win, int rotation);
 
 extern void omap_vout_new_format(struct v4l2_pix_format *pix,
 		struct v4l2_framebuffer *fbuf, struct v4l2_rect *crop,
Index: Kernel/drivers/video/omap2/dss/overlay.c
===================================================================
--- Kernel.orig/drivers/video/omap2/dss/overlay.c	2011-02-16 13:10:13.000000000 +0530
+++ Kernel/drivers/video/omap2/dss/overlay.c	2011-02-16 13:11:08.572104445 +0530
@@ -553,19 +553,32 @@
 			outh = info->out_height;
 	}
 
-#if 0
-	if ((dw < info->pos_x + outw) && !info->out_wb) {
-		DSSDBG("check_overlay failed 1: %d < %d + %d\n",
-				dw, info->pos_x, outw);
-		return -EINVAL;
-	}
+	if(info->rotation == 0 || info->rotation == 2) {
+		if ((dw < info->pos_x + outw) && !info->out_wb) {
+			DSSDBG("check_overlay failed 1: %d < %d + %d\n",
+					dw, info->pos_x, outw);
+			return -EINVAL;
+		}
 
-	if ((dh < info->pos_y + outh) && !info->out_wb) {
-		DSSDBG("check_overlay failed 2: %d < %d + %d\n",
-				dh, info->pos_y, outh);
-		return -EINVAL;
+		if ((dh < info->pos_y + outh) && !info->out_wb) {
+			DSSDBG("check_overlay failed 2: %d < %d + %d\n",
+					dh, info->pos_y, outh);
+			return -EINVAL;
+		}
+	} else {
+		if ((dw < info->pos_x + outw) && !info->out_wb) {
+			DSSDBG("check_overlay failed 1: %d < %d + %d\n",
+					dw, info->pos_x, outw);
+			return -EINVAL;
+		}
+
+		if ((dh < info->pos_y + outh) && !info->out_wb) {
+			DSSDBG("check_overlay failed 2: %d < %d + %d\n",
+					dh, info->pos_y, outh);
+			return -EINVAL;
+		}
+		
 	}
-#endif
 
 	if ((ovl->supported_modes & info->color_mode) == 0) {
 		DSSERR("overlay doesn't support mode %d\n", info->color_mode);
