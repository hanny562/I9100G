Index: Kernel/drivers/video/omap2/displays/panel-ld9040.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ Kernel/drivers/video/omap2/displays/panel-ld9040.c	2011-02-23 14:39:36.190988581 +0530
@@ -0,0 +1,1133 @@
+/*
+ * ld9040 AMOLED LCD panel driver.
+ *
+ * Author: Donghwa Lee  <dh09.lee@samsung.com>
+ *
+ * Derived from drivers/video/omap/lcd-apollon.c
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+
+#include <linux/wait.h>
+#include <linux/fb.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/spi/spi.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/lcd.h>
+#include <linux/backlight.h>
+#include <linux/serial_core.h>
+#include <linux/ld9040.h>
+#include <linux/platform_device.h>
+#include <plat/hardware.h>
+#include <asm/mach-types.h>
+#include <plat/control.h>
+#include <plat/display.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+#define MAX_GAMMA_LEVEL		25
+#define GAMMA_TABLE_COUNT		21
+
+#define SLEEPMSEC		0x1000
+#define ENDDEF			0x2000
+#define	DEFMASK			0xFF00
+#define COMMAND_ONLY		0xFE
+#define DATA_ONLY		0xFF
+
+#define MIN_BRIGHTNESS		0
+#define MAX_BRIGHTNESS		255
+#define POWER_IS_ON(pwr)	((pwr) <= FB_BLANK_NORMAL)
+
+#define DIM_BL 20
+#define MIN_BL 30
+#define MAX_BL 255
+#define MAX_GAMMA_VALUE 24
+
+static unsigned int get_lcdtype;
+struct ld9040 *lcd; /* TBD need to decide right place - SHANKAR*/
+
+module_param_named(get_lcdtype, get_lcdtype, uint, 0444);
+MODULE_PARM_DESC(get_lcdtype, " get_lcdtype  in Bootloader");
+struct ld9040 {
+	struct device			*dev;
+	struct spi_device		*spi;
+	unsigned int			power;
+	unsigned int			gamma_mode;
+	unsigned int			current_brightness;
+	unsigned int			gamma_table_count;
+	unsigned int			bl;
+	unsigned int			beforepower;
+	unsigned int			ldi_enable;
+	unsigned int 			acl_enable;
+	unsigned int 			cur_acl;
+	struct mutex	lock;
+	struct lcd_device		*ld;
+	struct backlight_device		*bd;
+	struct lcd_platform_data	*lcd_pd;
+	struct early_suspend    early_suspend;
+};
+
+/*   : Fix me regarding ADC kernel Panic
+int current_adc = 0;
+*/
+
+static int ld9040_spi_write_byte(struct ld9040 *lcd, int addr, int data)
+{
+	u16 buf[1];
+	struct spi_message msg;
+
+	struct spi_transfer xfer = {
+		.len		= 2,
+		.tx_buf		= buf,
+	};
+
+	buf[0] = (addr << 8) | data;
+
+	spi_message_init(&msg);
+	spi_message_add_tail(&xfer, &msg);
+
+	return spi_sync(lcd->spi, &msg);
+}
+
+static int ld9040_spi_write(struct ld9040 *lcd,
+	unsigned char address, unsigned char command)
+{
+	int ret = 0;
+
+	if (address != DATA_ONLY)
+		ret = ld9040_spi_write_byte(lcd, 0x0, address);
+	if (command != COMMAND_ONLY)
+		ret = ld9040_spi_write_byte(lcd, 0x1, command);
+
+	return ret;
+}
+
+static int ld9040_panel_send_sequence(struct ld9040 *lcd,
+	const unsigned short *wbuf)
+{
+	int ret = 0, i = 0;
+
+	while ((wbuf[i] & DEFMASK) != ENDDEF) {
+		if ((wbuf[i] & DEFMASK) != SLEEPMSEC) {
+			ret = ld9040_spi_write(lcd, wbuf[i], wbuf[i+1]);
+			if (ret)
+				break;
+		} else
+			udelay(wbuf[i+1]*1000);
+		i += 2;
+	}
+
+	return ret;
+}
+static int get_gamma_value_from_bl(int bl)
+{
+	int gamma_value =0;
+	int gamma_val_x10 =0;
+
+	if(bl >= MIN_BL){
+		gamma_val_x10 = 10 *(MAX_GAMMA_VALUE-1)*bl/(MAX_BL-MIN_BL) + (10 - 10*(MAX_GAMMA_VALUE-1)*(MIN_BL)/(MAX_BL-MIN_BL));
+		gamma_value=(gamma_val_x10 +5)/10;
+	}else{
+		gamma_value =0;
+	}
+
+	return gamma_value;
+}
+static int ld9040_gamma_ctl(struct ld9040 *lcd)
+{
+	int ret = 0;
+	const unsigned short *gamma;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+
+	if(get_lcdtype==1){ /* M2 */
+		if (lcd->gamma_mode) {
+			gamma = pdata->gamma19_table[lcd->bl];
+		}
+		else {
+			gamma = pdata->gamma22_table[lcd->bl];
+		}
+	}
+	else { /* SM2 */
+		if (lcd->gamma_mode) {
+			gamma = pdata->gamma_sm2_19_table[lcd->bl];
+		}
+		else {
+			gamma = pdata->gamma_sm2_22_table[lcd->bl];
+		}
+	}
+	/* start gamma table updating. */
+	ret = ld9040_panel_send_sequence(lcd, pdata->gamma_start);
+	if (ret) {
+		dev_err(lcd->dev, "failed to disable gamma table updating.\n");
+		goto gamma_err;
+	}
+	ret = ld9040_panel_send_sequence(lcd, gamma);
+	if (ret) {
+		dev_err(lcd->dev, "failed to disable gamma table updating.\n");
+		goto gamma_err;
+	}
+	/* update gamma table. */
+	ret = ld9040_panel_send_sequence(lcd, pdata->gamma_ctrl);
+	if (ret)
+		dev_err(lcd->dev, "failed to update gamma table.\n");
+
+gamma_err:
+	return ret;
+}
+
+static int ld9040_set_elvss(struct ld9040 *lcd)
+{
+	int ret = 0;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+	if(get_lcdtype){  /* for M2 */
+		switch (lcd->bl) {
+		case 0 ... 4: /* 30cd ~ 100cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_table[0]);
+			break;
+		case 5 ... 10: /* 110cd ~ 160cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_table[1]);
+			break;
+		case 11 ... 14: /* 170cd ~ 200cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_table[2]);
+			break;
+		case 15 ... 24: /* 210cd ~ 300cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_table[3]);
+			break;
+		default:
+			break;
+		}
+	}
+	else{/* for SM2 */
+		switch (lcd->bl) {
+		case 0 ... 4: /* 30cd ~ 100cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_sm2_table[0]);
+			break;
+		case 5 ... 10: /* 110cd ~ 160cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_sm2_table[1]);
+			break;
+		case 11 ... 14: /* 170cd ~ 200cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_sm2_table[2]);
+			break;
+		case 15 ... 24: /* 210cd ~ 300cd */
+			ret = ld9040_panel_send_sequence(lcd, pdata->elvss_sm2_table[3]);
+			break;
+		default:
+			break;
+		}
+	}
+	dev_dbg(lcd->dev, "level  = %d\n", lcd->bl);
+
+	if (ret) {
+		dev_err(lcd->dev, "failed to initialize ldi.\n");
+		return -EIO;
+	}
+
+	return ret;
+}
+
+static int ld9040_set_acl(struct ld9040 *lcd)
+{
+	int ret = 0;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+
+	if (lcd->acl_enable) {
+		if(lcd->cur_acl == 0)  {
+			ret = ld9040_panel_send_sequence(lcd, pdata->acl_on);
+		}
+		switch (lcd->bl) {
+		case 0 ... 1: /* 30cd ~ 40cd */			
+			if (lcd->cur_acl != 0) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[0]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : off!!\n");
+				lcd->cur_acl = 0;
+			}
+			break;
+		case 2 ... 12: /* 70cd ~ 180cd */
+			if (lcd->cur_acl != 40) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[1]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 40!!\n");
+				lcd->cur_acl = 40;
+			}
+			break;
+		case 13: /* 190cd */
+			if (lcd->cur_acl != 43) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[2]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 43!!\n");
+				lcd->cur_acl = 43;
+			}
+			break;
+		case 14: /* 200cd */			
+			if (lcd->cur_acl != 45) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[3]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 45!!\n");
+				lcd->cur_acl = 45;
+			}
+			break;
+		case 15: /* 210cd */
+			if (lcd->cur_acl != 47) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[4]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 47!!\n");
+				lcd->cur_acl = 47;
+			}
+			break;
+		case 16: /* 220cd */			
+			if (lcd->cur_acl != 48) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[5]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 48!!\n");
+				lcd->cur_acl = 48;
+			}
+			break;
+		default:
+			if (lcd->cur_acl != 50) {
+				ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[6]);
+				dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : 50!!\n");
+				lcd->cur_acl = 50;
+			}
+			break;
+		}
+	}
+	else{
+			ret = ld9040_panel_send_sequence(lcd, pdata->acl_table[0]);
+			lcd->cur_acl = 0;
+			dev_dbg(lcd->dev, "ACL_cutoff_set Percentage : off!!\n");	
+	}
+
+	if (ret) {
+		dev_err(lcd->dev, "failed to initialize ldi.\n");
+		return -EIO;
+	}
+
+	return ret;
+}
+
+static int ld9040_ldi_init(struct ld9040 *lcd)
+{
+	int ret, i;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+	if(get_lcdtype){  /* for M2 */
+		const unsigned short *init_seq[] = {
+			pdata->seq_user_set,
+			pdata->seq_displayctl_set,
+			pdata->seq_gtcon_set,
+			pdata->seq_panelcondition_set,	
+			pdata->acl_on,
+			pdata->sleep_out,
+			pdata->elvss_on,		
+			pdata->seq_pwrctl_set,
+			pdata->seq_gamma_set1,
+			pdata->gamma_ctrl,
+		};
+		for (i = 0; i < ARRAY_SIZE(init_seq); i++) {
+			ret = ld9040_panel_send_sequence(lcd, init_seq[i]);
+			mdelay(5);
+			if (ret)
+				break;
+		}
+
+	}
+	else { /* for SM2 */
+		const unsigned short *init_seq_sm2[] = {
+			pdata->seq_user_set,
+			pdata->seq_displayctl_set,
+			pdata->seq_gtcon_set,
+			pdata->seq_panelcondition_set,	
+			pdata->acl_on,
+			pdata->sleep_out,
+			pdata->elvss_on,		
+			pdata->seq_pwrctl_set,
+			pdata->seq_sm2_gamma_set1,
+			pdata->gamma_ctrl,
+		};
+		for (i = 0; i < ARRAY_SIZE(init_seq_sm2); i++) {
+			ret = ld9040_panel_send_sequence(lcd, init_seq_sm2[i]);
+			mdelay(5);
+			if (ret)
+				break;
+		}
+
+	}
+	return ret;
+}
+
+static int ld9040_ldi_enable(struct ld9040 *lcd)
+{
+	int ret = 0;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+
+	ret = ld9040_panel_send_sequence(lcd, pdata->display_on);
+
+	return ret;
+}
+
+static int ld9040_ldi_disable(struct ld9040 *lcd)
+{
+	int ret;
+	struct ld9040_panel_data *pdata = lcd->lcd_pd->pdata;
+
+	ret = ld9040_panel_send_sequence(lcd, pdata->display_off);
+	ret = ld9040_panel_send_sequence(lcd, pdata->sleep_in);
+
+	return ret;
+}
+
+static int update_brightness(struct ld9040 *lcd)
+{
+	int ret;
+
+	ret = ld9040_set_elvss(lcd);
+	if (ret) {
+		dev_err(lcd->dev, "lcd brightness setting failed.\n");
+		return -EIO;
+	}
+
+	ret = ld9040_set_acl(lcd);
+	if (ret) {
+		dev_err(lcd->dev, "lcd brightness setting failed.\n");
+		return -EIO;
+	}
+
+	ret = ld9040_gamma_ctl(lcd);
+	if (ret) {
+		dev_err(lcd->dev, "lcd brightness setting failed.\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+
+static int ld9040_power_on(struct ld9040 *lcd)
+{
+	int ret = 0;
+	struct lcd_platform_data *pd = NULL;
+	pd = lcd->lcd_pd;
+
+	if (!pd) {
+		dev_err(lcd->dev, "platform data is NULL.\n");
+		return -EFAULT;
+	}
+
+	if (!pd->power_on) {
+		dev_err(lcd->dev, "power_on is NULL.\n");
+		return -EFAULT;
+	} else {
+		pd->power_on(lcd->ld, 1);
+		mdelay(pd->power_on_delay);
+	}
+#if 0
+	if (!pd->gpio_cfg_lateresume) {
+		dev_err(lcd->dev, "gpio_cfg_lateresume is NULL.\n");
+		ret = -EFAULT;
+		goto err;
+	} else
+		pd->gpio_cfg_lateresume(lcd->ld);
+#endif
+
+	if (!pd->reset) {
+		dev_err(lcd->dev, "reset is NULL.\n");
+		return -EFAULT;
+	} else {
+		pd->reset(lcd->ld);
+		mdelay(pd->reset_delay);
+	}
+
+
+	ret = ld9040_ldi_init(lcd);
+
+	if (ret) {
+		dev_err(lcd->dev, "failed to initialize ldi.\n");
+		goto err;
+	}
+
+	ret = ld9040_ldi_enable(lcd);
+	if (ret) {
+		dev_err(lcd->dev, "failed to enable ldi.\n");
+		goto err;
+	}
+
+	update_brightness(lcd);
+
+	lcd->ldi_enable = 1;
+err:
+
+	return ret;;
+}
+
+static int ld9040_power_off(struct ld9040 *lcd)
+{
+	int ret = 0;
+	struct lcd_platform_data *pd = NULL;
+
+	pd = lcd->lcd_pd;
+	if (!pd) {
+		dev_err(lcd->dev, "platform data is NULL.\n");
+		return -EFAULT;
+	}
+
+	mdelay(pd->sleep_in_delay);
+
+
+	ret = ld9040_ldi_disable(lcd);
+	if (ret) {
+		dev_err(lcd->dev, "lcd setting failed.\n");
+		ret = -EIO;
+		goto err;
+	}
+	mdelay(pd->power_off_delay);
+
+	if (!pd->gpio_cfg_earlysuspend) {
+		dev_err(lcd->dev, "gpio_cfg_earlysuspend is NULL.\n");
+		ret = -EFAULT;
+		goto err;
+	} else
+		pd->gpio_cfg_earlysuspend(lcd->ld);
+
+	if (!pd->power_on) {
+		dev_err(lcd->dev, "power_on is NULL.\n");
+		ret = -EFAULT;
+		goto err;
+	} else {
+		pd->power_on(lcd->ld, 0);
+	}
+
+	lcd->ldi_enable = 0;
+
+err:
+	return ret;
+}
+
+static int ld9040_power(struct ld9040 *lcd, int power)
+{
+	int ret = 0;
+
+	if (POWER_IS_ON(power) && !POWER_IS_ON(lcd->power))
+		ret = ld9040_power_on(lcd);
+	else if (!POWER_IS_ON(power) && POWER_IS_ON(lcd->power))
+		ret = ld9040_power_off(lcd);
+
+	if (!ret)
+		lcd->power = power;
+
+	return ret;
+}
+
+static int ld9040_set_power(struct lcd_device *ld, int power)
+{
+	struct ld9040 *lcd = lcd_get_data(ld);
+
+	if (power != FB_BLANK_UNBLANK && power != FB_BLANK_POWERDOWN &&
+		power != FB_BLANK_NORMAL) {
+		dev_err(lcd->dev, "power value should be 0, 1 or 4.\n");
+		return -EINVAL;
+	}
+
+	return ld9040_power(lcd, power);
+}
+
+static int ld9040_get_power(struct lcd_device *ld)
+{
+	struct ld9040 *lcd = lcd_get_data(ld);
+
+	return lcd->power;
+}
+
+static int ld9040_get_brightness(struct backlight_device *bd)
+{
+	printk("[SHANKAR] %s [%d] called \n", __func__, __LINE__);
+	return bd->props.brightness;
+}
+
+static int ld9040_set_brightness(struct backlight_device *bd)
+{
+	int ret = 0, bl = bd->props.brightness;
+	struct ld9040 *lcd = bl_get_data(bd);
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+
+	if (bl < MIN_BRIGHTNESS ||
+		bl > bd->props.max_brightness) {
+		dev_err(&bd->dev, "lcd brightness should be %d to %d. now %d\n",
+			MIN_BRIGHTNESS, MAX_BRIGHTNESS, bl);
+		return -EINVAL;
+	}
+
+	lcd->bl = get_gamma_value_from_bl(bl);
+
+
+	if (lcd->ldi_enable) {
+		ret = update_brightness(lcd);
+		if (ret < 0)
+			dev_err(&bd->dev, "update brightness failed.\n");
+	}
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+
+	return ret;
+}
+
+static struct lcd_ops ld9040_lcd_ops = {
+	.set_power = ld9040_set_power,
+	.get_power = ld9040_get_power,
+};
+
+static const struct backlight_ops ld9040_backlight_ops  = {
+	.get_brightness = ld9040_get_brightness,
+	.update_status = ld9040_set_brightness,
+};
+
+static ssize_t ld9040_sysfs_backlihgt_level_test(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t len)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	unsigned long brightness;
+	int rc;
+
+	rc = strict_strtoul(buf, 0, &brightness);
+	if (rc < 0)
+		return rc;
+	else
+		lcd->bd->props.brightness = brightness;
+
+	ld9040_set_brightness(lcd->bd);
+	return 0;
+}
+
+static DEVICE_ATTR(baktst, 0666,
+		NULL, ld9040_sysfs_backlihgt_level_test);
+static ssize_t acl_set_show(struct device *dev, struct 
+device_attribute *attr, char *buf)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	char temp[3];
+
+	sprintf(temp, "%d\n", lcd->acl_enable);
+	strcpy(buf, temp);
+
+	return strlen(buf);
+}
+static ssize_t acl_set_store(struct device *dev, struct 
+device_attribute *attr, const char *buf, size_t size)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	int value;
+	int rc;
+	
+	rc = strict_strtoul(buf, (unsigned int) 0, (unsigned long *)&value);
+	if (rc < 0)
+		return rc;
+	else{
+		if (lcd->acl_enable != value) {
+			lcd->acl_enable = value;
+			ld9040_set_acl(lcd);
+		}
+		return 0;
+	}
+}
+
+static DEVICE_ATTR(acl_set, 0666, 
+		acl_set_show, acl_set_store);
+
+static ssize_t lcdtype_show(struct device *dev, struct 
+device_attribute *attr, char *buf)
+{
+
+	char temp[15];
+	sprintf(temp, "SMD_AMS427G03\n");
+	strcat(buf, temp);
+	return strlen(buf);
+}
+
+static DEVICE_ATTR(lcdtype, 0666, 
+		lcdtype_show, NULL);
+static ssize_t ld9040_sysfs_show_gamma_mode(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	char temp[10];
+
+	switch (lcd->gamma_mode) {
+	case 0:
+		sprintf(temp, "2.2 mode\n");
+		strcat(buf, temp);
+		break;
+	case 1:
+		sprintf(temp, "1.9 mode\n");
+		strcat(buf, temp);
+		break;
+	default:
+		dev_info(dev, "gamma mode could be 0:2.2, 1:1.9 or 2:1.7)n");
+		break;
+	}
+
+	return strlen(buf);
+}
+
+static ssize_t ld9040_sysfs_store_gamma_mode(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t len)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	int rc;
+
+	dev_info(dev, "ld9040_sysfs_store_gamma_mode\n");
+
+	rc = strict_strtoul(buf, 0, (unsigned long *)&lcd->gamma_mode);
+	if (rc < 0)
+		return rc;
+
+	if (lcd->ldi_enable)
+		ld9040_gamma_ctl(lcd);
+
+	return len;
+}
+
+static DEVICE_ATTR(gamma_mode, 0666,
+		ld9040_sysfs_show_gamma_mode, ld9040_sysfs_store_gamma_mode);
+
+static ssize_t ld9040_sysfs_show_gamma_table(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	struct ld9040 *lcd = dev_get_drvdata(dev);
+	char temp[3];
+
+	sprintf(temp, "%d\n", lcd->gamma_table_count);
+	strcpy(buf, temp);
+
+	return strlen(buf);
+}
+
+static DEVICE_ATTR(gamma_table, 0666,
+		ld9040_sysfs_show_gamma_table, NULL);
+
+
+void ld9040_power_down(struct ld9040 *lcd)
+{
+	lcd->beforepower = lcd->power;
+	ld9040_power(lcd, FB_BLANK_POWERDOWN);
+}
+
+void ld9040_power_up(struct ld9040 *lcd)
+{
+	if (lcd->beforepower == FB_BLANK_UNBLANK)
+		lcd->power = FB_BLANK_POWERDOWN;
+
+	ld9040_power(lcd, lcd->beforepower);
+}
+
+
+    /*
+	 * For Samsung LD9040 OCTA Display timing controller:
+	 * Signal                  			Min.       Typ.         Max
+	 * Frame Frequency(TV)         		815         -           850
+	 * Vertical Active Display Term(TVD)-           480         -
+	 * Horizontal Active Display Term(THD)     -           800            -
+	 * Condition : RGB 24bits, 16M color
+	 * - Frame rate = 60Hz
+	 *   - Dotclk = 25.07MHz
+	 *   - VLW = 2H
+	 *   - HLW = 2Dotclk
+	 *   - VBP = 6H
+	 *   - VFP = 10H
+	 *   - HBP = 16Dotclk
+	 *   - HFP = 16Dotclk
+	 *
+	 * Total clocks per line (TH) = hsw + hfp + columns (THD) + hbp
+	 *               		834  = 2  + 16  + 800          + 16
+	 *
+	 * Total LCD lines (TV)      = vsw + vfp + rows (TVD)  + vbp
+	 *          		   498   = 2   + 10   + 480     + 6
+	 *
+	 * From this data,
+	 *  - single line takes (2  + 16  + 800  + 16) clocks = 834 clocks/line
+	 *  - full frame takes (2   + 10   + 400     + 6) lines = 498 lines/frame
+	 *  - full frame in clocks = 834 *498 = 415332 clocks/frame
+	 *  - 24.9MHz, the LCD would refresh at 24.9M/348612 = 60Hz
+	 */
+
+#define LCD_XRES        480
+#define LCD_YRES        800
+#define LCD_HBP         16
+#define LCD_HFP         16 
+#define LCD_HSW     2   
+#define LCD_VBP     6  	 
+#define LCD_VFP     10    
+#define LCD_VSW     2    
+
+#define LCD_PIXCLOCK_MAX          25070
+
+/*  Manual
+ * defines HFB, HSW, HBP, VFP, VSW, VBP as shown below
+ */
+
+static struct omap_video_timings ld9040_panel_timings = {
+    /* 800 x 480 @ 60 Hz  Reduced blanking VESA CVT 0.31M3-R */
+    .x_res          = LCD_XRES,
+    .y_res          = LCD_YRES,
+    .pixel_clock    = LCD_PIXCLOCK_MAX,
+    .hfp            = LCD_HFP,
+    .hsw            = LCD_HSW,
+    .hbp            = LCD_HBP,
+    .vfp            = LCD_VFP,
+    .vsw            = LCD_VSW,
+    .vbp            = LCD_VBP,
+};
+
+static int ld9040_panel_probe(struct omap_dss_device *dssdev)
+{
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+    dssdev->panel.config = OMAP_DSS_LCD_TFT | OMAP_DSS_LCD_IVS |OMAP_DSS_LCD_IEO |OMAP_DSS_LCD_IPC |
+                        OMAP_DSS_LCD_IHS | OMAP_DSS_LCD_ONOFF ;
+
+    dssdev->panel.acb = 0;
+    dssdev->panel.timings = ld9040_panel_timings;
+
+	if (NULL != lcd)
+		 dev_set_drvdata(&dssdev->dev, lcd);
+	else
+	{
+		printk(KERN_ERR " %s [%d] lcd struct is not allocated in ld9040_probe, probe failed \n", __func__, __LINE__);
+		return -1;
+	}
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+    return 0;
+}
+
+static void ld9040_panel_remove(struct omap_dss_device *dssdev)
+{
+    /* TBD */
+}
+
+static int ld9040_panel_enable(struct omap_dss_device *dssdev)
+{
+	struct ld9040 *lcd = dev_get_drvdata(&dssdev->dev);
+    int r = 0;
+
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+#if 0
+	if (dssdev->platform_enable)
+	        r = dssdev->platform_enable(dssdev);
+#endif
+	ld9040_power_up(lcd);
+
+    r = omapdss_dpi_display_enable(dssdev);
+    if (r) {
+             dev_err(&dssdev->dev, "failed to enable DPI\n");
+             return r;
+    }
+    dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
+
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+    return r;
+}
+
+static void ld9040_panel_disable(struct omap_dss_device *dssdev)
+{
+	struct ld9040 *lcd = dev_get_drvdata(&dssdev->dev);
+    
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
+                return;
+
+    ld9040_power_down(lcd);
+    omapdss_dpi_display_disable(dssdev);
+
+#if 0
+	if (dssdev->platform_disable)
+	        dssdev->platform_disable(dssdev);
+#endif
+
+    dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
+
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+}
+
+static int ld9040_panel_suspend(struct omap_dss_device *dssdev)
+{
+    printk(KERN_INFO " **** ld9040_panel_suspend\n");
+
+    ld9040_panel_disable(dssdev);
+
+    #ifdef LCD_REFRESH_CHANGE
+    if ( refresh_rate == OMAP_DSS_FR_60HZ)
+    {
+        reduce_refresh_rate(1);
+        refresh_rate = OMAP_DSS_FR_52HZ_SUSPEND;
+        refresh_count = 10;
+    }
+    #endif
+    dssdev->state = OMAP_DSS_DISPLAY_SUSPENDED;
+    return 0;
+}
+
+static int ld9040_panel_resume(struct omap_dss_device *dssdev)
+{
+    printk(KERN_INFO " **** ld9040_panel_resume\n");
+
+    ld9040_panel_enable(dssdev);
+    dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
+    return 0;
+}
+
+static void  ld9040_panel_get_resolution(struct omap_dss_device *dssdev,
+                u16 *xres, u16 *yres)
+{
+        *xres = dssdev->panel.timings.x_res;
+        *yres = dssdev->panel.timings.y_res;
+}
+
+static void  ld9040_panel_set_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        dpi_set_timings(dssdev, timings);
+}
+
+static void  ld9040_panel_get_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        *timings = dssdev->panel.timings;
+}
+
+static int  ld9040_panel_check_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        return dpi_check_timings(dssdev, timings);
+}
+
+
+
+static struct omap_dss_driver ld9040_omap_dss_driver = {
+    .probe          = ld9040_panel_probe,
+    .remove         = ld9040_panel_remove,
+
+    .enable         = ld9040_panel_enable,
+    .disable        = ld9040_panel_disable,
+    .get_resolution = ld9040_panel_get_resolution,
+    .suspend        = ld9040_panel_suspend,
+    .resume         = ld9040_panel_resume,
+
+        .set_timings    = ld9040_panel_set_timings,
+        .get_timings    = ld9040_panel_get_timings,
+        .check_timings  = ld9040_panel_check_timings,
+
+
+    .driver     = {
+        .name   = "ld9040_panel",
+        .owner  = THIS_MODULE,
+    },
+};
+
+/*   : Fix me regarding ADC kernel Panic
+void ld9040_set_adc_value(int adc_value)
+{
+	current_adc = adc_value;
+	printk("ld9040_set_adc_value() : current_adc = %d", current_adc);
+}
+*/
+
+static int ld9040_probe(struct spi_device *spi)
+{
+	int ret = 0;
+	struct ld9040_panel_data *pdata;
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+
+	lcd = kzalloc(sizeof(struct ld9040), GFP_KERNEL);
+	if (!lcd) {
+		pr_err("failed to allocate for lcd\n");
+		ret = -ENOMEM;
+		goto err_alloc;
+	}
+
+	mutex_init(&lcd->lock);
+
+	/* ld9040 lcd panel uses 3-wire 9bits SPI Mode. */
+	spi->bits_per_word = 9;
+
+	ret = spi_setup(spi);
+	if (ret < 0) {
+		dev_err(&spi->dev, "spi setup failed.\n");
+		goto out_free_lcd;
+	}
+
+	lcd->spi = spi;
+	lcd->dev = &spi->dev;
+
+	lcd->lcd_pd = (struct lcd_platform_data *)spi->dev.platform_data;
+	if (!lcd->lcd_pd) {
+		dev_err(&spi->dev, "platform data is NULL.\n");
+		goto out_free_lcd;
+	}
+
+/*   : Fix me regarding ADC kernel Panic
+	lcd->lcd_pd->register_cb(ld9040_set_adc_value);
+*/
+#if 0 /* Commented by Shankar - Do we need this ?? Not Sure TBD */	
+	lcd->ld = lcd_device_register("ld9040", &spi->dev,
+		lcd, &ld9040_lcd_ops);
+	if (IS_ERR(lcd->ld)) {
+		ret = PTR_ERR(lcd->ld);
+		goto out_free_lcd;
+	}
+#endif
+	lcd->bd = backlight_device_register("ld9040-bl", &spi->dev,
+		lcd, &ld9040_backlight_ops, NULL);
+	if (IS_ERR(lcd->bd)) {
+		ret = PTR_ERR(lcd->bd);
+		goto out_free_lcd;
+	}
+
+	lcd->bd->props.max_brightness = MAX_BRIGHTNESS;
+	lcd->bd->props.brightness = MAX_BRIGHTNESS;
+	lcd->bl = MAX_GAMMA_LEVEL - 1;
+
+	lcd->acl_enable = 1;
+	lcd->cur_acl = 0;
+
+
+	/*
+	 * it gets gamma table count available so it gets user
+	 * know that.
+	 */
+	pdata = lcd->lcd_pd->pdata;
+
+	lcd->gamma_table_count =
+	   pdata->gamma_table_size / (MAX_GAMMA_LEVEL * sizeof(int));
+
+	ret = device_create_file(&(spi->dev), &dev_attr_gamma_mode);
+	if (ret < 0)
+		dev_err(&(spi->dev), "failed to add sysfs entries\n");
+
+	ret = device_create_file(&(spi->dev), &dev_attr_gamma_table);
+	if (ret < 0)
+		dev_err(&(spi->dev), "failed to add sysfs entries\n");
+
+	ret = device_create_file(&(spi->dev), &dev_attr_baktst);
+	if (ret < 0)
+		dev_err(&(spi->dev), "failed to add sysfs entries\n");
+	ret = device_create_file(&(spi->dev), &dev_attr_acl_set);
+	if (ret < 0)
+		dev_err(&(spi->dev), "failed to add sysfs entries\n");
+
+	ret = device_create_file(&(spi->dev), &dev_attr_lcdtype);  
+	if (ret < 0)
+		dev_err(&(spi->dev), "failed to add sysfs entries\n");
+
+#if 0
+/* Do not turn off lcd during booting */
+#ifndef LCD_ON_FROM_BOOTLOADER
+	lcd->lcd_pd->lcd_enabled = 0;
+#else
+	lcd->lcd_pd->lcd_enabled = 1;
+#endif
+	/*
+	 * if lcd panel was on from bootloader like u-boot then
+	 * do not lcd on.
+	 */
+	if (!lcd->lcd_pd->lcd_enabled) {
+		/*
+		 * if lcd panel was off from bootloader then
+		 * current lcd status is powerdown and then
+		 * it enables lcd panel.
+		 */
+		lcd->power = FB_BLANK_POWERDOWN;
+
+		ld9040_power(lcd, FB_BLANK_UNBLANK);
+	} else
+		lcd->power = FB_BLANK_UNBLANK;
+#else
+	//TBD SHANKAR
+	lcd->lcd_pd->lcd_enabled = 0;
+	lcd->power = FB_BLANK_POWERDOWN;
+	lcd->beforepower = FB_BLANK_UNBLANK;
+	get_lcdtype = 1; 
+
+#endif
+	lcd->ldi_enable = 1;
+
+	dev_set_drvdata(&spi->dev, lcd);
+
+
+	if(get_lcdtype==1){ /* M2 */
+			printk("[LD9040 PROBE LOG] LCDTYPE : M2 \n");
+	}
+	else { /* SM2 */
+			printk("[LD9040 PROBE LOG] LCDTYPE : SM2\n");
+	}
+
+	dev_info(&spi->dev, "ld9040 panel driver has been probed.\n");
+	/* Register this driver with OMAP4 DSS subsystem */
+	omap_dss_register_driver(&ld9040_omap_dss_driver);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+	return 0;
+
+out_free_lcd:
+	mutex_destroy(&lcd->lock);
+	kfree(lcd);
+err_alloc:
+	return ret;
+}
+
+static int __devexit ld9040_remove(struct spi_device *spi)
+{
+	struct ld9040 *lcd = dev_get_drvdata(&spi->dev);
+
+	ld9040_power(lcd, FB_BLANK_POWERDOWN);
+	lcd_device_unregister(lcd->ld);
+
+	return 0;
+}
+
+/* Power down all displays on reboot, poweroff or halt. */
+static void ld9040_shutdown(struct spi_device *spi)
+{
+	struct ld9040 *lcd = dev_get_drvdata(&spi->dev);
+
+	ld9040_power(lcd, FB_BLANK_POWERDOWN);
+}
+
+static struct spi_driver ld9040_driver = {
+	.driver = {
+		.name	= "ld9040",
+		.bus	= &spi_bus_type,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= ld9040_probe,
+	.remove		= __devexit_p(ld9040_remove),
+	.shutdown	= ld9040_shutdown,
+};
+
+
+
+
+
+static int __init ld9040_init(void)
+{
+	return spi_register_driver(&ld9040_driver);
+}
+
+static void __exit ld9040_exit(void)
+{
+	spi_unregister_driver(&ld9040_driver);
+}
+
+module_init(ld9040_init);
+module_exit(ld9040_exit);
+
+MODULE_AUTHOR("Donghwa Lee <dh09.lee@samsung.com>");
+MODULE_DESCRIPTION("ld9040 LCD Driver");
+MODULE_LICENSE("GPL");
+
Index: Kernel/include/linux/ld9040.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ Kernel/include/linux/ld9040.h	2011-02-23 14:39:36.190988581 +0530
@@ -0,0 +1,42 @@
+/*inclue/linux/ld9040.h
+ *
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *              http://www.samsung.com/
+ *
+ * Header file for Samsung Display Panel(AMOLED) driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+#include <linux/types.h>
+
+struct ld9040_panel_data {
+	const unsigned short *seq_display_set;
+	const unsigned short *seq_etc_set;
+	const unsigned short *seq_user_set;
+	const unsigned short *seq_panelcondition_set;
+	const unsigned short *seq_displayctl_set;
+	const unsigned short *seq_gtcon_set;
+	const unsigned short *seq_manpwr_set;
+	const unsigned short *seq_pwrctl_set;
+	const unsigned short *seq_gamma_set1;
+	const unsigned short *seq_sm2_gamma_set1;  
+	const unsigned short *display_on;
+	const unsigned short *display_off;
+	const unsigned short *sleep_in;
+	const unsigned short *sleep_out;
+	const unsigned short *gamma_start;
+	const unsigned short *gamma_ctrl;
+	const unsigned short **gamma19_table;
+	const unsigned short **gamma22_table;
+	const unsigned short **gamma_sm2_19_table;  
+	const unsigned short **gamma_sm2_22_table;  
+	const unsigned short **acl_table;
+	const unsigned short **elvss_table;
+	const unsigned short **elvss_sm2_table; 
+	const unsigned short *acl_on;
+	const unsigned short *elvss_on;
+	int gamma_table_size;
+};
+
Index: Kernel/arch/arm/mach-omap2/matchbox-panel.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ Kernel/arch/arm/mach-omap2/matchbox-panel.c	2011-02-23 14:39:36.190988581 +0530
@@ -0,0 +1,3670 @@
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/ld9040.h>
+
+#define SLEEPMSEC		0x1000
+#define ENDDEF			0x2000
+#define	DEFMASK			0xFF00
+#define COMMAND_ONLY		0xFE
+#define DATA_ONLY		0xFF
+
+static const unsigned short SEQ_INIT_DISPLAY_SETTING[] = {
+	/* USER_SETTING */
+	0xF0, 0x5A,
+	DATA_ONLY, 0x5A,
+	/* ACL ON */
+	0xC1, 0x4D,
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x08,	DATA_ONLY, 0x0F,	DATA_ONLY, 0x16,	DATA_ONLY, 0x1D,
+	DATA_ONLY, 0x24,	DATA_ONLY, 0x2A,	DATA_ONLY, 0x31,	DATA_ONLY, 0x38,
+	DATA_ONLY, 0x3F,	DATA_ONLY, 0x46,
+	/* PANEL CONDITION */
+	0xF8, 0x05,
+	DATA_ONLY, 0x5E,
+	DATA_ONLY, 0x96,
+	DATA_ONLY, 0x6B,
+	DATA_ONLY, 0x7D,
+	DATA_ONLY, 0x0D,
+	DATA_ONLY, 0x3F,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x32,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x07,
+	DATA_ONLY, 0x07,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	/* DISPLAY_CONDITION */
+	0xF2, 0x02,
+	DATA_ONLY, 0x06,
+	DATA_ONLY, 0x0A,
+	DATA_ONLY, 0x10,
+	DATA_ONLY, 0x10,
+	/* GTCON */
+	0xF7, 0x09,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	/* MANPWR */
+	0xB0, 0x04,
+	/* PWR_CTRL */
+	0xF4, 0x0A,
+	DATA_ONLY, 0x87,
+	DATA_ONLY, 0x25,
+	DATA_ONLY, 0x6A,
+	DATA_ONLY, 0x44,
+	DATA_ONLY, 0x02,
+	DATA_ONLY, 0x88,
+	/* ELVSS_ON */
+	0xB1, 0x0D,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x16,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_INIT_ETC_SETTING[] = {
+	/* GAMMA_SET1 */
+	0xF9, 0x00,
+	DATA_ONLY, 0xC7,
+	DATA_ONLY, 0xC4,
+	DATA_ONLY, 0xAC,
+	DATA_ONLY, 0xC9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x7B,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xB5,
+	DATA_ONLY, 0xC0,
+	DATA_ONLY, 0xA8,
+	DATA_ONLY, 0xC7,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xA3,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xBD,
+	DATA_ONLY, 0xBF,
+	DATA_ONLY, 0xA6,
+	DATA_ONLY, 0xC6,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xA4,
+	/* GAMMA_CTRL */
+	0xFB, 0x02,
+	DATA_ONLY, 0x5A,
+	/* SLEEP OUT */
+	0x11, COMMAND_ONLY,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_USER_SETTING[] = {
+	0xF0, 0x5A,
+
+	DATA_ONLY, 0x5A,
+	ENDDEF, 0x00
+};
+static const unsigned short SEQ_ACL_ON[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x08,	DATA_ONLY, 0x0F,	DATA_ONLY, 0x16,	DATA_ONLY, 0x1D,
+	DATA_ONLY, 0x24,	DATA_ONLY, 0x2A,	DATA_ONLY, 0x31,	DATA_ONLY, 0x38,
+	DATA_ONLY, 0x3F,	DATA_ONLY, 0x46,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ACL_OFF[] = {
+	0xC0, 0x00,
+
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short SEQ_ACL_40P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x06,	DATA_ONLY, 0x11,	DATA_ONLY, 0x1A,	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x25,	DATA_ONLY, 0x29,	DATA_ONLY, 0x2D,	DATA_ONLY, 0x30,
+	DATA_ONLY, 0x33,	DATA_ONLY, 0x35,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short SEQ_ACL_43P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x07,	DATA_ONLY, 0x12,	DATA_ONLY, 0x1C,	DATA_ONLY, 0x23,
+	DATA_ONLY, 0x29,	DATA_ONLY, 0x2D,	DATA_ONLY, 0x31,	DATA_ONLY, 0x34,
+	DATA_ONLY, 0x37,	DATA_ONLY, 0x3A,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+
+
+
+static const unsigned short SEQ_ACL_45P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x07,	DATA_ONLY, 0x13,	DATA_ONLY, 0x1E,	DATA_ONLY, 0x25,
+	DATA_ONLY, 0x2B,	DATA_ONLY, 0x30,	DATA_ONLY, 0x34,	DATA_ONLY, 0x37,
+	DATA_ONLY, 0x3A,	DATA_ONLY, 0x3D,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short SEQ_ACL_47P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x07,	DATA_ONLY, 0x14,	DATA_ONLY, 0x20,	DATA_ONLY, 0x28,
+	DATA_ONLY, 0x2E,	DATA_ONLY, 0x33,	DATA_ONLY, 0x37,	DATA_ONLY, 0x3B,
+	DATA_ONLY, 0x3E,	DATA_ONLY, 0x41,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ACL_48P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x08,	DATA_ONLY, 0x15,	DATA_ONLY, 0x20,	DATA_ONLY, 0x29,
+	DATA_ONLY, 0x2F,	DATA_ONLY, 0x34,	DATA_ONLY, 0x39,	DATA_ONLY, 0x3D,
+	DATA_ONLY, 0x40,	DATA_ONLY, 0x43,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ACL_50P[] = {
+	0xC1, 0x4D,
+
+	DATA_ONLY, 0x96,	DATA_ONLY, 0x1D,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x01,	DATA_ONLY, 0xDF,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,	DATA_ONLY, 0x1F,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x00,	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x08,	DATA_ONLY, 0x16,	DATA_ONLY, 0x22,	DATA_ONLY, 0x2B,
+	DATA_ONLY, 0x31,	DATA_ONLY, 0x37,	DATA_ONLY, 0x3B,	DATA_ONLY, 0x3F,
+	DATA_ONLY, 0x43,	DATA_ONLY, 0x46,
+
+	0xC0, 0x01,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short *ACL_cutoff_set[] = {
+	SEQ_ACL_OFF,
+	SEQ_ACL_40P,
+	SEQ_ACL_43P,
+	SEQ_ACL_45P,
+	SEQ_ACL_47P,
+	SEQ_ACL_48P,
+	SEQ_ACL_50P,
+};
+
+static const unsigned short SEQ_ELVSS_ON[] = {
+	0xB1, 0x0F,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x16,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short SEQ_ELVSS_49[] = {
+	0xB2, 0x10,
+
+	DATA_ONLY, 0x10,
+	DATA_ONLY, 0x10,
+	DATA_ONLY, 0x10,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ELVSS_41[] = {
+	0xB2, 0x17,
+	DATA_ONLY, 0x17,
+	DATA_ONLY, 0x17,
+	DATA_ONLY, 0x17,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ELVSS_39[] = {
+	0xB2, 0x1A,
+	DATA_ONLY, 0x1A,
+	DATA_ONLY, 0x1A,
+	DATA_ONLY, 0x1A,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ELVSS_35[] = {
+	0xB2, 0x1E,
+	DATA_ONLY, 0x1E,
+	DATA_ONLY, 0x1E,
+	DATA_ONLY, 0x1E,
+	ENDDEF, 0x00
+};
+
+static const unsigned short *SEQ_ELVSS_set[] = {
+	SEQ_ELVSS_35,
+	SEQ_ELVSS_39,
+	SEQ_ELVSS_41,
+	SEQ_ELVSS_49,
+};
+static const unsigned short SEQ_SM2_ELVSS_44[] = {
+	0xB2, 0x15,
+
+	DATA_ONLY, 0x15,
+	DATA_ONLY, 0x15,
+	DATA_ONLY, 0x15,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SM2_ELVSS_37[] = {
+	0xB2, 0x1C,
+	DATA_ONLY, 0x1C,
+	DATA_ONLY, 0x1C,
+	DATA_ONLY, 0x1C,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SM2_ELVSS_34[] = {
+	0xB2, 0x1F,
+	DATA_ONLY, 0x1F,
+	DATA_ONLY, 0x1F,
+	DATA_ONLY, 0x1F,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SM2_ELVSS_30[] = {
+	0xB2, 0x23,
+	DATA_ONLY, 0x23,
+	DATA_ONLY, 0x23,
+	DATA_ONLY, 0x23,
+	ENDDEF, 0x00
+};
+static const unsigned short *SEQ_SM2_ELVSS_set[] = {
+	SEQ_SM2_ELVSS_30,
+	SEQ_SM2_ELVSS_34,
+	SEQ_SM2_ELVSS_37,
+	SEQ_SM2_ELVSS_44,
+};
+
+static const unsigned short SEQ_GTCON[] = {
+	0xF7, 0x09,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_PANEL_CONDITION[] = {
+	0xF8, 0x05,
+	DATA_ONLY, 0x5E,
+	DATA_ONLY, 0x96,
+	DATA_ONLY, 0x6B,
+	DATA_ONLY, 0x7D,
+	DATA_ONLY, 0x0D,
+	DATA_ONLY, 0x3F,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x32,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x07,
+	DATA_ONLY, 0x07,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x20,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_GAMMA_SET1[] = {
+	0xF9, 0x00,
+	DATA_ONLY, 0xC7,
+	DATA_ONLY, 0xC4,
+	DATA_ONLY, 0xAC,
+	DATA_ONLY, 0xC9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x7B,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xB5,
+	DATA_ONLY, 0xC0,
+	DATA_ONLY, 0xA8,
+	DATA_ONLY, 0xC7,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xA3,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xBD,
+	DATA_ONLY, 0xBF,
+	DATA_ONLY, 0xA6,
+	DATA_ONLY, 0xC6,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xA4,
+	ENDDEF, 0x00
+};
+static const unsigned short SEQ_SM2_GAMMA_SET1[] = {
+	0xF9, 0x2E,
+	DATA_ONLY, 0xB0,
+	DATA_ONLY, 0xAE,
+	DATA_ONLY, 0xA9,
+	DATA_ONLY, 0xB9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xA3,
+	DATA_ONLY, 0x36,
+	DATA_ONLY, 0xA6,
+	DATA_ONLY, 0xA6,
+	DATA_ONLY, 0x9F,
+	DATA_ONLY, 0xB8,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xBB,
+	DATA_ONLY, 0x2E,
+	DATA_ONLY, 0xA8,
+	DATA_ONLY, 0xA9,
+	DATA_ONLY, 0xA3,
+	DATA_ONLY, 0xB9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xCE,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_GAMMA_CTRL[] = {
+	0xFB, 0x02,
+
+	DATA_ONLY, 0x5A,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_GAMMA_START[] = {
+	0xF9, COMMAND_ONLY,
+
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_APON[] = {
+	0xF3, 0x00,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x0A,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_DISPCTL[] = {
+	0xF2, 0x02,
+
+	DATA_ONLY, 0x06,
+	DATA_ONLY, 0x0A,
+	DATA_ONLY, 0x10,
+	DATA_ONLY, 0x10,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short SEQ_MANPWR[] = {
+	0xB0, 0x04,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_PWR_CTRL[] = {
+	0xF4, 0x0A,
+
+	DATA_ONLY, 0x87,
+	DATA_ONLY, 0x25,
+	DATA_ONLY, 0x6A,
+	DATA_ONLY, 0x44,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SLPOUT[] = {
+	0x11, COMMAND_ONLY,
+	SLEEPMSEC, 120,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SLPIN[] = {
+	0x10, COMMAND_ONLY,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_DISPON[] = {
+	0x29, COMMAND_ONLY,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_DISPOFF[] = {
+	0x28, COMMAND_ONLY,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VCI1_1ST_EN[] = {
+	0xF3, 0x10,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VL1_EN[] = {
+	0xF3, 0x11,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VL2_EN[] = {
+	0xF3, 0x13,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VCI1_2ND_EN[] = {
+	0xF3, 0x33,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VL3_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VREG1_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0x01,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VGH_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0x11,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VGL_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0x31,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x02,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VMOS_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xB1,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VINT_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xF1,
+	/* DATA_ONLY, 0x71,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VBH_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xF9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_VBL_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFD,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_GAM_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFF,
+	/* DATA_ONLY, 0x73,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_SD_AMP_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFF,
+	/* DATA_ONLY, 0x73,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x80,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_GLS_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFF,
+	/* DATA_ONLY, 0x73,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x81,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_ELS_EN[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFF,
+	/* DATA_ONLY, 0x73,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x83,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+static const unsigned short SEQ_EL_ON[] = {
+	0xF3, 0x37,
+
+	DATA_ONLY, 0xFF,
+	/* DATA_ONLY, 0x73,	VMOS/VBL/VBH not used */
+	DATA_ONLY, 0x87,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x03,
+	/* DATA_ONLY, 0x02,	VMOS/VBL/VBH not used */
+	ENDDEF, 0x00
+};
+
+#define MAX_GAMMA_LEVEL		25
+#define GAMMA_TABLE_COUNT		21
+
+/* [U1] OCTA 4.27 XVGA - gamma value: 2.2 */
+
+static const unsigned short ld9040_22_300[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xB8,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xAB,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC1,
+  DATA_ONLY, 0xB4, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD1, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xC2,
+  DATA_ONLY, 0xB1,
+  DATA_ONLY, 0xBF,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xDF,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_290[] = {
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xCB,
+ DATA_ONLY, 0xC5, 
+ DATA_ONLY, 0xB8, 
+ DATA_ONLY, 0xC6, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xAA, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xC3, 
+ DATA_ONLY, 0xC2, 
+ DATA_ONLY, 0xB5, 
+ DATA_ONLY, 0xC1, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xCF, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xC7, 
+ DATA_ONLY, 0xC2, 
+ DATA_ONLY, 0xB2, 
+ DATA_ONLY, 0xBF, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xDE,
+ ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_280[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xBA, 
+  DATA_ONLY, 0xC6, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA7, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC1, 
+  DATA_ONLY, 0xB6, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC7, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xB4, 
+  DATA_ONLY, 0xBF, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xDA,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_270[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0xBB, 
+  DATA_ONLY, 0xC7, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xB6, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC1, 
+  DATA_ONLY, 0xB3, 
+  DATA_ONLY, 0xC1, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD6,
+  ENDDEF, 0x00
+};
+static const unsigned short ld9040_22_260[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCD, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xB6, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xB6, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xB4, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD5,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_250[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xBD, 
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA0, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xB8, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xB5, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD2,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_240[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xBD, 
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x9E,
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0xB8,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC1,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC9,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xB6,
+  DATA_ONLY, 0xC2,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCF,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_230[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCD,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xBD,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x9B,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xB9,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xBE,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xB6,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCB,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_220[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCD,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xBD,
+  DATA_ONLY, 0xCC,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x98,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xB9,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xBA,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC9,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xB7,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC7,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_210[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCE,
+  DATA_ONLY, 0xC7,
+  DATA_ONLY, 0xBD,
+  DATA_ONLY, 0xCC,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x95,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xBA,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xB7,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xB8,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_200[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCF,
+  DATA_ONLY, 0xC7,
+  DATA_ONLY, 0xBE,
+  DATA_ONLY, 0xCD,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x92,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xBA,
+  DATA_ONLY, 0xC7,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xB3,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCB,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xB9,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC0,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_190[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCE,
+  DATA_ONLY, 0xC8,
+  DATA_ONLY, 0xBF,
+  DATA_ONLY, 0xCD,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x8F,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC3,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xBA,
+  DATA_ONLY, 0xC8,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xAF,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xBA,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xBC,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_180[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCE,
+  DATA_ONLY, 0xC7,
+  DATA_ONLY, 0xC1,
+  DATA_ONLY, 0xCD,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x8C, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xBB,
+  DATA_ONLY, 0xC8,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xAC,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC4,
+  DATA_ONLY, 0xBB,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xB8,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_170[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCE,
+  DATA_ONLY,  0xC7,
+  DATA_ONLY,  0xC1, 
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x88, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC5,
+  DATA_ONLY, 0xBC, 
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA7,
+  DATA_ONLY,  0x00, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xBB, 
+  DATA_ONLY, 0xC7, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xB3,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_160[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCE, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xC1, 
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0x85,
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xC6, 
+  DATA_ONLY, 0xBD,
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xBB,
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xAF,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_150[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0xCF, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xC1, 
+  DATA_ONLY, 0xD1, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x82,
+  DATA_ONLY,  0x00, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xC6, 
+  DATA_ONLY, 0xBE, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x9F, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xBB,
+  DATA_ONLY, 0xC9,
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xAB,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_140[] = {
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xCF,
+ DATA_ONLY, 0xCA, 
+ DATA_ONLY, 0xC1, 
+ DATA_ONLY, 0xD0, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0x7F, 
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xC3, 
+ DATA_ONLY, 0xC6, 
+ DATA_ONLY, 0xBF, 
+ DATA_ONLY, 0xCB, 
+ DATA_ONLY, 0x00,
+ DATA_ONLY, 0x9B,
+ DATA_ONLY,  0x00, 
+ DATA_ONLY, 0xCC,
+ DATA_ONLY, 0xC8, 
+ DATA_ONLY, 0xBD,
+ DATA_ONLY,  0xC9,
+ DATA_ONLY, 0x00, 
+ DATA_ONLY, 0xA6,
+ ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_130[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC2,
+  DATA_ONLY, 0xD1, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x7B, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0xC2,
+  DATA_ONLY,  0xC7,
+  DATA_ONLY,  0xBF,
+  DATA_ONLY, 0xCC,
+  DATA_ONLY,  0x00,
+  DATA_ONLY, 0x97, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC8,
+  DATA_ONLY,  0xBE, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xA1,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_120[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD0, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xD3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x77, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0xCD, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x92, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0xCD, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xBE, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0x9C,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_110[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD0, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC3,
+  DATA_ONLY,  0xD3,
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x74,
+  DATA_ONLY,  0x00, 
+DATA_ONLY, 0xC2, 
+DATA_ONLY, 0xC8, 
+DATA_ONLY, 0xC1, 
+DATA_ONLY, 0xCE,
+DATA_ONLY,  0x00, 
+DATA_ONLY, 0x8D, 
+DATA_ONLY, 0x00,
+DATA_ONLY,  0xCD, 
+DATA_ONLY, 0xC8,
+DATA_ONLY, 0xBF,
+DATA_ONLY, 0xCC, 
+DATA_ONLY, 0x00,
+DATA_ONLY,  0x98,
+ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_100[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD1, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xD4, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x6F, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x88,
+  DATA_ONLY,  0x00,
+  DATA_ONLY,  0xCE, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0xCE, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x92,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_90[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD2, 
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xD4, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x6A, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0xC8, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xD0,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x82, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xCE, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x8B,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_80[] = {
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0xD2, 
+  DATA_ONLY, 0xCB, 
+  DATA_ONLY, 0xC6,
+  DATA_ONLY,  0xD7, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x65, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xC0, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY,  0xC3,
+  DATA_ONLY,  0xD2,
+  DATA_ONLY,  0x00, 
+  DATA_ONLY, 0x7C, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0xCE,
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0xC2, 
+  DATA_ONLY, 0xD1, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x85,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_70[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD4,
+  DATA_ONLY, 0xCD, 
+  DATA_ONLY, 0xC7,
+  DATA_ONLY, 0xD7,
+  DATA_ONLY,  0x00,
+  DATA_ONLY,  0x60, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xBC,
+  DATA_ONLY,  0xCB, 
+  DATA_ONLY, 0xC4, 
+  DATA_ONLY, 0xD3,
+  DATA_ONLY,  0x00,
+  DATA_ONLY, 0x76, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xCF, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xC3, 
+  DATA_ONLY, 0xD2, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x7F,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_60[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD5,
+  DATA_ONLY,  0xCD,
+  DATA_ONLY, 0xC8,
+  DATA_ONLY,  0xD7,
+  DATA_ONLY,  0x00,
+  DATA_ONLY,  0x5B, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xBA, 
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0xC5, 
+  DATA_ONLY, 0xD4,
+  DATA_ONLY,  0x00, 
+  DATA_ONLY, 0x71, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xD0, 
+  DATA_ONLY, 0xCC,
+  DATA_ONLY,  0xC5,
+  DATA_ONLY, 0xD3, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x78,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_50[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD6, 
+  DATA_ONLY, 0xCE, 
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xD8, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x55, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xB9, 
+  DATA_ONLY, 0xCA,
+  DATA_ONLY, 0xC6,
+  DATA_ONLY, 0xD6, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0x69,
+  DATA_ONLY,  0x00, 
+  DATA_ONLY, 0xD1,
+  DATA_ONLY,  0xCC, 
+  DATA_ONLY, 0xC6, 
+  DATA_ONLY, 0xD5, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x71,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_40[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD9,
+  DATA_ONLY,  0xCE,
+  DATA_ONLY, 0xCA,
+  DATA_ONLY,  0xD9, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x4F,
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0xB5, 
+  DATA_ONLY, 0xCA, 
+  DATA_ONLY, 0xC7, 
+  DATA_ONLY, 0xD8, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x61, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD2, 
+  DATA_ONLY, 0xCE, 
+  DATA_ONLY, 0xC6, 
+  DATA_ONLY, 0xD6, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x69,
+  ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_22_30_dimming[] = {
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD9, 
+  DATA_ONLY, 0xD3, 
+  DATA_ONLY, 0xCC, 
+  DATA_ONLY, 0xDA, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY,  0x46, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xB1, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xD9, 
+  DATA_ONLY, 0x00,
+  DATA_ONLY, 0x58, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0xD2, 
+  DATA_ONLY, 0xD0, 
+  DATA_ONLY, 0xC9, 
+  DATA_ONLY, 0xD8, 
+  DATA_ONLY, 0x00, 
+  DATA_ONLY, 0x5E,
+  ENDDEF, 0x00
+};
+
+static const unsigned short *p22Gamma_set[] = {
+	ld9040_22_30_dimming,
+	ld9040_22_40,
+	ld9040_22_70,
+	ld9040_22_90,
+	ld9040_22_100,
+	ld9040_22_110,
+	ld9040_22_120,
+	ld9040_22_130,
+	ld9040_22_140,
+	ld9040_22_150,
+	ld9040_22_160,
+	ld9040_22_170,
+	ld9040_22_180,
+	ld9040_22_190,
+	ld9040_22_200,
+	ld9040_22_210,
+	ld9040_22_220,
+	ld9040_22_230,
+	ld9040_22_240,
+	ld9040_22_250,
+	ld9040_22_260,
+	ld9040_22_270,
+	ld9040_22_280,
+	ld9040_22_290,
+	ld9040_22_300,
+};
+
+/*  OCTA 4.52 XVGA - gamma value: 1.9 */
+static const unsigned short ld9040_19_300[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xDE,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_290[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xDF,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_280[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xC9,
+	DATA_ONLY, 0xC0,
+	DATA_ONLY, 0xCD,
+	DATA_ONLY, 0x00, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xDC,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_270[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xA7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD9,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_260[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xD0,
+	DATA_ONLY, 0xCA, 
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xA5,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA,
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xC9,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0xC7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBB,
+	DATA_ONLY, 0xC7, 
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xD6,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_250[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0xCA,
+	DATA_ONLY, 0x00, 
+	DATA_ONLY,0xC4,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_240[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xCB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB,
+	DATA_ONLY, 0xC8, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_230[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xCF, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9C,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBF, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBD,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBC,
+	DATA_ONLY, 0xCA, 
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xCA,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_220[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xBF, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xCC,
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC6,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_210[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0,
+	DATA_ONLY, 0xCA,
+	DATA_ONLY, 0xC4, 
+	DATA_ONLY,0xD1,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x96,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xCB,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD,
+	DATA_ONLY, 0xC8, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC3,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_200[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x93,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBF,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_19_190[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x90,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAE,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBB,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_19_180[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xD2, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8D,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC,
+	DATA_ONLY, 0xC9, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB7,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_19_170[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2,
+	DATA_ONLY, 0xCC, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0xD3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x89,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB2,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_160[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0xD5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x86,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAF,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_150[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD1,
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xD6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB,
+	DATA_ONLY, 0xCC, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9F,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0xCF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAA,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_140[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2,
+	DATA_ONLY, 0xCD, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0xD8, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x7E,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB,
+	DATA_ONLY, 0xCC, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0xD3, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x99,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xCF,
+	DATA_ONLY, 0xCB, 
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0xD1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA5,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_130[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD3,
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xD6, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x7B,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB,
+	DATA_ONLY, 0xCD,
+	DATA_ONLY,0xC5,
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x96,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCD,
+	DATA_ONLY, 0xC3, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xA1,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_120[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD4,
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xD7, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x77,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB,
+	DATA_ONLY, 0xCD,
+	DATA_ONLY, 0xC6,
+	DATA_ONLY,0xD3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x91,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9B,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_110[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xD4,
+	DATA_ONLY, 0xCF, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xD6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x74,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC6,
+	DATA_ONLY,0xD4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8C,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x97,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_100[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xD4, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xD8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6F,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xD5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x87,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD0,
+	DATA_ONLY, 0xCD,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xD4,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x91,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_90[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD6,
+	DATA_ONLY, 0xCF, 
+	DATA_ONLY,0xCA,
+	DATA_ONLY, 0xDA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6A,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0xD7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x81,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xD6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8B,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_19_80[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD7,
+	DATA_ONLY, 0xCF,
+	DATA_ONLY, 0xCB, 
+	DATA_ONLY,0xDA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x66,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xCB,
+	DATA_ONLY,0xCF,
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xD7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7C,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD3, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xD5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x86,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_70[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD7, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0xCC,
+	DATA_ONLY,0xDA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x61,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0xD8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x77,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0xD1, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0xD6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7F,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_60[] = {
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD9, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0xDA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5D,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0xCF,
+	DATA_ONLY, 0xCB,
+	DATA_ONLY,0xD9, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x70,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xD4,
+	DATA_ONLY, 0xD0,
+	DATA_ONLY, 0xCA,
+	DATA_ONLY, 0xD8,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x78,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_50[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xD8, 
+	DATA_ONLY,0xD2,
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xDB, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x56,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA,
+	DATA_ONLY,0xD1,
+	DATA_ONLY,0xCC,
+	DATA_ONLY, 0xDB,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0x69,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xD3,
+	DATA_ONLY, 0xD1, 
+	DATA_ONLY,0xCC,
+	DATA_ONLY, 0xDA, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x70,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_40[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xDA,
+	DATA_ONLY, 0xD2,
+	DATA_ONLY, 0xD1,
+	DATA_ONLY, 0xDC,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x4F,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0xDB, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x61,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xD4, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0xCE, 
+	DATA_ONLY,0xDB, 
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0x68,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_19_30_dimming[] = {
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xDC,
+	DATA_ONLY, 0xD5,
+	DATA_ONLY, 0xD2,
+	DATA_ONLY, 0xDE,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x46,
+	DATA_ONLY,0x00,
+	DATA_ONLY, 0xC3,
+	DATA_ONLY, 0xD2,
+	DATA_ONLY, 0xCF,
+	DATA_ONLY,0xDE,
+	DATA_ONLY, 0x00, 
+	DATA_ONLY,0x58,
+	DATA_ONLY,0x00,
+	DATA_ONLY,0xD3,
+	DATA_ONLY, 0xD4,
+	DATA_ONLY, 0xCF, 
+	DATA_ONLY,0xDD,
+	DATA_ONLY, 0x00,
+	DATA_ONLY, 0x5E,
+	ENDDEF, 0x00
+};
+
+static const unsigned short *p19Gamma_set[] = {
+	ld9040_19_30_dimming,
+	ld9040_19_40,
+	ld9040_19_70,
+	ld9040_19_90,
+	ld9040_19_100,
+	ld9040_19_110,
+	ld9040_19_120,
+	ld9040_19_130,
+	ld9040_19_140,
+	ld9040_19_150,
+	ld9040_19_160,
+	ld9040_19_170,
+	ld9040_19_180,
+	ld9040_19_190,
+	ld9040_19_200,
+	ld9040_19_210,
+	ld9040_19_220,
+	ld9040_19_230,
+	ld9040_19_240,
+	ld9040_19_250,
+	ld9040_19_260,
+	ld9040_19_270,
+	ld9040_19_280,
+	ld9040_19_290,
+	ld9040_19_300,
+};
+
+
+
+static const unsigned short ld9040_sm2_22_300[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0x9F, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xA3, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCE,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_22_290[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xA8,
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA1,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0xB7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB9,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA2, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCC,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_280[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xA2,
+	DATA_ONLY,0xB7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_270[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9E,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC8,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_260[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xA8,
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9C,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA5, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xA2,
+	DATA_ONLY,0xB9,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC5,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_250[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9A,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA5, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xA4,
+	DATA_ONLY,0xB9,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC2,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_240[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x96,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xA4,
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBE,
+	ENDDEF, 0x00
+};
+static const unsigned short ld9040_sm2_22_230[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x94,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBB,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_220[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x91,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA3, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xA4,
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB7,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_210[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xBF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8E,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA3, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB4,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_200[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAB,
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8B,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA2, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xA5,
+	DATA_ONLY,0xBC,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB1,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_190[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x88,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA1, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0xBD,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9C,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAD,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_180[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x85,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA0, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0xBD,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA9,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_170[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9F, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0xBE,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x95,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xBF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA5,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_160[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7F,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9D, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xA7,
+	DATA_ONLY,0xBF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x91,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA1,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_150[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7C,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9B, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA8,
+	DATA_ONLY,0xBF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8E,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9D,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_140[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x78,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9B, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x89,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_130[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x75,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9A, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x86,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x95,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_120[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x71,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x97, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xC2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x90,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_110[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6D,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x96, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xC3,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7D,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8C,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_100[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA8, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x69,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x93, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xC3,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x79,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x87,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_90[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x65,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x92, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xC4,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x74,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_22_80[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA6, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x60,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x8E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xC6,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6F,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7C,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_70[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB4,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5B,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x8C, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0xC7,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x69,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x76,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_22_60[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0x9F, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB4,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x56,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x89, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x63,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6F,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_50[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0x9E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x50,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x88, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xAE,
+	DATA_ONLY,0xC8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5D,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x68,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_40[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0x96, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x49,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x85, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0xC9,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x55,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x60,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_22_30_dimming[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0x81, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x41,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x80, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xCB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x4C,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x56,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short *psm2_22Gamma_set[] = {
+	ld9040_sm2_22_30_dimming,
+	ld9040_sm2_22_40,
+	ld9040_sm2_22_70,
+	ld9040_sm2_22_90,
+	ld9040_sm2_22_100,
+	ld9040_sm2_22_110,
+	ld9040_sm2_22_120,
+	ld9040_sm2_22_130,
+	ld9040_sm2_22_140,
+	ld9040_sm2_22_150,
+	ld9040_sm2_22_160,
+	ld9040_sm2_22_170,
+	ld9040_sm2_22_180,
+	ld9040_sm2_22_190,
+	ld9040_sm2_22_200,
+	ld9040_sm2_22_210,
+	ld9040_sm2_22_220,
+	ld9040_sm2_22_230,
+	ld9040_sm2_22_240,
+	ld9040_sm2_22_250,
+	ld9040_sm2_22_260,
+	ld9040_sm2_22_270,
+	ld9040_sm2_22_280,
+	ld9040_sm2_22_290,
+	ld9040_sm2_22_300,
+};
+
+//////////////////////////////
+/////////////////////////////
+
+static const unsigned short ld9040_sm2_19_300[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xBF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA4,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xBE,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCF,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_19_290[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA2,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0xBF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCD,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_280[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xBF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAB, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xCA,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_270[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9E,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAA,
+	DATA_ONLY,0xC0,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC8,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_260[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9C,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAB,
+	DATA_ONLY,0xC0,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xC1, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC5,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_250[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0xC1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xC1,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_19_240[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x96,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0xC2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAC,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBE,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_230[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x94,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA9,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBB,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_220[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB3,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x91,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAD,
+	DATA_ONLY,0xC2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA6,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB7,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_210[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB4,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8F,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAE,
+	DATA_ONLY,0xC3,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA3,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB5,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_200[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xBC,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xAE,
+	DATA_ONLY,0xC3,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA0,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xAF, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xB1,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_190[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x89,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xAE,
+	DATA_ONLY,0xC4,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9C,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xAD,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_180[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x85,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC4,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA9,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_170[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xAF,
+	DATA_ONLY,0xC6,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x95,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA5,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_160[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xB7,
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7F,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC6,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x91,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xC6, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0xA1,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_150[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7C,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB1, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB0,
+	DATA_ONLY,0xC8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8D,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x9D,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_19_140[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x79,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB1,
+	DATA_ONLY,0xC8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x89,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x99,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_130[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBC, 
+	DATA_ONLY,0xBD, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x75,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xB0, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xC8,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x86,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xC8, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x95,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_120[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBB, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xB7,
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x71,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xAE, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xCA,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x81,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xC9, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x90,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_110[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6E,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xB2,
+	DATA_ONLY,0xCA,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7D,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xCA, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x8C,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_100[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xBE, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6A,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xAC, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xB3,
+	DATA_ONLY,0xCC,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x78,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x87,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_90[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xC0, 
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x66,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xAA, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xB4,
+	DATA_ONLY,0xCB,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x74,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB2, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xCB, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x82,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_80[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xC2, 
+	DATA_ONLY,0xBA,
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x61,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB4,
+	DATA_ONLY,0xCE,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6E,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x7C,
+	ENDDEF, 0x00
+};
+
+static const unsigned short ld9040_sm2_19_70[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xC3, 
+	DATA_ONLY,0xBB,
+	DATA_ONLY,0xCC, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5C,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0xA4, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0xCE,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x69,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xCD, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x75,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_19_60[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB6, 
+	DATA_ONLY,0xC4, 
+	DATA_ONLY,0xBC,
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x55,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9F, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB5,
+	DATA_ONLY,0xD0,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x63,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB8, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x6E,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short ld9040_sm2_19_50[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xBE,
+	DATA_ONLY,0xCF, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x4F,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x9B, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB6,
+	DATA_ONLY,0xCF,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5D,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB3, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xD0, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x67,
+	ENDDEF, 0x00
+};
+
+
+
+static const unsigned short ld9040_sm2_19_40[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xAD, 
+	DATA_ONLY,0xC7, 
+	DATA_ONLY,0xBF,
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x48,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x97, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xB7,
+	DATA_ONLY,0xD1,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x55,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB4, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x5F,
+	ENDDEF, 0x00
+};
+static const unsigned short ld9040_sm2_19_30_dimming[] = {
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xA7, 
+	DATA_ONLY,0xC5, 
+	DATA_ONLY,0xC0,
+	DATA_ONLY,0xD5, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x40,
+	DATA_ONLY,0x36, 
+	DATA_ONLY,0x93, 
+	DATA_ONLY,0xB7, 
+	DATA_ONLY,0xB8,
+	DATA_ONLY,0xD2,
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x4C,
+	DATA_ONLY,0x2E, 
+	DATA_ONLY,0xB5, 
+	DATA_ONLY,0xB9, 
+	DATA_ONLY,0xBA, 
+	DATA_ONLY,0xD2, 
+	DATA_ONLY,0x00, 
+	DATA_ONLY,0x56,
+	ENDDEF, 0x00
+};
+
+
+static const unsigned short *psm2_19Gamma_set[] = {
+	ld9040_sm2_19_30_dimming,
+	ld9040_sm2_19_40,
+	ld9040_sm2_19_70,
+	ld9040_sm2_19_90,
+	ld9040_sm2_19_100,
+	ld9040_sm2_19_110,
+	ld9040_sm2_19_120,
+	ld9040_sm2_19_130,
+	ld9040_sm2_19_140,
+	ld9040_sm2_19_150,
+	ld9040_sm2_19_160,
+	ld9040_sm2_19_170,
+	ld9040_sm2_19_180,
+	ld9040_sm2_19_190,
+	ld9040_sm2_19_200,
+	ld9040_sm2_19_210,
+	ld9040_sm2_19_220,
+	ld9040_sm2_19_230,
+	ld9040_sm2_19_240,
+	ld9040_sm2_19_250,
+	ld9040_sm2_19_260,
+	ld9040_sm2_19_270,
+	ld9040_sm2_19_280,
+	ld9040_sm2_19_290,
+	ld9040_sm2_19_300,
+};
+
+
+struct ld9040_panel_data matchbox_panel_data = {
+	.seq_display_set = SEQ_INIT_DISPLAY_SETTING,
+	.seq_etc_set = SEQ_INIT_ETC_SETTING,
+	.seq_user_set = SEQ_USER_SETTING,
+	.seq_panelcondition_set = SEQ_PANEL_CONDITION,
+	.seq_displayctl_set = SEQ_DISPCTL,
+	.seq_gtcon_set = SEQ_GTCON,
+	.seq_manpwr_set = SEQ_MANPWR,
+	.seq_pwrctl_set = SEQ_PWR_CTRL,
+	.seq_gamma_set1 = SEQ_GAMMA_SET1,
+	.seq_sm2_gamma_set1 =SEQ_SM2_GAMMA_SET1, 
+	.display_on = SEQ_DISPON,
+	.display_off = SEQ_DISPOFF,
+	.sleep_in = SEQ_SLPIN,
+	.sleep_out = SEQ_SLPOUT,
+	.gamma_start = SEQ_GAMMA_START,
+	.gamma_ctrl = SEQ_GAMMA_CTRL,
+	.gamma19_table = p19Gamma_set,
+	.gamma22_table = p22Gamma_set,
+	.gamma_sm2_19_table = psm2_19Gamma_set,  
+	.gamma_sm2_22_table = psm2_22Gamma_set, 
+	.acl_table = ACL_cutoff_set,
+	.elvss_table = SEQ_ELVSS_set,
+	.elvss_sm2_table = SEQ_SM2_ELVSS_set,  
+	.acl_on = SEQ_ACL_ON,
+	.elvss_on = SEQ_ELVSS_ON,
+	.gamma_table_size = ARRAY_SIZE(p22Gamma_set),
+};
+
+
Index: Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-02-23 14:39:26.759739848 +0530
+++ Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-02-23 14:39:36.190988581 +0530
@@ -70,8 +70,13 @@
 #include <linux/i2c/twl6030-gpadc.h>
 #include "board-4430sdp-wifi.h"
 
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
-#include<linux/pn544.h>
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+#include <linux/lcd.h>
+#include <linux/ld9040.h>
+#endif
+
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+#include <linux/pn544.h>
 #endif /* For NFC Support */
 
 #include <linux/atmel_mxt1386.h> /* For mXT1386 Touch */
@@ -111,6 +116,11 @@
 #define OMAP4TAB_LCD_EN_GPIO                            40
 #define OMAP4TAB_MLCD_RST_GPIO                          35
 #define OMAP4_TOUCH_EN_GPIO				54
+
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+#define OMAP4TAB_LCD_EN_GPIO                            40
+#define OMAP4TAB_MLCD_RST_GPIO                          35
+#define OMAP4_TOUCH_EN_GPIO				54
 #endif
 
 
@@ -129,7 +139,7 @@
 #define OMAP4TAB_MPU3050_INT_GPIO			45
 #define OMAP4TAB_GP2A_PS_ON				35
 #define OMAP4TAB_GP2A_PS_VOUT				33
-#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
 #define OMAP4TAB_KXSD9_INT_GPIO				122
 #define OMAP4TAB_AKM_INT_GPIO				157
 #define OMAP4TAB_MPU3050_INT_GPIO			45
@@ -171,16 +181,19 @@
 #endif  //CONFIG_SAMSUNG_PHONE_SVNET
 
 /*PN544 GPIOs*/
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
 #define OMAP4430_GPIO_NFC_IRQ		59
 #define OMAP4430_GPIO_NFC_FIRM		135
 #define OMAP4430_GPIO_NFC_VEN		136
 #endif
 
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
 extern void set_offmode_padconfig(void);
 #endif
 
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+extern struct ld9040_panel_data matchbox_panel_data;
+#endif
 static void omap4_usb_cb(u8 attached);
 static void omap4_charger_cb(u8 attached);
 static void omap4_jig_cb(u8 attached);
@@ -251,7 +264,8 @@
         KEY(4, 0, KEY_VOLUMEUP),        //Volume up
         KEY(3, 3, KEY_VOLUMEDOWN),      //volume down
 #endif
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 4 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 4 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || \
+	CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
         KEY(2, 1, KEY_VOLUMEUP),        //Volume up
         KEY(1, 1, KEY_VOLUMEDOWN),      //volume down
 #endif
@@ -592,7 +606,154 @@
                 .max_speed_hz           = 375000,
         },
 };
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+static int ld9040_panel_enable_lcd(struct omap_dss_device *dssdev)
+{
+        return 0;
+}
+
+static void ld9040_panel_disable_lcd(struct omap_dss_device *dssdev)
+{
+
+       	return;
+
+ }
+
+static struct omap_dss_device omap4tab_lcd_device = {
+        .name                   = "lcd",
+        .driver_name            = "ld9040_panel",
+        .type                   = OMAP_DISPLAY_TYPE_DPI,
+        .phy.dpi.data_lines     = 24,
+        .platform_enable        = ld9040_panel_enable_lcd,
+        .platform_disable       = ld9040_panel_disable_lcd,
+       .channel                = OMAP_DSS_CHANNEL_LCD2,
+};
+
+static int lcd_power_on(struct lcd_device *ld, int enable)
+{
+    int lcd_enable_gpio = -1;
+    int err;
+    lcd_enable_gpio = OMAP4TAB_LCD_EN_GPIO;
+ 
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+
+    err = gpio_request(lcd_enable_gpio, "LCD_EN");
+    if (err) {
+        printk(KERN_ERR "failed to request MLCD_RST for "
+                "lcd reset control\n");
+        return err;
+    }
+
+    if (enable) {
+		gpio_direction_output(lcd_enable_gpio, 1);
+	} else {
+    	gpio_direction_output(lcd_enable_gpio, 0);
+	}
+
+    gpio_free(lcd_enable_gpio);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+    return 1;
+}
+static int reset_lcd(struct lcd_device *ld)
+{
+    int reset_gpio = -1;
+    int err;
+    reset_gpio = OMAP4TAB_MLCD_RST_GPIO;
+	
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+
+    err = gpio_request(reset_gpio, "MLCD_RST");
+    if (err) {
+        printk(KERN_ERR "failed to request MLCD_RST for "
+                "lcd reset control\n");
+        return err;
+    }
+
+    mdelay(10);
+    gpio_direction_output(reset_gpio, 0);
+    mdelay(10);
+    gpio_direction_output(reset_gpio, 1);
+
+    gpio_free(reset_gpio);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+    return 1;
+}
 
+static int lcd_gpio_cfg_earlysuspend(struct lcd_device *ld)
+{
+    int reset_gpio = -1;
+    int err;
+#if 0
+    reset_gpio = S5PV310_GPY4(5);
+
+    err = gpio_request(reset_gpio, "MLCD_RST");
+    if (err) {
+        printk(KERN_ERR "failed to request MLCD_RST for "
+                "lcd reset control\n");
+        return err;
+    }
+
+    mdelay(10);
+    gpio_direction_output(reset_gpio, 0);
+
+    gpio_free(reset_gpio);
+#endif
+    return 0;
+}
+static int lcd_gpio_cfg_lateresume(struct lcd_device *ld)
+{
+#if 0	
+    /* MLCD_RST */
+    s3c_gpio_cfgpin(S5PV310_GPY4(5), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY4(5), S3C_GPIO_PULL_NONE);
+
+    /* LCD_nCS */
+    s3c_gpio_cfgpin(S5PV310_GPY4(3), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY4(3), S3C_GPIO_PULL_NONE);
+    /* LCD_SCLK */
+    s3c_gpio_cfgpin(S5PV310_GPY3(1), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY3(1), S3C_GPIO_PULL_NONE);
+    /* LCD_SDI */
+    s3c_gpio_cfgpin(S5PV310_GPY3(3), S3C_GPIO_OUTPUT);
+    s3c_gpio_setpull(S5PV310_GPY3(3), S3C_GPIO_PULL_NONE);
+#endif
+    return 0;
+}
+
+/*   : Fix me regarding ADC kernel Panic
+static void lcd_register_callback(void* function)
+{
+    sec_battery_cbs.lcd_set_adc_value = function;
+}
+*/
+
+
+static struct lcd_platform_data ld9040_platform_data = {
+    .reset          = reset_lcd,
+    .power_on       = lcd_power_on,
+    .gpio_cfg_earlysuspend  = lcd_gpio_cfg_earlysuspend,
+    .gpio_cfg_lateresume    = lcd_gpio_cfg_lateresume,
+/*   : Fix me regarding ADC kernel Panic
+    .register_cb    = lcd_register_callback,
+*/
+    /* it indicates whether lcd panel is enabled from u-boot. */
+    .lcd_enabled        = 0,
+    .reset_delay        = 20,   /* 20ms */
+    .power_on_delay     = 20,   /* 20ms */
+    .power_off_delay    = 200,  /* 200ms */
+    .sleep_in_delay     = 160,
+    .pdata          = &matchbox_panel_data,
+};
+
+static struct spi_board_info omap4tab_spi_board_info[] __initdata = {
+        {
+                .modalias               = "ld9040",
+                .bus_num                = 4,
+                .chip_select            = 0,
+                .max_speed_hz           = 375000,
+                .platform_data		= (void *)&ld9040_platform_data,
+        },
+};
 #else
 /*TBD */
 #endif
@@ -1453,7 +1614,7 @@
 	}
 };
 #endif
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
 static struct pn544_i2c_platform_data pn544_data = {
          .irq_gpio = OMAP4430_GPIO_NFC_IRQ,
          .ven_gpio = OMAP4430_GPIO_NFC_VEN,
@@ -1568,6 +1729,28 @@
               .platform_data = &pn544_data,
                .irq = OMAP_GPIO_IRQ(OMAP4430_GPIO_NFC_IRQ),
         },
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6 )
+        {
+                I2C_BOARD_INFO(SENSOR_MPU_NAME, 0x68),
+                .irq = OMAP_GPIO_IRQ(OMAP4TAB_MPU3050_INT_GPIO),
+                .platform_data = &mpu_data,
+        },
+        {
+                I2C_BOARD_INFO("gp2a",0x44),
+                .platform_data = &gp2a_pdata,
+
+        },
+        {
+               I2C_BOARD_INFO("fsa9480", (0x4A >> 1)),
+               .platform_data = &omap4_fsa9480_pdata,
+               .irq = OMAP_GPIO_IRQ(OMAP4430_GPIO_JACK_NINT),
+        },
+        {
+               I2C_BOARD_INFO("pn544",0x2b),
+               .platform_data = &pn544_data,
+               .irq = OMAP_GPIO_IRQ(OMAP4430_GPIO_NFC_IRQ),
+        },
+
 #endif
 
 };
@@ -1846,6 +2029,22 @@
 static void omap4tab_vib_motor_init(void)
 {
 }
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
+static void __init omap4tab_display_init(void)
+{
+}
+static void omap4tab_touch_init(void)
+{
+	printk("[SHANKAR] %s[%d] Entry \n", __func__, __LINE__);
+	gpio_request(OMAP4_TOUCH_EN_GPIO, "TOUCH ENable GPIO");
+	gpio_direction_output(OMAP4_TOUCH_EN_GPIO, 1);
+	msleep(250);
+	printk("[SHANKAR] %s[%d] exit \n", __func__, __LINE__);
+	
+}
+static void omap4tab_vib_motor_init(void)
+{
+}
 #else
 #endif
 static void enable_board_wakeup_source(void)
@@ -2182,7 +2381,9 @@
 	omap_voltage_init_vc(&vc_config);
 
 	samsung_omap4_pwr_key_irq_init();
-#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 4 || CONFIG_SAMSUNG_OMAP4_TAB_REV == 5)
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 4 || \
+	CONFIG_SAMSUNG_OMAP4_TAB_REV == 5 || \
+	CONFIG_SAMSUNG_OMAP4_TAB_REV == 6)
 	spi_register_board_info(omap4tab_spi_board_info,
                                 ARRAY_SIZE(omap4tab_spi_board_info));
 #endif
Index: Kernel/arch/arm/mach-omap2/Makefile
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/Makefile	2011-02-23 14:39:26.769740701 +0530
+++ Kernel/arch/arm/mach-omap2/Makefile	2011-02-23 14:39:36.190988581 +0530
@@ -190,7 +190,9 @@
 obj-$(CONFIG_MACH_OMAP4_TAB_10_1)	+= board-omap4tab10-1.o \
 					   board-4430univ-sensors.o \
 					   hsmmc.o
-
+ifeq ($(CONFIG_SAMSUNG_OMAP4_TAB_REV),6)
+						obj-$(CONFIG_MACH_OMAP4_TAB_10_1)   += matchbox-panel.o
+endif	
 obj-$(CONFIG_MACH_OMAP4_PANDA)		+= board-omap4panda.o \
 					   hsmmc.o
 obj-$(CONFIG_TIWLAN_SDIO)               += board-4430sdp-wifi.o
Index: Kernel/drivers/video/omap2/displays/Kconfig
===================================================================
--- Kernel.orig/drivers/video/omap2/displays/Kconfig	2011-02-23 14:39:26.719736230 +0530
+++ Kernel/drivers/video/omap2/displays/Kconfig	2011-02-23 14:39:36.190988581 +0530
@@ -78,4 +78,10 @@
         tristate "AMS353 Panel"
         help
           LCD Panel used in the OMAP4
+config PANEL_LD9040
+        tristate "LD9040 Panel"
+		select LCD_CLASS_DEVICE
+		select SPI
+        help
+          This enables support for Samsung LD9040 LCD panel
 endmenu
Index: Kernel/drivers/video/omap2/displays/Makefile
===================================================================
--- Kernel.orig/drivers/video/omap2/displays/Makefile	2011-02-23 14:39:26.729739247 +0530
+++ Kernel/drivers/video/omap2/displays/Makefile	2011-02-23 14:39:36.190988581 +0530
@@ -12,4 +12,5 @@
 obj-$(CONFIG_PANEL_SAMSUNG_LTN121AT) += panel-samsung-ltn121at.o
 obj-$(CONFIG_PANEL_SAMSUNG_D10E50T6332) += panel-samsung-D10E50T6332.o cmc623.o
 obj-$(CONFIG_PANEL_AMS353) += panel-ams353.o
+obj-$(CONFIG_PANEL_LD9040) += panel-ld9040.o
 
Index: Kernel/include/linux/lcd.h
===================================================================
--- Kernel.orig/include/linux/lcd.h	2011-02-23 14:39:26.709740266 +0530
+++ Kernel/include/linux/lcd.h	2011-02-23 14:39:36.190988581 +0530
@@ -75,7 +75,11 @@
 	/* on or off to lcd panel. if 'enable' is 0 then
 	   lcd power off and 1, lcd power on. */
 	int (*power_on)(struct lcd_device *ld, int enable);
-
+	int (*gpio_cfg_earlysuspend)(struct lcd_device *ld);
+	int (*gpio_cfg_lateresume)(struct lcd_device *ld);
+/*   : Fix me regarding ADC kernel Panic
+	void (*register_cb)(void*);
+*/
 	/* it indicates whether lcd panel was enabled
 	   from bootloader or not. */
 	int lcd_enabled;
@@ -87,6 +91,8 @@
 	unsigned int power_on_delay;
 	/* stable time needing to become lcd power off. */
 	unsigned int power_off_delay;
+	/*stable time needing to become sleep in mode after sleep out mode. */
+	unsigned int sleep_in_delay;
 
 	/* it could be used for any purpose. */
 	void *pdata;
Index: Kernel/arch/arm/configs/android_omap4tab_rev06_defconfig
===================================================================
--- Kernel.orig/arch/arm/configs/android_omap4tab_rev06_defconfig	2011-02-23 14:39:26.749735923 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev06_defconfig	2011-02-23 14:39:55.031015026 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35.7
-# Sat Feb 19 19:42:41 2011
+# Wed Feb 23 14:12:02 2011
 #
 CONFIG_ARM=y
 CONFIG_SYS_SUPPORTS_APM_EMULATION=y
@@ -805,13 +805,25 @@
 CONFIG_OPTICAL=y
 # CONFIG_OPTICAL_ISL29023 is not set
 CONFIG_OPTICAL_GP2A=y
-CONFIG_ACCEL=y
-CONFIG_ACCEL_KXSD9=y
-CONFIG_COMPASS=y
-# CONFIG_COMPASS_AK8973B is not set
-CONFIG_COMPASS_YAS530=y
-CONFIG_GYRO=y
-CONFIG_GYRO_MPU3050=y
+# CONFIG_ACCEL is not set
+# CONFIG_COMPASS is not set
+# CONFIG_GYRO is not set
+
+#
+# Motion Sensors Support
+#
+# CONFIG_MPU_NONE is not set
+CONFIG_SENSORS_MPU3050=y
+# CONFIG_SENSORS_MPU6000 is not set
+# CONFIG_SENSORS_ACCELEROMETER_NONE is not set
+CONFIG_SENSORS_KXSD9=y
+# CONFIG_SENSORS_COMPASS_NONE is not set
+# CONFIG_SENSORS_YAS529 is not set
+CONFIG_SENSORS_YAS530=y
+# CONFIG_SENSORS_HSCDTD00XX is not set
+CONFIG_SENSORS_PRESSURE_NONE=y
+# CONFIG_SENSORS_BMA085 is not set
+# CONFIG_SENSORS_MPU_DEBUG is not set
 CONFIG_MISC_DEVICES=y
 # CONFIG_AD525X_DPOT is not set
 CONFIG_ANDROID_PMEM=y
@@ -822,7 +834,7 @@
 # CONFIG_SENSORS_TSL2550 is not set
 CONFIG_TWL6030_POWER_OFF=y
 # CONFIG_SENSORS_BH1780 is not set
-CONFIG_SENSORS_AK8975=y
+# CONFIG_SENSORS_AK8975 is not set
 # CONFIG_TWL6040_VIB is not set
 # CONFIG_DS1682 is not set
 # CONFIG_TI_DAC7512 is not set
@@ -1461,7 +1473,8 @@
 # CONFIG_PANEL_NEC_NL8048HL11_01B is not set
 # CONFIG_PANEL_TOPPOLY_TDO35S is not set
 # CONFIG_PANEL_TPO_TD043MTEA1 is not set
-CONFIG_PANEL_AMS353=y
+# CONFIG_PANEL_AMS353 is not set
+CONFIG_PANEL_LD9040=y
 CONFIG_BACKLIGHT_LCD_SUPPORT=y
 CONFIG_LCD_CLASS_DEVICE=y
 # CONFIG_LCD_L4F00242T03 is not set
