From 3c2409dd4a36d6b3884245e4ad3a99665efeaccc Mon Sep 17 00:00:00 2001
From: Deepak K <deepak.k@ti.com>
Date: Wed, 23 Mar 2011 17:14:51 -0500
Subject: OMAP : Serial : Remove CTS Padconf to board file

This patch moves the CTS pad config values to the baord file. The
respective platform, would require the board file to adpated
according to the board requirements.

Change-Id: I4794baeb588ae974053ea5e8b3ca48dec0a2f83f
Signed-off-by: Deepak K <deepak.k@ti.com>
---
 arch/arm/mach-omap2/board-4430sdp.c           |    4 +
 arch/arm/mach-omap2/serial.c                  |   18 +++--
 arch/arm/plat-omap/include/plat/omap-serial.h |    3 +
 drivers/serial/omap-serial.c                  |  101 ++++++++++++++----------
 4 files changed, 77 insertions(+), 49 deletions(-)

Index: kernel/arch/arm/mach-omap2/board-4430sdp.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/board-4430sdp.c	2011-04-08 15:14:58.117122876 +0900
+++ kernel/arch/arm/mach-omap2/board-4430sdp.c	2011-04-08 15:20:17.257127710 +0900
@@ -1418,6 +1418,7 @@
 		.plat_hold_wakelock = NULL,
 		.rts_padconf	= 0,
 		.rts_override	= 0,
+		.cts_padconf	= 0,
 		.padconf	= OMAP4_CTRL_MODULE_PAD_SDMMC1_CMD_OFFSET,
 		.padconf_wake_ev = 0,
 		.wk_mask	= 0,
@@ -1432,6 +1433,7 @@
 		.plat_hold_wakelock = plat_hold_wakelock,
 		.rts_padconf	= OMAP4_CTRL_MODULE_PAD_UART2_RTS_OFFSET,
 		.rts_override	= 0,
+		.cts_padconf	= OMAP4_CTRL_MODULE_PAD_UART2_CTS_OFFSET,
 		.padconf	= OMAP4_CTRL_MODULE_PAD_UART2_RX_OFFSET,
 		.padconf_wake_ev =
 			OMAP4_CTRL_MODULE_PAD_CORE_PADCONF_WAKEUPEVENT_3,
@@ -1451,6 +1453,7 @@
 		.plat_hold_wakelock = plat_hold_wakelock,
 		.rts_padconf	= 0,
 		.rts_override	= 0,
+		.cts_padconf	= 0,
 		.padconf	= OMAP4_CTRL_MODULE_PAD_UART3_RX_IRRX_OFFSET,
 		.padconf_wake_ev =
 			OMAP4_CTRL_MODULE_PAD_CORE_PADCONF_WAKEUPEVENT_4,
@@ -1470,6 +1473,7 @@
 		.plat_hold_wakelock = NULL,
 		.rts_padconf	= 0,
 		.rts_override	= 0,
+		.cts_padconf	= 0,
 		.padconf	= OMAP4_CTRL_MODULE_PAD_UART4_RX_OFFSET,
 		.padconf_wake_ev =
 			OMAP4_CTRL_MODULE_PAD_CORE_PADCONF_WAKEUPEVENT_4,
Index: kernel/arch/arm/mach-omap2/serial.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/serial.c	2011-04-08 12:32:40.447116605 +0900
+++ kernel/arch/arm/mach-omap2/serial.c	2011-04-08 15:20:17.277122793 +0900
@@ -967,14 +967,15 @@
 	omap_up.idle_timeout = platform_data->idle_timeout;
 	omap_up.plat_hold_wakelock = platform_data->plat_hold_wakelock;
 
-	if (cpu_is_omap44xx()) {
-		uart->rts_padconf = platform_data->rts_padconf;
-		uart->rts_override = platform_data->rts_override;
-
-		uart->padconf = platform_data->padconf;
-		uart->padconf_wake_ev = platform_data->padconf_wake_ev;
-		uart->wk_mask = platform_data->wk_mask;
-	}
+	uart->rts_padconf = platform_data->rts_padconf;
+	uart->rts_override = platform_data->rts_override;
+
+	uart->padconf = platform_data->padconf;
+	uart->padconf_wake_ev = platform_data->padconf_wake_ev;
+	uart->wk_mask = platform_data->wk_mask;
+
+	omap_up.cts_padconf = platform_data->cts_padconf;
+	omap_up.cts_padvalue = 0;
 
 	pdata = &omap_up;
 	pdata_size = sizeof(struct omap_uart_port_info);
@@ -1032,6 +1033,9 @@
 	struct omap_uart_state *uart;
 	unsigned int count = 0;
 
+	/* The Platform Specific Initialisations come from the baord file
+	 * which would initialise it to the platfrom requirement.
+	 */
 	list_for_each_entry(uart, &uart_list, node) {
 		omap_serial_init_port(uart->num, &platform_data[count]);
 		count++;
Index: kernel/arch/arm/plat-omap/include/plat/omap-serial.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/omap-serial.h	2011-04-08 12:32:41.147079786 +0900
+++ kernel/arch/arm/plat-omap/include/plat/omap-serial.h	2011-04-08 15:20:17.277122793 +0900
@@ -122,6 +122,9 @@
 	u16			padconf_wake_ev;
 	u32			wk_mask;
 	u16			padconf;
+
+	u16			cts_padconf;
+	u32			cts_padvalue;
 };
 
 struct uart_omap_dma {
Index: kernel/drivers/serial/omap-serial.c
===================================================================
--- kernel.orig/drivers/serial/omap-serial.c	2011-04-08 12:33:05.148330413 +0900
+++ kernel/drivers/serial/omap-serial.c	2011-04-08 15:30:03.708372200 +0900
@@ -51,7 +51,7 @@
 static void uart_tx_dma_callback(int lch, u16 ch_status, void *data);
 static void serial_omap_rxdma_poll(unsigned long uart_no);
 static int serial_omap_start_rxdma(struct uart_omap_port *up);
-static int omap4_uart_cts_wakeup(int uart_no, int state);
+static int omap_uart_cts_wakeup(int uart_no, int state);
 
 static inline unsigned int serial_in(struct uart_omap_port *up, int offset)
 {
@@ -151,9 +151,14 @@
 	up->port.read_status_mask &= ~UART_LSR_DR;
 	serial_out(up, UART_IER, up->ier);
 
-	/*Disable the UART CTS wakeup for UART1,UART2*/
-	if ((!port->suspended && ((up->pdev->id  - 1) == UART2)))
-		omap4_uart_cts_wakeup((up->pdev->id - 1), 0);
+	/*Disable the UART CTS wakeup for UARTs, Only for UARTs
+	 * Which have the platform Data defined for CTS wake-up
+	 * In the Board File. Else even if this function gets
+	 * called it wont have any impact on the register values
+	 * for MUX configuration.
+	 */
+	if (!port->suspended)
+		omap_uart_cts_wakeup(up->pdev->id, 0);
 
 }
 
@@ -497,8 +502,11 @@
 	unsigned long flags = 0;
 	int retval;
 
-	if ((up->pdev->id  - 1) == UART2)
-		omap4_uart_cts_wakeup((up->pdev->id - 1), 1);
+	/* Enable the Wake-up on CTS for a UART. The UART for
+	 * which is defined in board file, would get enabled.
+	 */
+	omap_uart_cts_wakeup(up->pdev->id, 1);
+
 	/*
 	 * Allocate the IRQ
 	 */
@@ -1436,14 +1444,19 @@
 	},
 };
 
-int omap4_uart_cts_wakeup(int uart_no, int state)
+int omap_uart_cts_wakeup(int uart_no, int state)
 {
 	struct uart_omap_port *up = ui[uart_no];
-	u32 padconf_cts;
+	struct omap_uart_port_info *omap_up_info = up->pdev->dev.platform_data;
+	u16 offset = 0; /* 32-bit align */
 	u32 v;
+	u32 padconf_cts;
 
-	if (unlikely(uart_no < 0 || uart_no > OMAP_MAX_HSUART_PORTS)) {
-		dev_dbg(up->port.dev, "Bad uart id %d\n", uart_no);
+	/* No CTS based Wake-ups are enabled. If enabled this would
+	 * hold the CTS Pad Conf Register offset.
+	 */
+	if (!omap_up_info->cts_padconf) {
+		dev_dbg(up->port.dev, "No CTS wake-up for UART %d\n", uart_no);
 		return -EPERM;
 	}
 
@@ -1492,7 +1505,7 @@
 	}
 	return 0;
 }
-EXPORT_SYMBOL(omap4_uart_cts_wakeup);
+EXPORT_SYMBOL(omap_uart_cts_wakeup);
 
 /**
  * omap_uart_active() - Check if any ports managed by this
