From: Mike Turquette <mturquette@ti.com>
Date: Thu, 21 Apr 2011 04:11:39 +0000 (-0500)
Subject: my take on paul's patch 09/09
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=414f893f3b2c99e0c8ffb2f0371f6d1552e9bdd9

my take on paul's patch 09/09

Change-Id: I4299a6d22735f25083d66e1602c346a54b40a79d
Signed-off-by: Mike Turquette <mturquette@ti.com>
---

Index: kernel/arch/arm/mach-omap2/clkt_clksel.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/clkt_clksel.c	2011-05-21 00:24:21.677190189 +0900
+++ kernel/arch/arm/mach-omap2/clkt_clksel.c	2011-05-21 00:41:00.748347792 +0900
@@ -93,7 +93,7 @@
  * success (in this latter case, the corresponding register bitfield
  * value is passed back in the variable pointed to by @field_val)
  */
-static u8 _get_div_and_fieldval(struct clk *src_clk, struct clk *clk,
+u8 _get_div_and_fieldval(struct clk *src_clk, struct clk *clk,
 				u32 *field_val)
 {
 	const struct clksel *clks;
@@ -404,6 +404,42 @@
 }
 
 /**
+ * omap2_clksel_speculate() - recalc rate from speculative parent clock rate
+ * @clk: struct clk * for the clock whose rate we are recalculating
+ * @parent_rate: speculative parent clock rate
+ *
+ * This function takes a speculative or ficticious parent clock rate and
+ * recalculates the rate for the clock in question based off of it.  Useful
+ * for clock rate change pre-notifiers where we don't want to actually change
+ * the clksel, or even the 'rate' field of a clk struct.
+ */
+unsigned long omap2_clksel_speculate(struct clk *clk, unsigned long parent_rate)
+{
+	unsigned long rate;
+	u32 div = 0;
+
+	/* check for fixed divisor */
+	if (clk->fixed_div)
+		return parent_rate / clk->fixed_div;
+
+	/* does clock follow parent rate? */
+	if (!clk->clksel)
+		return parent_rate;
+
+	/* clock must use clksel */
+	div = _read_divisor(clk);
+	if (div == 0)
+		return clk->rate;
+
+	rate = parent_rate / div;
+
+	pr_debug("clock: %s: recalc'd rate is %ld (div %d)\n", clk->name,
+		 rate, div);
+
+	return rate;
+}
+
+/**
  * omap2_clksel_round_rate() - find rounded rate for the given clock and rate
  * @clk: OMAP struct clk to use
  * @target_rate: desired clock rate
Index: kernel/arch/arm/mach-omap2/clock.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/clock.c	2011-05-21 00:24:21.677190189 +0900
+++ kernel/arch/arm/mach-omap2/clock.c	2011-05-21 00:41:00.748347792 +0900
@@ -367,6 +367,29 @@
 	return clk->rate;
 }
 
+/* given a clock and its new parent, predict the new rate for clock */
+long omap2_clk_round_rate_parent(struct clk *clk, struct clk *new_parent)
+{
+	u32 field_val;
+	u8 parent_div;
+	long rate;
+
+	if (!clk->clksel || !new_parent)
+		return -EINVAL;
+
+	/*parent_div = _omap2_clksel_get_src_field(new_parent, clk, &field_val);*/
+	parent_div = _get_div_and_fieldval(new_parent, clk, &field_val);
+	if (!parent_div)
+		return -EINVAL;
+
+	/* CLKSEL clocks follow their parents' rates, divided by a divisor */
+	rate = new_parent->rate;
+	if (parent_div > 0)
+		rate /= parent_div;
+
+	return rate;
+}
+
 /* Set the clock rate for a clock source */
 int omap2_clk_set_rate(struct clk *clk, unsigned long rate)
 {
@@ -520,6 +543,7 @@
 	.clk_enable		= omap2_clk_enable,
 	.clk_disable		= omap2_clk_disable,
 	.clk_round_rate		= omap2_clk_round_rate,
+	.clk_round_rate_parent	= omap2_clk_round_rate_parent,
 	.clk_set_rate		= omap2_clk_set_rate,
 	.clk_set_parent		= omap2_clk_set_parent,
 	.clk_disable_unused	= omap2_clk_disable_unused,
Index: kernel/arch/arm/mach-omap2/clock.h
===================================================================
--- kernel.orig/arch/arm/mach-omap2/clock.h	2011-05-21 00:24:21.677190189 +0900
+++ kernel/arch/arm/mach-omap2/clock.h	2011-05-21 00:41:00.748347792 +0900
@@ -54,6 +54,7 @@
 int omap2_clk_enable(struct clk *clk);
 void omap2_clk_disable(struct clk *clk);
 long omap2_clk_round_rate(struct clk *clk, unsigned long rate);
+long omap2_clk_round_rate_parent(struct clk *clk, struct clk *parent);
 int omap2_clk_set_rate(struct clk *clk, unsigned long rate);
 int omap2_clk_set_parent(struct clk *clk, struct clk *new_parent);
 int omap2_dpll_set_rate_tolerance(struct clk *clk, unsigned int tolerance);
@@ -85,6 +86,9 @@
 long omap2_clksel_round_rate(struct clk *clk, unsigned long target_rate);
 int omap2_clksel_set_rate(struct clk *clk, unsigned long rate);
 int omap2_clksel_set_parent(struct clk *clk, struct clk *new_parent);
+/* XXX hack for clock notifiers */
+u8 _get_div_and_fieldval(struct clk *src_clk, struct clk *clk,
+		u32 *field_val);
 
 u32 omap2_get_dpll_rate(struct clk *clk);
 void omap2_init_dpll_parent(struct clk *clk);
Index: kernel/arch/arm/plat-omap/clock.c
===================================================================
--- kernel.orig/arch/arm/plat-omap/clock.c	2011-05-21 00:40:58.249596868 +0900
+++ kernel/arch/arm/plat-omap/clock.c	2011-05-21 00:41:00.748347792 +0900
@@ -33,6 +33,68 @@
 
 static struct clk_functions *arch_clock;
 
+/**
+ * omap_clk_notify - call clk notifier chain
+ * @clk: struct clk * that is changing rate
+ * @msg: clk notifier type (i.e., CLK_POST_RATE_CHANGE; see mach/clock.h)
+ * @old_rate: old rate
+ * @new_rate: new rate
+ *
+ * Triggers a notifier call chain on the post-clk-rate-change notifier
+ * for clock 'clk'.  Passes a pointer to the struct clk and the
+ * previous and current rates to the notifier callback.  Intended to be
+ * called by internal clock code only.  No return value.
+ */
+static void omap_clk_notify(struct clk *clk, unsigned long msg,
+		unsigned long old_rate, unsigned long new_rate)
+{
+	struct clk_notifier *cn;
+	struct clk_notifier_data cnd;
+
+	cnd.clk = clk;
+	cnd.old_rate = old_rate;
+	cnd.new_rate = new_rate;
+
+	list_for_each_entry(cn, &clk_notifier_list, node) {
+		if (cn->clk == clk) {
+			blocking_notifier_call_chain(&cn->notifier_head, msg,
+					&cnd);
+			break;
+		}
+	}
+}
+
+/**
+ * omap_clk_notify_downstream - trigger clock change notifications
+ * @clk: struct clk * to start the notifications with
+ * @msg: notifier msg - see "Clk notifier callback types"
+ * @param2: (not used - any u8 will do)
+ *
+ * Call clock change notifiers on clocks starting with @clk and including
+ * all of @clk's downstream children clocks.  Returns NOTIFY_DONE.
+ */
+static int omap_clk_notify_downstream(struct clk *clk, unsigned long msg,
+		unsigned long new_rate)
+{
+	unsigned long new_child_rate;
+	struct clk *child_clk;
+
+	/* send out notification for this clock */
+	if (clk->notifier_count)
+		omap_clk_notify(clk, msg, clk->rate, new_rate);
+
+	list_for_each_entry(child_clk, &clk->children, sibling) {
+		if (child_clk->speculate) {
+			new_child_rate =
+				child_clk->speculate(child_clk, new_rate);
+			omap_clk_notify_downstream(child_clk, msg,
+					new_child_rate);
+		}
+	}
+
+	return NOTIFY_DONE;
+}
+
 /*
  * Standard clock functions defined in include/linux/clk.h
  */
@@ -117,11 +179,16 @@
 int clk_set_rate(struct clk *clk, unsigned long rate)
 {
 	unsigned long flags;
+	unsigned long new_rate;
+	unsigned long msg;
 	int ret = -EINVAL;
 
 	if (clk == NULL || IS_ERR(clk))
 		return ret;
 
+	new_rate = clk->round_rate(clk, rate);
+	omap_clk_notify_downstream(clk, CLK_PRE_RATE_CHANGE, new_rate);
+
 	spin_lock_irqsave(&clockfw_lock, flags);
 	if (arch_clock->clk_set_rate)
 		ret = arch_clock->clk_set_rate(clk, rate);
@@ -132,6 +199,10 @@
 	}
 	spin_unlock_irqrestore(&clockfw_lock, flags);
 
+	msg = (ret) ? CLK_ABORT_RATE_CHANGE : CLK_POST_RATE_CHANGE;
+
+	omap_clk_notify_downstream(clk, msg, clk->rate);
+
 	return ret;
 }
 EXPORT_SYMBOL(clk_set_rate);
@@ -139,11 +210,16 @@
 int clk_set_parent(struct clk *clk, struct clk *parent)
 {
 	unsigned long flags;
+	unsigned long new_rate;
+	unsigned long msg;
 	int ret = -EINVAL;
 
 	if (clk == NULL || IS_ERR(clk) || parent == NULL || IS_ERR(parent))
 		return ret;
 
+	new_rate = arch_clock->clk_round_rate_parent(clk, parent);
+	omap_clk_notify_downstream(clk, CLK_PRE_RATE_CHANGE, new_rate);
+
 	spin_lock_irqsave(&clockfw_lock, flags);
 	if (clk->usecount == 0) {
 		if (arch_clock->clk_set_parent)
@@ -157,6 +233,10 @@
 		ret = -EBUSY;
 	spin_unlock_irqrestore(&clockfw_lock, flags);
 
+	msg = (ret) ? CLK_ABORT_RATE_CHANGE : CLK_POST_RATE_CHANGE;
+
+	omap_clk_notify_downstream(clk, msg, clk->rate);
+
 	return ret;
 }
 EXPORT_SYMBOL(clk_set_parent);
Index: kernel/arch/arm/plat-omap/include/plat/clock.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/clock.h	2011-05-21 00:40:58.249596868 +0900
+++ kernel/arch/arm/plat-omap/include/plat/clock.h	2011-05-21 00:41:00.748347792 +0900
@@ -293,6 +293,7 @@
 	unsigned long		rate;
 	void __iomem		*enable_reg;
 	unsigned long		(*recalc)(struct clk *);
+	unsigned long		(*speculate)(struct clk *, unsigned long);
 	int			(*set_rate)(struct clk *, unsigned long);
 	long			(*round_rate)(struct clk *, unsigned long);
 	void			(*init)(struct clk *);
@@ -323,6 +324,8 @@
 	int		(*clk_enable)(struct clk *clk);
 	void		(*clk_disable)(struct clk *clk);
 	long		(*clk_round_rate)(struct clk *clk, unsigned long rate);
+	long		(*clk_round_rate_parent)(struct clk *clk,
+						 struct clk *parent);
 	int		(*clk_set_rate)(struct clk *clk, unsigned long rate);
 	int		(*clk_set_parent)(struct clk *clk, struct clk *parent);
 	void		(*clk_allow_idle)(struct clk *clk);
