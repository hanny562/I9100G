Index: Kernel/include/sound/soc.h
===================================================================
--- Kernel.orig/include/sound/soc.h	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/include/sound/soc.h	2011-01-21 01:22:57.432072502 +0530
@@ -627,6 +627,7 @@
 
 	struct list_head list;
 	struct mutex mutex;
+	struct mutex dapm_mutex;
 
 	bool instantiated;
 
Index: Kernel/sound/soc/omap/omap-mcpdm.c
===================================================================
--- Kernel.orig/sound/soc/omap/omap-mcpdm.c	2011-01-21 01:22:57.412072087 +0530
+++ Kernel/sound/soc/omap/omap-mcpdm.c	2011-01-21 01:22:57.432072502 +0530
@@ -71,7 +71,7 @@
 	struct delayed_work delayed_abe_work;
 #endif
 
-	spinlock_t lock;
+	struct mutex mutex;
 	struct omap_mcpdm_platform_data *pdata;
 	struct omap_mcpdm_link *downlink;
 	struct omap_mcpdm_link *uplink;
@@ -410,17 +410,17 @@
 
 	pm_runtime_get_sync(&pdev->dev);
 
-	spin_lock(&mcpdm->lock);
+	mutex_lock(&mcpdm->mutex);
 
 	if (!mcpdm->free) {
 		dev_err(mcpdm->dev, "McPDM interface is in use\n");
-		spin_unlock(&mcpdm->lock);
+		mutex_unlock(&mcpdm->mutex);
 		ret = -EBUSY;
 		goto err;
 	}
 	mcpdm->free = 0;
 
-	spin_unlock(&mcpdm->lock);
+	mutex_unlock(&mcpdm->mutex);
 
 	/* Disable lines while request is ongoing */
 	omap_mcpdm_write(mcpdm, MCPDM_CTRL, 0x00);
@@ -454,15 +454,15 @@
 	pdev = to_platform_device(mcpdm->dev);
 	pdata = pdev->dev.platform_data;
 
-	spin_lock(&mcpdm->lock);
+	mutex_lock(&mcpdm->mutex);
 	if (mcpdm->free) {
 		dev_err(mcpdm->dev, "McPDM interface is already free\n");
-		spin_unlock(&mcpdm->lock);
+		mutex_unlock(&mcpdm->mutex);
 		return;
 	}
 
 	mcpdm->free = 1;
-	spin_unlock(&mcpdm->lock);
+	mutex_unlock(&mcpdm->mutex);
 
 	pm_runtime_put_sync(&pdev->dev);
 
@@ -635,10 +635,9 @@
 	int ret;
 
 	/* make sure we stop any pre-existing shutdown */
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) 
 		cancel_delayed_work(&mcpdm->delayed_abe_work);
-	}
-
+	
 	ret = omap_mcpdm_dai_startup(substream, dai);
 	if (ret < 0)
 		return ret;
@@ -666,7 +665,7 @@
 	if (!dai->active) {
 		if (!mcpdm->ul_active && substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
 			omap_mcpdm_capture_close(mcpdm, mcpdm->uplink);
-			if (!mcpdm->free && !mcpdm->dn_channels)
+			if (!mcpdm->free && !mcpdm->dn_channels && !mcpdm->dl_active)
 				omap_mcpdm_free(mcpdm);
 		}
 		if (!mcpdm->dl_active && substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
@@ -682,7 +681,7 @@
 	struct omap_mcpdm *mcpdm =
 			container_of(work, struct omap_mcpdm, delayed_abe_work.work);
 
-	spin_lock(&mcpdm->lock);
+	mutex_lock(&mcpdm->mutex);
 	if (!mcpdm->dl_active && mcpdm->dn_channels) {
 		abe_disable_data_transfer(PDM_DL_PORT);
 		udelay(250);
@@ -690,7 +689,7 @@
 		omap_mcpdm_playback_close(mcpdm, mcpdm->downlink);
 		abe_dsp_mcpdm_shutdown();
 	}
-	spin_unlock(&mcpdm->lock);
+	mutex_unlock(&mcpdm->mutex);
 	abe_dsp_pm_put();
 
 	if (!mcpdm->free && !mcpdm->ul_active)
@@ -714,7 +713,7 @@
 		/* Check if McPDM is already started */
 		if (!mcpdm->dn_channels) {
 			abe_dsp_pm_get();
-			spin_lock(&mcpdm->lock);
+			mutex_lock(&mcpdm->mutex);
 			/* start ATC before McPDM IP */
 			abe_enable_data_transfer(PDM_DL_PORT);
 			udelay(250);
@@ -722,12 +721,12 @@
 
 			ret = omap_mcpdm_playback_open(mcpdm, &omap_mcpdm_links[0]);
 			if (ret < 0) {
-				spin_unlock(&mcpdm->lock);
+				mutex_unlock(&mcpdm->mutex);
 				goto out;
 			}
 
 			omap_mcpdm_start(mcpdm, stream);
-			spin_unlock(&mcpdm->lock);
+			mutex_unlock(&mcpdm->mutex);
 		}
 	} else {
 		mcpdm->uplink->channels = PDM_UP1_EN | PDM_UP2_EN;
@@ -843,7 +842,7 @@
 	mcpdm->downlink = &omap_mcpdm_links[0];
 	mcpdm->uplink = &omap_mcpdm_links[1];
 
-	spin_lock_init(&mcpdm->lock);
+	mutex_init(&mcpdm->mutex);
 	mcpdm->free = 1;
 
 	mcpdm->io_base = omap_hwmod_get_mpu_rt_va(oh);
Index: Kernel/arch/arm/mach-omap2/omap4-common.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/omap4-common.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/arch/arm/mach-omap2/omap4-common.c	2011-01-21 01:22:57.432072502 +0530
@@ -407,10 +407,13 @@
 						source_name, readl(slave_addr));
 					dump_stack();
 				} else {
+					/* FIXME:On secure devices, PPA manages this already */
 					/* Then this is a Fire Wall Error */
+#if 0
 					omap_fw_error_handler(
 							ctrl_sec_err_status,
 						ctrl_sec_err_status_regval);
+#endif
 				}
 				/* clear the stderr log */
 				writel((stderrlog_main_reg_val |
Index: Kernel/arch/arm/mach-omap2/omap4-wakeupgen.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/omap4-wakeupgen.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/arch/arm/mach-omap2/omap4-wakeupgen.c	2011-01-21 01:22:57.432072502 +0530
@@ -35,7 +35,7 @@
 #define PTMSYNCREQ_EN_OFFSET			0x6D0
 #define SAR_BACKUP_STATUS_OFFSET		0x500
 #define SAR_BACKUP_STATUS_WAKEUPGEN		0x10
-#define SECURE_L3FW_IRQ_MASK			0xfffff8ff
+#define SECURE_L3FW_IRQ_MASK			0xfffffeff
 
 /* Wakeupgen Base addres */
 void __iomem *wakeupgen_base;
Index: Kernel/arch/arm/mach-omap2/pm44xx.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/pm44xx.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/arch/arm/mach-omap2/pm44xx.c	2011-01-21 01:22:57.432072502 +0530
@@ -386,6 +386,12 @@
 	omap4_wakeupgen_set_interrupt(cpu_id, OMAP44XX_IRQ_PRCM);
 	omap4_wakeupgen_set_interrupt(cpu_id, OMAP44XX_IRQ_SYS_1N);
 	omap4_wakeupgen_set_interrupt(cpu_id, OMAP44XX_IRQ_GPIO1);
+	
+#ifdef CONFIG_ENABLE_L3_ERRORS
+	/* Allow the L3 errors to be logged */
+	omap4_wakeupgen_set_interrupt(cpu_id, OMAP44XX_IRQ_L3_DBG);
+	omap4_wakeupgen_set_interrupt(cpu_id, OMAP44XX_IRQ_L3_APP);
+#endif
 
 	/* Read current next_pwrsts */
 	list_for_each_entry(pwrst, &pwrst_list, node) {
Index: Kernel/arch/arm/mach-omap2/voltage.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/voltage.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/arch/arm/mach-omap2/voltage.c	2011-01-21 01:22:57.442072324 +0530
@@ -212,6 +212,7 @@
 	u8 cmdval_reg;
 	u8 vdd_sr_reg;
 	struct omap_volt_pmic_info *pmic;
+	struct device vdd_device;
 };
 static struct omap_vdd_info *vdd_info;
 #ifdef CONFIG_OMAP_ABB
@@ -1418,13 +1419,14 @@
 		unsigned long target_volt)
 {
 	struct omap_volt_data *volt_data;
-	u32 vc_bypass_value, vc_cmdval, vc_valid, vc_bypass_val_reg_offs;
-	u32 vp_errgain_val, vc_cmd_on_mask;
+	u32 vc_bypass_value = 0, vc_cmdval = 0;
+	u32  vc_valid = 0, vc_bypass_val_reg_offs = 0;
+	u32 vp_errgain_val = 0, vc_cmd_on_mask = 0;
 	u32 loop_cnt = 0, retries_cnt = 0;
 	u32 smps_steps = 0, smps_delay = 0;
-	u8 vc_data_shift, vc_slaveaddr_shift, vc_regaddr_shift;
-	u8 vc_cmd_on_shift;
-	u8 target_vsel, current_vsel, sr_i2c_slave_addr;
+	u8 vc_data_shift = 0, vc_slaveaddr_shift = 0, vc_regaddr_shift = 0;
+	u8 vc_cmd_on_shift = 0;
+	u8 target_vsel = 0, current_vsel = 0, sr_i2c_slave_addr = 0;
 
 	if (cpu_is_omap34xx()) {
 		vc_cmd_on_shift = OMAP3430_VC_CMD_ON_SHIFT;
@@ -2257,7 +2259,6 @@
 	int is_volt_scaled = 0, i;
 	struct omap_vdd_info *vdd;
 	struct plist_node *node;
-	struct omap_vdd_user_list *user;
 
 	if (!voltdm || IS_ERR(voltdm)) {
 		pr_warning("%s: VDD specified does not exist!\n", __func__);
@@ -2270,16 +2271,9 @@
 
 	curr_volt = omap_voltage_get_nom_volt(voltdm);
 
-	/* Find the device requesting the voltage scaling */
-	node = plist_first(&vdd->user_list);
-	user = container_of(node, struct omap_vdd_user_list, node);
-
-	/* calculate the voltages for dependent vdd's */
-	if (calc_dep_vdd_volt(user->dev, vdd, volt)) {
-		pr_warning("%s: Error in calculating dependent vdd voltages"
-			"for vdd_%s\n", __func__, voltdm->name);
-		return -EINVAL;
-	}
+	/* Find the highest voltage for this vdd */
+	node = plist_last(&vdd->user_list);
+	volt = node->prio;
 
 	/* Disable smartreflex module across voltage and frequency scaling */
 	omap_smartreflex_disable(voltdm);
@@ -2318,6 +2312,12 @@
 
 	mutex_unlock(&vdd->scaling_mutex);
 
+	/* calculate the voltages for dependent vdd's */
+	if (calc_dep_vdd_volt(&vdd->vdd_device, vdd, volt)) {
+		pr_warning("%s: Error in calculating dependent vdd voltages"
+			"for vdd_%s\n", __func__, voltdm->name);
+		return -EINVAL;
+	}
 	/* Scale dependent vdds */
 	scale_dep_vdd(vdd);
 
Index: Kernel/sound/soc/soc-core.c
===================================================================
--- Kernel.orig/sound/soc/soc-core.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/sound/soc/soc-core.c	2011-01-21 01:22:57.442072324 +0530
@@ -3174,6 +3174,7 @@
 	INIT_LIST_HEAD(&card->list);
 	card->instantiated = 0;
 	mutex_init(&card->mutex);
+	mutex_init(&card->dapm_mutex);
 
 	mutex_lock(&client_mutex);
 	list_add(&card->list, &card_list);
Index: Kernel/sound/soc/soc-dapm.c
===================================================================
--- Kernel.orig/sound/soc/soc-dapm.c	2011-01-21 01:22:45.692696363 +0530
+++ Kernel/sound/soc/soc-dapm.c	2011-01-21 01:22:57.442072324 +0530
@@ -1173,6 +1173,7 @@
 	if (!card)
 		return -ENODEV;
 
+	mutex_lock(&card->dapm_mutex);
 	/* Check which widgets we need to power and store them in
 	 * lists indicating if they should be powered up or down.
 	 */
@@ -1208,6 +1209,7 @@
 			break;
 		}
 	}
+	mutex_unlock(&card->dapm_mutex);
 
 	/* If there are no DAPM widgets then try to figure out power from the
 	 * event type.
