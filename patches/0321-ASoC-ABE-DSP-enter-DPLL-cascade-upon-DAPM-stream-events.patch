From: Misael Lopez Cruz <misael.lopez@ti.com>
Date: Tue, 29 Mar 2011 21:10:07 +0000 (-0500)
Subject: ASoC: ABE DSP: Enter DPLL cascade upon DAPM stream events
X-Git-Tag: android-2.6.35-2.3-omap4.12.1~1
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=f55e1c90f574de6120502241ec28bdc7a5db3d6c

ASoC: ABE DSP: Enter DPLL cascade upon DAPM stream events

DAPM stream events are executed when all DAPM paths have been
walked and system conditions are calculated, so entering into
DPLL cascade mode can be decided more realiably at this point.

Change-Id: I3eb168ed519fd1b31153a0760567eb18abf0b67b
Signed-off-by: Misael Lopez Cruz <misael.lopez@ti.com>
---

Index: kernel/include/sound/soc-dapm.h
===================================================================
--- kernel.orig/include/sound/soc-dapm.h	2011-04-30 20:04:21.059648357 +0900
+++ kernel/include/sound/soc-dapm.h	2011-04-30 20:06:37.140856731 +0900
@@ -507,7 +507,7 @@
 	struct device *dev; /* from parent - for debug */
 	struct snd_soc_codec *codec; /* parent codec */
 	struct snd_soc_platform *platform; /*parent platform */
-	int (*stream_event)(struct snd_soc_dapm_context *dapm);
+	int (*stream_event)(struct snd_soc_dapm_context *dapm, int event);
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs_dapm;
 #endif
Index: kernel/include/sound/soc.h
===================================================================
--- kernel.orig/include/sound/soc.h	2011-04-30 20:04:21.059648357 +0900
+++ kernel/include/sound/soc.h	2011-04-30 20:06:37.140856731 +0900
@@ -517,7 +517,7 @@
 	int (*set_bias_level)(struct snd_soc_codec *,
 			      enum snd_soc_bias_level level);
 	/* codec stream completion event */
-	int (*stream_event)(struct snd_soc_dapm_context *dapm);
+	int (*stream_event)(struct snd_soc_dapm_context *dapm, int event);
 };
 
 /* SoC platform interface */
@@ -547,7 +547,7 @@
 	int (*write)(struct snd_soc_platform *, unsigned int, unsigned int);
 
 	/* platform stream completion event */
-	int (*stream_event)(struct snd_soc_dapm_context *dapm);
+	int (*stream_event)(struct snd_soc_dapm_context *dapm, int event);
 };
 
 struct snd_soc_platform {
Index: kernel/sound/soc/omap/omap-abe-dsp.c
===================================================================
--- kernel.orig/sound/soc/omap/omap-abe-dsp.c	2011-04-30 20:04:54.120896244 +0900
+++ kernel/sound/soc/omap/omap-abe-dsp.c	2011-04-30 20:06:37.140856731 +0900
@@ -452,7 +452,7 @@
 static int abe_fe_event(struct snd_soc_dapm_widget *w,
 			struct snd_kcontrol *kcontrol, int event)
 {
-	int index, active, ret;
+	int index, active, ret = 0;
 
 	if ((w->reg < ABE_FE_START) || (w->reg >= ABE_FE_END))
 		return -EINVAL;
@@ -462,21 +462,10 @@
 	if (SND_SOC_DAPM_EVENT_ON(event)) {
 		abe->fe_active[index]++;
 		active = abe_fe_active_count(abe);
-
-		/*
-		 * enter dpll cascading when all conditions are met:
-		 * - system is in early suspend (screen is off)
-		 * - single stream is active and is LP (ping-pong)
-		 * - OPP is 50 or less (DL1 path only)
-		 */
-		if (abe->early_suspended && (active == 1) &&
-		    abe->fe_active[6] && (abe->opp <= 50))
-			ret = abe_enter_dpll_cascading(abe);
-		else
+		if (!abe->early_suspended || (active > 1) || !abe->fe_active[6])
 			ret = abe_exit_dpll_cascading(abe);
 	} else {
 		abe->fe_active[index]--;
-		ret = abe_exit_dpll_cascading(abe);
 	}
 
 	return ret;
@@ -1439,44 +1428,44 @@
 	SND_SOC_DAPM_AIF_IN_E("TONES_DL", "Tones Playback", 0,
 			ABE_WIDGET(0), ABE_OPP_25, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_IN_E("VX_DL", "Voice Playback", 0,
 			ABE_WIDGET(1), ABE_OPP_50, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_OUT_E("VX_UL", "Voice Capture", 0,
 			ABE_WIDGET(2), ABE_OPP_50, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	/* the MM_UL mapping is intentional */
 	SND_SOC_DAPM_AIF_OUT_E("MM_UL1", "MultiMedia1 Capture", 0,
 			ABE_WIDGET(3), ABE_OPP_100, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_OUT_E("MM_UL2", "MultiMedia2 Capture", 0,
 			ABE_WIDGET(4), ABE_OPP_50, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_IN_E("MM_DL", " MultiMedia1 Playback", 0,
 			ABE_WIDGET(5), ABE_OPP_25, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_IN_E("MM_DL_LP", " MultiMedia1 LP Playback", 0,
 			ABE_WIDGET(6), ABE_OPP_25, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_IN_E("VIB_DL", "Vibra Playback", 0,
 			ABE_WIDGET(7), ABE_OPP_100, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_IN_E("MODEM_DL", "MODEM Playback", 0,
 			ABE_WIDGET(8), ABE_OPP_50, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 	SND_SOC_DAPM_AIF_OUT_E("MODEM_UL", "MODEM Capture", 0,
 			ABE_WIDGET(9), ABE_OPP_50, 0,
 			abe_fe_event,
-			SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
+			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
 
 	/* Backend DAIs  */
 	// FIXME: must match BE order in abe_dai.h
@@ -2553,18 +2542,42 @@
 	.mmap		= aess_mmap,
 };
 
-static int aess_stream_event(struct snd_soc_dapm_context *dapm)
+static int aess_stream_event(struct snd_soc_dapm_context *dapm, int event)
 {
 	/* TODO: do not use abe global structure to assign pdev */
 	struct platform_device *pdev = abe->pdev;
+	int active = abe_fe_active_count(abe);
+	int ret = 0;
 
-	if (abe->active) {
-		pm_runtime_get_sync(&pdev->dev);
-		aess_set_opp_mode();
-		pm_runtime_put_sync(&pdev->dev);
+	if (!abe->active)
+		return 0;
+
+	pm_runtime_get_sync(&pdev->dev);
+	aess_set_opp_mode();
+	pm_runtime_put_sync(&pdev->dev);
+
+	switch (event) {
+	case SND_SOC_DAPM_STREAM_START:
+		/*
+		 * enter dpll cascading when all conditions are met:
+		 * - system is in early suspend (screen is off)
+		 * - single stream is active and is LP (ping-pong)
+		 * - OPP is 50 or less (DL1 path only)
+		 */
+		if (abe->early_suspended && (active == 1) &&
+		    abe->fe_active[6] && (abe->opp <= 50))
+			ret = abe_enter_dpll_cascading(abe);
+		else
+			ret = abe_exit_dpll_cascading(abe);
+		break;
+	case SND_SOC_DAPM_STREAM_STOP:
+		ret = abe_exit_dpll_cascading(abe);
+		break;
+	default:
+		break;
 	}
 
-	return 0;
+	return ret;
 }
 
 static struct snd_soc_platform_driver omap_aess_platform = {
Index: kernel/sound/soc/soc-dapm.c
===================================================================
--- kernel.orig/sound/soc/soc-dapm.c	2011-04-30 20:04:21.059648357 +0900
+++ kernel/sound/soc/soc-dapm.c	2011-04-30 20:06:37.140856731 +0900
@@ -2327,7 +2327,7 @@
 
 	/* do we need to notify any clients that DAPM stream is complete */
 	if (dapm->stream_event)
-		dapm->stream_event(dapm);
+		dapm->stream_event(dapm, event);
 }
 
 /**
