From: Mike Turquette <mturquette@ti.com>
Date: Tue, 24 May 2011 18:45:16 +0000 (-0500)
Subject: OMAP4: Clock: introduce DPLL cascading blocker API
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=be1af678b78724e026e4686fa693d9c928b0c109

OMAP4: Clock: introduce DPLL cascading blocker API

Some devices cannot operate correctly while in DPLL cacading mode used for
low power MP3 playback.  Thus two new functions have been created which can
be used by device drivers to block entry, exit and allow entry into DPLL
cascading.

Function protoypes are:

int dpll_cascading_blocker_hold(struct device *dev); int
dpll_cascading_blocker_release(struct device *dev);

This patch also ensure mutual exclusion with the typical DVFS path
(omap_device_set_rate) and updates recent SmartReflex changes to make use of
a changed variable name.

Change-Id: I8e01488e73fa30b42ff70d7ef0b291ed268349ec
Signed-off-by: Mike Turquette <mturquette@ti.com>
---

Index: kernel/arch/arm/mach-omap2/dpll-44xx.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/dpll-44xx.c	2011-05-28 00:29:38.049631077 +0900
+++ kernel/arch/arm/mach-omap2/dpll-44xx.c	2011-05-28 00:29:42.089599369 +0900
@@ -14,7 +14,7 @@
 #include <linux/io.h>
 #include <linux/delay.h>
 #include <linux/clk.h>
-#include <linux/cpufreq.h>
+#include <linux/slab.h>
 
 #include <plat/common.h>
 #include <plat/clockdomain.h>
@@ -42,7 +42,8 @@
 static struct delayed_work	lpmode_work;
 struct clk *dpll_core_clk=NULL;
 
-bool omap4_lpmode = false;
+bool in_dpll_cascading = false;
+DEFINE_RWLOCK(dpll_cascading_lock);
 
 static struct clockdomain *l3_emif_clkdm;
 static struct clk *dpll_core_m2_ck, *dpll_core_m5x2_ck;
@@ -68,12 +69,15 @@
 	unsigned long dpll_core_ck_rate;
 	u32 dpll_core_m2_div;
 	struct clk *per_hsd_byp_clk_mux_ck_parent;
-	unsigned int cpufreq_policy_min_rate;
-	unsigned int cpufreq_policy_max_rate;
-	unsigned int cpufreq_policy_cur_rate;
-	struct omap_opp *mpu_opp;
 } state;
 
+struct dpll_cascading_blocker {
+	struct device *dev;
+	struct list_head node;
+};
+
+LIST_HEAD(dpll_cascading_blocker_list);
+
 /**
  * omap4_core_dpll_m2_set_rate - set CORE DPLL M2 divider
  * @clk: struct clk * of DPLL to set
@@ -549,6 +553,90 @@
 	return schedule_delayed_work_on(0, &lpmode_work, delay);
 }
 
+int dpll_cascading_blocker_hold(struct device *dev)
+{
+	struct dpll_cascading_blocker *blocker;
+	unsigned long flags;
+	int list_was_empty = 0;
+	int ret = 0;
+
+	write_lock_irqsave(&dpll_cascading_lock, flags);
+
+	if (list_empty(&dpll_cascading_blocker_list))
+		list_was_empty = 1;
+
+	/* bail early if constraint for this device already exists */
+	list_for_each_entry(blocker, &dpll_cascading_blocker_list, node) {
+		if (blocker->dev == dev)
+			goto out;
+	}
+
+	/* add new member to list of devices blocking dpll cascading entry */
+	blocker = kzalloc(sizeof(struct dpll_cascading_blocker), GFP_KERNEL);
+	if (!blocker) {
+		pr_err("%s: Unable to creat a new blocker\n",
+				__func__);
+		ret = -ENOMEM;
+		goto out;
+	}
+	blocker->dev = dev;
+
+	list_add(&blocker->node, &dpll_cascading_blocker_list);
+
+	if (list_was_empty && in_dpll_cascading) {
+		omap4_dpll_low_power_cascade_exit();
+		in_dpll_cascading = false;
+	}
+
+out:
+	write_unlock_irqrestore(&dpll_cascading_lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL(dpll_cascading_blocker_hold);
+
+int dpll_cascading_blocker_release(struct device *dev)
+{
+	struct dpll_cascading_blocker *blocker;
+	unsigned long flags;
+	int ret = 0;
+	int found = 0;
+
+	write_lock_irqsave(&dpll_cascading_lock, flags);
+
+	/* bail early if list is empty */
+	if (list_empty(&dpll_cascading_blocker_list))
+		goto out;
+
+	/* find the list entry that matches the device */
+	list_for_each_entry(blocker, &dpll_cascading_blocker_list, node) {
+		if (blocker->dev == dev) {
+			found = 1;
+			break;
+		}
+	}
+
+	/* bail if constraint for this device does not exist */
+	if (!found) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	list_del(&blocker->node);
+
+	if (list_empty(&dpll_cascading_blocker_list)
+			&& !in_dpll_cascading) {
+		in_dpll_cascading = true;
+		omap4_dpll_low_power_cascade_enter();
+	}
+
+out:
+	write_unlock_irqrestore(&dpll_cascading_lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL(dpll_cascading_blocker_release);
+
 /**
  * omap4_dpll_low_power_cascade - configure system for low power DPLL cascade
  *
@@ -578,9 +666,6 @@
 	struct clk *l4_wkup_clk_mux_ck, *lp_clk_div_ck;
 	struct clk *pmd_stm_clock_mux_ck, *pmd_trace_clk_mux_ck;
 	struct clockdomain *emu_sys_44xx_clkdm, *abe_44xx_clkdm;
-	struct device *mpu_dev;
-	struct cpufreq_policy *cp;
-	struct omap_opp *opp;
 	struct voltagedomain *vdd_mpu, *vdd_iva, *vdd_core;
 
 	dpll_abe_ck = clk_get(NULL, "dpll_abe_ck");
@@ -624,9 +709,7 @@
 		goto out;
 	}
 
-	omap4_lpmode = true;
-     
-	/* look up the three scalable voltage domains */
+    	/* look up the three scalable voltage domains */
 	vdd_mpu = omap_voltage_domain_get("mpu");
 	vdd_iva = omap_voltage_domain_get("iva");
 	vdd_core = omap_voltage_domain_get("core");
@@ -809,7 +892,6 @@
 				(1 << state.div_iva_hs_clk_div)));
 	clk_set_rate(dpll_iva_ck, state.dpll_iva_ck_rate);
 dpll_mpu_bypass_fail:
-	omap4_lpmode = false;
 	clk_set_rate(div_mpu_hs_clk, (div_mpu_hs_clk->parent->rate /
 				(1 << state.div_mpu_hs_clk_div)));
 	clk_set_rate(dpll_mpu_ck, state.dpll_mpu_ck_rate);
@@ -852,7 +934,6 @@
 	struct clk *l4_wkup_clk_mux_ck, *lp_clk_div_ck;
 	struct clk *pmd_stm_clock_mux_ck, *pmd_trace_clk_mux_ck;
 	struct clockdomain *emu_sys_44xx_clkdm, *abe_44xx_clkdm;
-	struct cpufreq_policy *cp;
 
 	pr_info("[%s]\n", __func__);
 
@@ -902,11 +983,6 @@
 	if (delayed_work_pending(&lpmode_work))
 		cancel_delayed_work_sync(&lpmode_work);
 
-	if (!omap4_lpmode) {
-		return 0;
-	}
-
-
 	/* lock DPLL_MPU */
 	ret = clk_set_rate(dpll_mpu_ck, state.dpll_mpu_ck_rate);
 	if (ret)
@@ -996,8 +1072,6 @@
 		/*put back static dependency default vlaues during exit*/
 		__raw_writel(0x0000B0E0, OMAP4430_CM_MPU_STATICDEP);
 
-	omap4_lpmode = false;
-
 out:
 
 	return ret;
Index: kernel/arch/arm/mach-omap2/include/mach/omap4-common.h
===================================================================
--- kernel.orig/arch/arm/mach-omap2/include/mach/omap4-common.h	2011-05-28 00:29:38.049631077 +0900
+++ kernel/arch/arm/mach-omap2/include/mach/omap4-common.h	2011-05-28 00:29:42.089599369 +0900
@@ -99,7 +99,8 @@
 extern dma_addr_t omap4_secure_ram_phys;
 extern void *so_ram_address;
 
-extern bool omap4_lpmode;
+extern bool in_dpll_cascading;
+extern rwlock_t dpll_cascading_lock;
 
 extern void __init gic_init_irq(void);
 extern void omap_smc1(u32 fn, u32 arg);
@@ -111,6 +112,8 @@
 extern void __omap4_cpu_suspend(unsigned int cpu, unsigned int save_state);
 extern unsigned long *omap4_cpu_wakeup_addr(void);
 extern int omap4_set_freq_update(void);
+extern int dpll_cascading_blocker_hold(struct device *dev);
+extern int dpll_cascading_blocker_release(struct device *dev);
 extern int omap4_dpll_low_power_cascade_check_entry(void);
 extern int omap4_dpll_low_power_cascade_enter(void);
 extern int omap4_dpll_low_power_cascade_exit(void);
Index: kernel/arch/arm/mach-omap2/smartreflex.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/smartreflex.c	2011-05-28 00:29:38.049631077 +0900
+++ kernel/arch/arm/mach-omap2/smartreflex.c	2011-05-28 00:29:42.089599369 +0900
@@ -163,7 +163,7 @@
 	}
 	else {
 	  /* SR_xxx_SYSCLK runs at 12.288MHz in DPLL cascading */
-		if (omap4_lpmode)
+		if (in_dpll_cascading)
 			sys_clk_speed = 12288000;
 		else {
 			sys_ck = clk_get(NULL, "sys_clkin_ck");
Index: kernel/arch/arm/plat-omap/omap_device.c
===================================================================
--- kernel.orig/arch/arm/plat-omap/omap_device.c	2011-05-28 00:29:38.049631077 +0900
+++ kernel/arch/arm/plat-omap/omap_device.c	2011-05-28 00:29:42.089599369 +0900
@@ -882,7 +882,7 @@
 			unsigned long rate)
 {
 	struct omap_opp *opp;
-	unsigned long volt, freq, min_freq, max_freq;
+	unsigned long volt, freq, min_freq, max_freq, flags;
 	struct voltagedomain *voltdm;
 	struct platform_device *pdev;
 	struct omap_device *od;
@@ -891,11 +891,15 @@
 	pdev = container_of(dev, struct platform_device, dev);
 	od = _find_by_pdev(pdev);
 
-#ifdef CONFIG_ARCH_OMAP4
 	/* if in low power DPLL cascading mode, bail out early */
-	if (omap4_lpmode)
-		return -EINVAL;
-#endif
+	if (cpu_is_omap44xx()) {
+		read_lock_irqsave(&dpll_cascading_lock, flags);
+
+		if (in_dpll_cascading) {
+			ret = -EINVAL;
+			goto out;
+		}
+	}
 
 	/*
 	 * Figure out if the desired frquency lies between the
@@ -904,13 +908,15 @@
 	min_freq = 0;
 	if (IS_ERR(opp_find_freq_ceil(dev, &min_freq))) {
 		dev_err(dev, "%s: Unable to find lowest opp\n", __func__);
-		return -ENODEV;
+		ret = -ENODEV;
+		goto out;
 	}
 
 	max_freq = ULONG_MAX;
 	if (IS_ERR(opp_find_freq_floor(dev, &max_freq))) {
 		dev_err(dev, "%s: Unable to find highest opp\n", __func__);
-		return -ENODEV;
+		ret = -ENODEV;
+		goto out;
 	}
 
 	if (rate < min_freq)
@@ -925,7 +931,8 @@
 	if (IS_ERR(opp)) {
 		dev_dbg(dev, "%s: Unable to find OPP for freq%ld\n",
 			__func__, rate);
-		return -ENODEV;
+		ret = -ENODEV;
+		goto out;
 	}
 	if (unlikely(freq != rate))
 		dev_dbg(dev, "%s: Available freq %ld != dpll freq %ld.\n",
@@ -943,11 +950,15 @@
 	if (ret) {
 		dev_err(dev, "%s: Unable to get the final volt for scaling\n",
 			__func__);
-		return ret;
+		goto out;
 	}
 
 	/* Do the actual scaling */
-	return omap_voltage_scale(voltdm, volt);
+	ret = omap_voltage_scale(voltdm);
+out:
+	if (cpu_is_omap44xx())
+		read_unlock_irqrestore(&dpll_cascading_lock, flags);
+	return ret;
 }
 EXPORT_SYMBOL(omap_device_set_rate);
 
