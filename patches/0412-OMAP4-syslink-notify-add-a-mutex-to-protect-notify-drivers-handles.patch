From: Fernando Guzman Lugo <fernando.lugo@ti.com>
Date: Thu, 16 Dec 2010 20:24:48 +0000 (-0600)
Subject: syslink: notify: add a mutext to protect notify drivers_handles
X-Git-Tag: android-2.6.35-2.3-omap4.13.1-Beta~48
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=da9ab41a86531287d19c8b5db716f726d6288ed5

syslink: notify: add a mutext to protect notify drivers_handles

Add protection againts adding/removing notify drivers_handles.

Change-Id: I53f391d97b9b115ac64d007cc0a0d8ef7cc80a3b
Signed-off-by: Fernando Guzman Lugo <fernando.lugo@ti.com>

Index: kernel/drivers/dsp/syslink/notify_ducatidriver/notify_ducati.c
===================================================================
--- kernel.orig/drivers/dsp/syslink/notify_ducatidriver/notify_ducati.c	2011-06-17 18:25:37.000000000 +0900
+++ kernel/drivers/dsp/syslink/notify_ducatidriver/notify_ducati.c	2011-06-19 22:12:19.000000000 +0900
@@ -103,6 +103,8 @@
 	struct notify_ducatidrv_object *driver_handles
 				[MULTIPROC_MAXPROCESSORS][NOTIFY_MAX_INTLINES];
 	/* Loader handle array. */
+	struct mutex dh_lock;
+	/* mutext for adding/removing driver handles safety */
 	atomic_t mbox2_ref_count;
 	/* Reference count for enabling/disabling ducati mailbox interrupt */
 	atomic_t mbox1_ref_count;
@@ -219,6 +221,7 @@
 		goto error_exit;
 	}
 	mutex_init(notify_ducatidriver_state.gate_handle);
+	mutex_init(&notify_ducatidriver_state.dh_lock);
 
 	for (i = 0 ; i < MULTIPROC_MAXPROCESSORS; i++)
 		for (j = 0 ; j < NOTIFY_MAX_INTLINES; j++)
@@ -435,9 +438,6 @@
 	memcpy(&(obj->params), (void *) params,
 				sizeof(struct notify_ducatidrv_params));
 	obj->num_events = notify_state.cfg.num_events;
-	/* Set the handle in the driverHandles array. */
-	notify_ducatidriver_state.driver_handles
-		[params->remote_proc_id][params->line_id] = obj;
 	/* Point to the generic drvHandle object from this specific
 	 * NotifyDriverShm object. */
 	obj->drv_handle = drv_handle;
@@ -534,6 +534,12 @@
 #endif
 
 	drv_handle->is_init = NOTIFY_DRIVERINITSTATUS_DONE;
+
+	mutex_lock_killable(&notify_ducatidriver_state.dh_lock);
+	/* Set the handle in the driverHandles array. */
+	notify_ducatidriver_state.driver_handles
+		[params->remote_proc_id][params->line_id] = obj;
+	mutex_unlock(&notify_ducatidriver_state.dh_lock);
 	mutex_unlock(notify_ducatidriver_state.gate_handle);
 	return obj;
 
@@ -559,8 +565,6 @@
 	if (drv_handle != NULL) {
 		/* Unregister driver from the Notify module*/
 		notify_unregister_driver(drv_handle);
-		notify_ducatidriver_state.driver_handles
-			[params->remote_proc_id][params->line_id] = NULL;
 		drv_handle = NULL;
 	}
 error_unlock_and_return:
@@ -600,6 +604,7 @@
 
 	obj = (struct notify_ducatidrv_object *)(*handle_ptr);
 	if (obj != NULL) {
+		mutex_lock_killable(&notify_ducatidriver_state.dh_lock);
 		if (obj->remote_proc_id) {
 			mbox = ducati_mbox;
 			mbx_cnt = &notify_ducatidriver_state.mbox2_ref_count;
@@ -633,9 +638,9 @@
 		notify_ducatidriver_state.driver_handles
 			[obj->params.remote_proc_id][obj->params.line_id] = \
 									NULL;
-
 		kfree(obj);
 		obj = NULL;
+		mutex_unlock(&notify_ducatidriver_state.dh_lock);
 	}
 
 exit:
@@ -1296,10 +1301,14 @@
 {
 	/* Decode the msg to identify the processor that has sent the message */
 	u32 proc_id = (u32)ntfy_msg;
+	struct notify_ducatidrv_object *obj;
 
+	mutex_lock_killable(&notify_ducatidriver_state.dh_lock);
 	/* Call the corresponding prpc_id callback */
-	notify_shmdrv_isr_callback(notify_ducatidriver_state.driver_handles
-		[proc_id][0], ntfy_msg);
+	obj = notify_ducatidriver_state.driver_handles[proc_id][0];
+	if (obj)
+		notify_shmdrv_isr_callback(obj, ntfy_msg);
+	mutex_unlock(&notify_ducatidriver_state.dh_lock);
 
 	return 0;
 }
