Index: android-2.6.35/drivers/sensors/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/sensors/Kconfig	2010-12-22 14:36:03.913238838 +0530
+++ android-2.6.35/drivers/sensors/Kconfig	2010-12-22 14:36:55.013862217 +0530
@@ -7,5 +7,6 @@
 
 if NEW_SENSORS
 source "drivers/sensors/optical/Kconfig"
+source "drivers/sensors/accel/Kconfig"
 endif # NEW_SENSORS
 
Index: android-2.6.35/drivers/sensors/accel/Kconfig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/Kconfig	2010-12-22 14:36:04.141988371 +0530
@@ -0,0 +1,17 @@
+#
+# Accelerometer Sensor Configuration
+#
+
+config ACCEL
+	bool "Accelerometer Sensor"
+	default y
+	help
+	  This option enables accelerometer sensors
+
+config ACCEL_KXSD9
+	depends on ACCEL
+	tristate "KXSD9 Accelerometer driver"
+	default y
+	help
+	  This option enables accelerometer sensors using KXSD9 driver.
+
Index: android-2.6.35/drivers/sensors/accel/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/Makefile	2010-12-22 14:36:04.141988371 +0530
@@ -0,0 +1,9 @@
+##############################################################################
+# COPYRIGHT(C)	: Samsung Electronics Co.Ltd, 2006-2011 ALL RIGHTS RESERVED
+# AUTHOR	: Throughc
+##############################################################################
+# VERSION&DATE	: Version 1.00	2007/12/25 (Throughc)
+##############################################################################
+
+obj-$(CONFIG_ACCEL_KXSD9)	+= kxsd9.o
+
Index: android-2.6.35/drivers/sensors/accel/kxsd9.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/kxsd9.c	2010-12-22 14:36:51.803862603 +0530
@@ -0,0 +1,423 @@
+/* kxsd9.c
+ *
+ * also acts as pedometer and free-fall detector
+ * reports g-force as x,y,z
+ * reports step count
+
+    ^
+ +y |
+    ___
+-x | -'| +x
+<--|   |-->
+   |___| / -z
+   |_O_|/
+ -y |  /
+    v / +z
+
+ *
+ * 
+ */
+
+
+#include <asm/uaccess.h>
+#include <asm/mach-types.h>
+#include <asm/io.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/input.h>
+#include <linux/i2c.h>
+#include <linux/hrtimer.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#ifdef CONFIG_ANDROID_POWER
+#include <linux/android_power.h>
+#endif
+
+#include "kxsd9.h"
+#include "kxsd9_i2c.h"
+#include "kxsd9_acc.h"
+
+#define MODULE_NAME "kxsd9"
+#define KXSD9_DEBUG  0
+#define KXSD9_DUMP   0
+
+
+struct kxsd9_seq {
+	int len;
+	unsigned char *data;
+} kxsd9_enable_seq[] = {
+	{ 2, "\x0d""\xc0" },
+	{ 1, "\x1e" },
+	{ 2, "\x0a""\xca" },
+	{ 2, "\x0b""\x60" },
+	{ 2, "\x0c""\xe3" },
+	{ 1, "\x00" },
+}, kxsd9_disable_seq[] = {
+	{ 2, "\x0d""\x00" },
+};
+
+static ktime_t kxsd9_poll_time = {.tv.nsec =  100 * NSEC_PER_MSEC };
+static ktime_t kxsd9_seq_time = {.tv.nsec =  5 * NSEC_PER_MSEC };
+
+struct kxsd9 *kxsd9;
+
+static struct input_dev *kxsd9_input_dev;
+
+int kxsd9_enable(struct kxsd9 *kxsd9,int on)
+{
+	if (!kxsd9->seq && !kxsd9->on) {
+		hrtimer_start(&kxsd9->timer, kxsd9_seq_time, 
+				HRTIMER_MODE_REL);
+	}
+	kxsd9->on = on;
+	kxsd9->iseq = 0;
+	if (on) {
+		kxsd9->nseq = ARRAY_SIZE(kxsd9_enable_seq);
+		kxsd9->seq = kxsd9_enable_seq;
+	} else {
+		kxsd9->nseq = ARRAY_SIZE(kxsd9_disable_seq);
+		kxsd9->seq = kxsd9_disable_seq;
+	}
+	return 0;
+}
+
+static int kxsd9_i2c_read(struct i2c_client *client, unsigned id,
+						char *buf, int len)
+{
+	int r;
+	char outbuffer[2] = { 0, 0 };
+
+	outbuffer[0] = id;
+	// maejrep: Have to separate the "ask" and "read" chunks
+	r = i2c_master_send(client, outbuffer, 1);
+	if (r < 0) {
+		printk(KERN_WARNING "%s: error asking for gsensor data at "
+			"address %02x,%02x: %d\n",
+			__func__, client->addr, id, r);
+		return r;
+	}
+	mdelay(1);
+	r = i2c_master_recv(client, buf, len);
+	if (r < 0) {
+		printk(KERN_ERR "%s: error reading gsensor data at "
+			"address %02x,%02x: %d\n",
+			__func__, client->addr, id, r);
+		return r;
+	}
+	return 0;
+}
+
+static enum hrtimer_restart kxsd9_poll_timer(struct hrtimer *timer)
+{
+	struct kxsd9 *kxsd9;
+
+	kxsd9 = container_of(timer, struct kxsd9, timer);
+
+#ifdef CONFIG_ANDROID_POWER
+	android_lock_suspend(&kxsd9->suspend_lock);
+#endif
+
+	schedule_work(&kxsd9->work.work);
+	return HRTIMER_NORESTART;
+}
+
+int kxsd9_read_accel_xyz(struct kxsd9 *kxsd9, kxsd9acc_t * acc)
+{
+	int err;
+	char buf[6];
+	short x,y,z;
+
+	err = kxsd9_i2c_read(kxsd9->client, 0, buf, 6);
+	
+	x = 0x8000 - 0x100 * buf[0] - buf[1];
+	y = 0x8000 - 0x100 * buf[2] - buf[3];
+	z = buf[4] * 0x100 + buf[5] - 0x8000 - 1000; // calib?
+
+
+	acc->x = x;
+	acc->y = y;
+	acc->z = z;
+
+#if KXSD9_DEBUG
+	printk("X:%d, Y:%d, Z:%d\n", acc->x, acc->y, acc->z);
+#endif
+
+	input_report_abs(kxsd9_input_dev, ABS_X, x );
+	input_report_abs(kxsd9_input_dev, ABS_Y, y );
+	input_report_abs(kxsd9_input_dev, ABS_Z, z );
+
+	input_sync(kxsd9_input_dev);
+
+	return err;
+}
+
+struct class *acc_class;
+
+
+static int kxsd9_remove(struct i2c_client * client)
+{
+	struct kxsd9 *kxsd9 = i2c_get_clientdata(client);
+
+	input_unregister_device(kxsd9->inputdev);
+	input_free_device(kxsd9->inputdev);
+
+#ifdef CONFIG_ANDROID_POWER
+	android_uninit_suspend_lock(&kxsd9->suspend_lock);	
+#endif
+	
+	kfree(kxsd9);
+	return 0;
+}
+
+#if CONFIG_PM
+static int kxsd9_suspend(struct i2c_client * client, pm_message_t mesg)
+{
+#if KXSD9_DEBUG
+	printk(KERN_INFO MODULE_NAME ": suspending device...\n");
+#endif
+	return 0;
+}
+
+static int kxsd9_resume(struct i2c_client * client)
+{
+#if KXSD9_DEBUG
+	printk(KERN_INFO MODULE_NAME ": resuming device...\n");
+#endif
+	return 0;
+}
+#else
+#define kxsd9_suspend NULL
+#define kxsd9_resume NULL
+#endif
+
+
+int kxsd9_open (struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+ssize_t kxsd9_read(struct file *filp, char *buf, size_t count, loff_t *f_pos)
+{
+	return 0;
+}
+
+ssize_t kxsd9_write (struct file *filp, const char *buf, size_t count, loff_t *f_pos)
+{
+	return 0;
+}
+
+int kxsd9_release (struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+int kxsd9_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,  unsigned long arg)
+{
+	int err = 0;
+	unsigned char data[6];
+
+	/* check cmd */
+	if(_IOC_TYPE(cmd) != KXSD9_IOC_MAGIC)
+	{
+#if KXSD9_DEBUG      
+		printk("cmd magic type error\n");
+#endif
+		return -ENOTTY;
+	}
+	if(_IOC_NR(cmd) > KXSD9_IOC_MAXNR)
+	{
+#if KXSD9_DEBUG
+		printk("cmd number error\n");
+#endif
+		return -ENOTTY;
+	}
+
+	if(err)
+	{
+#if KXSD9_DEBUG
+		printk("cmd access_ok error\n");
+#endif
+		return -EFAULT;
+	}
+
+
+	switch(cmd)
+	{
+		case KXSD9_READ_ACCEL_XYZ:
+			err = kxsd9_read_accel_xyz(kxsd9 , (kxsd9acc_t*)data);
+			if(copy_to_user((kxsd9acc_t*)arg,(kxsd9acc_t*)data,6)!=0)
+			{
+#if KXSD9_DEBUG
+				printk("copy_to error\n");
+#endif
+				return -EFAULT;
+			}
+			return err;
+
+		case KXSD9_SET_RANGE:
+			if(copy_from_user(data,(unsigned char*)arg,1)!=0)
+			{
+#if KXSD9_DEBUG           
+				printk("[BMA150] copy_from_user error\n");
+#endif
+				return -EFAULT;
+			}
+			return err;
+		
+		case KXSD9_SET_MODE:
+			if(copy_from_user(data,(unsigned char*)arg,1)!=0)
+			{
+#if KXSD9_DEBUG           
+				printk("[BMA150] copy_from_user error\n");
+#endif
+				return -EFAULT;
+			}
+			return err;
+
+		case KXSD9_SET_BANDWIDTH:
+			if(copy_from_user(data,(unsigned char*)arg,1)!=0)
+			{
+#if KXSD9_DEBUG
+				printk("[BMA150] copy_from_user error\n");
+#endif
+				return -EFAULT;
+			}
+			return err;
+		
+		default:
+			return 0;
+	}
+}
+
+
+struct file_operations acc_fops =
+{
+	.owner   = THIS_MODULE,
+	.read    = kxsd9_read,
+	.write   = kxsd9_write,
+	.open    = kxsd9_open,
+	.ioctl   = kxsd9_ioctl,
+	.release = kxsd9_release,
+};
+
+
+static int kxsd9_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	int result;
+
+	struct device *dev_t;
+
+	kxsd9acc_t accels;
+
+#if KXSD9_DEBUG
+	printk("Initializing Kionix KXSD9 driver "
+		"at addr: 0x%02x\n", client->addr);
+#endif
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
+		printk(KERN_ERR MODULE_NAME ": i2c bus not supported\n");
+		return -EINVAL;
+	}
+
+	kxsd9 = kzalloc(sizeof *kxsd9, GFP_KERNEL);
+	if (kxsd9 < 0) {
+		printk(KERN_ERR MODULE_NAME ": Not enough memory\n");
+		return -ENOMEM;
+	}
+
+	mutex_init(&kxsd9->lock);
+	kxsd9->client = client;
+	i2c_set_clientdata(client, kxsd9);
+
+	result = register_chrdev( ACC_DEV_MAJOR, ACC_DEV_NAME, &acc_fops);
+	if (result < 0) {
+		return result;
+	}
+	
+        acc_class = class_create (THIS_MODULE, ACC_DEV_NAME);
+
+        if (IS_ERR(acc_class))	{
+		unregister_chrdev( ACC_DEV_MAJOR, ACC_DEV_NAME);
+		return PTR_ERR( acc_class );
+	}
+
+
+	dev_t = device_create( acc_class, NULL, MKDEV(ACC_DEV_MAJOR, 0), "%s", ACC_DEV_NAME);
+        if (IS_ERR(dev_t))
+        {
+                return PTR_ERR(dev_t);
+        }
+
+	//input-device initialisation
+	kxsd9_input_dev = input_allocate_device();
+	set_bit(EV_ABS, kxsd9_input_dev->evbit);
+	set_bit(ABS_X, kxsd9_input_dev->absbit);
+	set_bit(ABS_Y, kxsd9_input_dev->absbit);
+	set_bit(ABS_Z, kxsd9_input_dev->absbit);
+
+	kxsd9_input_dev->name = "kxsd9_accelerometer";
+
+	input_set_abs_params(kxsd9_input_dev, ABS_X, -3000, 3000, 0, 0);
+	input_set_abs_params(kxsd9_input_dev, ABS_Y, -3000, 3000, 0, 0);
+	input_set_abs_params(kxsd9_input_dev, ABS_Z, -3000, 3000, 0, 0);
+	
+	result = input_register_device(kxsd9_input_dev);
+  	if (result)
+	{
+    		printk("Accel Sensor couldn't be registered as input device: %d\n", result);
+    		goto release_input_dev;
+  	}
+
+        kxsd9_read_accel_xyz(kxsd9, &accels );
+
+	return 0;
+
+release_input_dev:
+	input_free_device(kxsd9_input_dev);
+	return result;
+}
+
+static const struct i2c_device_id kxsd9_ids[] = {
+        { MODULE_NAME, 0 },
+        { },
+};
+MODULE_DEVICE_TABLE(i2c, kxsd9_ids);
+
+static struct i2c_driver kxsd9_driver = {
+	.driver = {
+		.name	= MODULE_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.id_table = kxsd9_ids,
+	.probe = kxsd9_probe,
+	.remove = kxsd9_remove,
+#if CONFIG_PM
+	.suspend = kxsd9_suspend,
+	.resume = kxsd9_resume,
+#endif
+};
+
+
+static int __init kxsd9_init(void)
+{
+#if KXSD9_DEBUG
+	printk(KERN_INFO MODULE_NAME ": Registering Kionix KXSD9 driver\n");
+#endif
+	return i2c_add_driver(&kxsd9_driver);
+}
+
+static void __exit kxsd9_exit(void)
+{
+#if KXSD9_DEBUG
+	printk(KERN_INFO MODULE_NAME ": Unregistered Kionix KXSD9 driver\n");
+#endif
+	i2c_del_driver(&kxsd9_driver);
+}
+
+MODULE_AUTHOR("Job Bolle");
+MODULE_DESCRIPTION("Kionix-KXSD9 Driver");
+MODULE_LICENSE("GPL");
+
+module_init(kxsd9_init);
+module_exit(kxsd9_exit);
+
Index: android-2.6.35/drivers/sensors/accel/kxsd9.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/kxsd9.h	2010-12-22 14:36:40.291988780 +0530
@@ -0,0 +1,311 @@
+#ifndef __KXSD9_H__
+#define __KXSD9_H__
+
+#include <linux/earlysuspend.h>
+
+/* They used to connect i2c_acc_kxsd9_write. */
+#define KXSD9_WR_FUNC_PTR int (* kxsd9_i2c_txdata)(char *, int  )
+
+#define KXSD9_BUS_WRITE_FUNC(dev_addr, reg_addr, reg_data, len)\
+		kxsd9_i2c_txdata(reg_data, len)
+
+/* They used to connect i2c_acc_kxsd9_read. */
+#define KXSD9_RD_FUNC_PTR int (* kxsd9_i2c_rxdata)( char *, int  )
+
+#define KXSD9_BUS_READ_FUNC( dev_addr, reg_addr, reg_data, r_len )\
+		kxsd9_i2c_rxdata(reg_data, r_len)
+
+
+/* BMA150 IOCTL */
+#define BMA150_IOC_MAGIC		'B'
+#define BMA150_SET_RANGE		_IOWR(BMA150_IOC_MAGIC,4, unsigned char)
+#define BMA150_SET_MODE			_IOWR(BMA150_IOC_MAGIC,6, unsigned char)
+#define BMA150_SET_BANDWIDTH		_IOWR(BMA150_IOC_MAGIC,8, unsigned char)
+#define BMA150_READ_ACCEL_XYZ		_IOWR(BMA150_IOC_MAGIC,46,short)
+#define BMA150_IOC_MAXNR		48
+
+/* KXSD9 IOCTL */
+#define KXSD9_IOC_MAGIC			'K'
+#define KXSD9_SET_RANGE			_IOWR(KXSD9_IOC_MAGIC,4, unsigned char)
+#define KXSD9_SET_MODE			_IOWR(KXSD9_IOC_MAGIC,6, unsigned char)
+#define KXSD9_SET_BANDWIDTH		_IOWR(KXSD9_IOC_MAGIC,8, unsigned char)
+#define KXSD9_READ_ACCEL_XYZ           _IOWR(KXSD9_IOC_MAGIC,46,short)
+#define KXSD9_IOC_MAXNR            	48
+
+//#define DEBUG				0
+
+/* KXSD9 I2C Address */
+#define KXSD9_I2C_ADDR			0x38
+
+/* KXSD9 API error codes */
+#define E_KXSD9_NULL_PTR	(char)-127
+#define E_COMM_RES		(char)-1
+#define E_OUT_OF_RANGE		(char)-2
+
+
+/* register write and read delays */
+#define MDELAY_DATA_TYPE	unsigned int
+#define KXSD9_EE_W_DELAY	28	/* delay after EEP write is 28 msec */
+
+
+struct kxsd9 {
+	struct i2c_client *client;
+	struct input_dev *inputdev;
+	struct hrtimer timer;
+	struct delayed_work work;
+	struct mutex lock;
+#ifdef CONFIG_ANDROID_POWER
+	android_suspend_lock_t suspend_lock;
+#endif
+	int on;
+	struct kxsd9_seq *seq;
+	int iseq,nseq;
+
+	int pedo_up,pedo_lim;
+	unsigned short pedo_count;
+};
+
+typedef struct  {
+	short x,//< holds x-axis acceleration data sign extended. Range -512 to 511.
+	y, 	//< holds y-axis acceleration data sign extended. Range -512 to 511.
+	z; 	//< holds z-axis acceleration data sign extended. Range -512 to 511.
+} kxsd9acc_t;
+
+
+typedef struct  {
+	unsigned char xout_h;
+	unsigned char xout_l;
+	unsigned char yout_h;
+	unsigned char yout_l;
+	unsigned char zout_h;
+	unsigned char zout_l;
+	unsigned char auxout_h;
+	unsigned char auxout_l;
+	unsigned char rsvd1;
+	unsigned char rsvd2;
+	unsigned char reset_write;
+	unsigned char rsvd3;
+	unsigned char ctrl_regc;
+	unsigned char ctrl_regb;
+	unsigned char ctrl_rega;
+} kxsd9regs_t;
+
+
+
+typedef struct {
+	kxsd9regs_t * image;			/**< pointer to kxsd9regs_t structure not mandatory */
+	unsigned char mode;			/**< save current KXSD9 operation mode */
+	unsigned char chip_id,			/**< save KXSD9's chip id which has to be 0x02 after calling bma020_init() */
+	ml_version, 				/**< holds the KXSD9 ML_version number */
+	al_version;				/**< holds the KXSD9 AL_version number */
+	unsigned char dev_addr;			/**< initializes KXSD9's I2C device address 0x38 */
+	unsigned char int_mask;			/**< stores the current KXSD9 API generated interrupt mask */
+	KXSD9_WR_FUNC_PTR;		  	/**< function pointer to the SPI/I2C write function */
+	KXSD9_RD_FUNC_PTR;		  	/**< function pointer to the SPI/I2C read function */
+	void (*delay_msec)( MDELAY_DATA_TYPE ); /**< function pointer to a pause in mili seconds function */
+	struct early_suspend early_suspend;	/**< suspend function */
+} kxsd9_t;
+
+
+/* bit slice positions in registers */
+
+/* cond BITSLICE */
+#define CHIP_ID__POS		0
+#define CHIP_ID__MSK		0x07
+#define CHIP_ID__LEN		3
+#define CHIP_ID__REG		CHIP_ID_REG
+
+#define ML_VERSION__POS		0
+#define ML_VERSION__LEN		4
+#define ML_VERSION__MSK		0x0F
+#define ML_VERSION__REG		VERSION_REG
+
+#define AL_VERSION__POS		4
+#define AL_VERSION__LEN		4
+#define AL_VERSION__MSK		0xF0
+#define AL_VERSION__REG		VERSION_REG
+
+
+/* BANDWIDTH dependend definitions */
+#define BANDWIDTH__POS		0
+#define BANDWIDTH__LEN		3
+#define BANDWIDTH__MSK		0x07
+#define BANDWIDTH__REG		RANGE_BWIDTH_REG
+
+
+/* RANGE */
+#define RANGE__POS		3
+#define RANGE__LEN		2
+#define RANGE__MSK		0x18
+#define RANGE__REG		RANGE_BWIDTH_REG
+
+
+/* WAKE UP */
+#define WAKE_UP__POS		0
+#define WAKE_UP__LEN		1
+#define WAKE_UP__MSK		0x01
+#define WAKE_UP__REG		KXSD9_CONF2_REG
+
+
+#define WAKE_UP_PAUSE__POS	1
+#define WAKE_UP_PAUSE__LEN	2
+#define WAKE_UP_PAUSE__MSK	0x06
+#define WAKE_UP_PAUSE__REG	KXSD9_CONF2_REG
+
+
+#define KXSD9_GET_BITSLICE(regvar, bitname)\
+			(regvar & bitname##__MSK) >> bitname##__POS
+
+
+#define KXSD9_SET_BITSLICE(regvar, bitname, val)\
+		  (regvar & ~bitname##__MSK) | ((val<<bitname##__POS)&bitname##__MSK)
+
+
+/** endcond */
+
+
+/* CONSTANTS */
+
+
+/* range and bandwidth */
+//cvs
+#define KXSD9_RANGE_2G			3 /**< sets range to 2G mode \see bma020_set_range() */
+#define KXSD9_RANGE_4G			2 /**< sets range to 4G mode \see bma020_set_range() */
+#define KXSD9_RANGE_8G			0 /**< sets range to 8G mode \see bma020_set_range() */
+
+
+#define KXSD9_BW_25HZ		0	/**< sets bandwidth to 25HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_50HZ		1	/**< sets bandwidth to 50HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_100HZ		2	/**< sets bandwidth to 100HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_190HZ		3	/**< sets bandwidth to 190HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_375HZ		4	/**< sets bandwidth to 375HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_750HZ		5	/**< sets bandwidth to 750HZ \see bma020_set_bandwidth() */
+#define KXSD9_BW_1500HZ	6	/**< sets bandwidth to 1500HZ \see bma020_set_bandwidth() */
+
+/* mode settings */
+
+#define KXSD9_MODE_NORMAL      0
+#define KXSD9_MODE_SLEEP       2
+#define KXSD9_MODE_WAKE_UP     3
+
+/* wake up */
+
+#define KXSD9_WAKE_UP_PAUSE_20MS		0
+#define KXSD9_WAKE_UP_PAUSE_80MS		1
+#define KXSD9_WAKE_UP_PAUSE_320MS		2
+#define KXSD9_WAKE_UP_PAUSE_2560MS		3
+
+
+/* KXSD9 Defines */
+#define KXSD9_XOUT_H		0x00
+#define KXSD9_XOUT_L		0x01
+#define KXSD9_YOUT_H		0x02
+#define KXSD9_YOUT_L		0x03
+#define KXSD9_ZOUT_H		0x04
+#define KXSD9_ZOUT_L		0x05
+#define KXSD9_AUXOUT_H		0x06
+#define KXSD9_AUXOUT_L		0x07
+#define KXSD9_RESET_WRITE	0x0A
+#define KXSD9_CTRL_REGC		0x0C
+#define KXSD9_CTRL_REGB		0x0D
+#define KXSD9_CTRL_REGA		0x0E
+
+#define KXSD9_RESET_KEY		0xCA
+
+#define KXSD9_REGC_LP2		(1 << 7)
+#define KXSD9_REGC_LP1		(1 << 6)
+#define KXSD9_REGC_LP0		(1 << 5)
+#define KXSD9_REGC_MOTLEV	(1 << 4)
+#define KXSD9_REGC_MOTLAT	(1 << 3)
+#define KXSD9_REGC_FS1		(1 << 1)
+#define KXSD9_REGC_FS0		(1 << 0)
+
+/*
+    * 'CLKhld=1' makes KXSD9 hold SCL low during A/D conversions. This may
+     * affect the operation of other I2C devices. Thus, I don't think it is
+      * good to set CLKhld to 1.
+       */
+#define KXSD9_REGB_CLKHLD	(1 << 7)
+#define KXSD9_REGB_ENABLE	(1 << 6)
+#define KXSD9_REGB_MOTIEN	(1 << 2)
+
+#define KXSD9_REGA_MOTI		(1 << 1)
+
+/*
+    * Default Full Scale Range: +/-2 g
+     * 12-bit Sensitivity : 819 counts/g
+      */
+#define KXSD9_RANGE_DEFAULT	(KXSD9_REGC_FS1 | KXSD9_REGC_FS0)
+
+/* Default Motion Wake Up Acceleration Threshold: +/-1 g */
+#define KXSD9_THRESHOLD_DEFAULT	(KXSD9_REGC_MOTLEV | KXSD9_RANGE_DEFAULT)
+
+/* Default Operational Bandwidth (Filter Corner Frequency): 50Mhz */
+#define KXSD9_BW_DEFAULT	(KXSD9_REGC_LP0 | KXSD9_REGC_LP1 |\
+						KXSD9_REGC_LP2)
+
+#define MAX_12BIT		((1 << 12) - 1)
+
+/* Function prototypes */
+
+int bma020_init(kxsd9_t *);
+int bma020_set_image (kxsd9regs_t *);
+int bma020_get_image(kxsd9regs_t *);
+int bma020_get_offset(unsigned char, unsigned short *);
+int bma020_set_offset(unsigned char, unsigned short );
+int bma020_set_offset_eeprom(unsigned char, unsigned short);
+int bma020_soft_reset(void);
+int bma020_update_image(void);
+int bma020_write_ee(unsigned char , unsigned char ) ;
+int bma020_set_ee_w(unsigned char);
+int bma020_selftest(unsigned char);
+int bma020_get_selftest_result(unsigned char *);
+int bma020_set_range(char);
+int bma020_get_range(unsigned char*);
+int bma020_set_mode(unsigned char);
+unsigned char bma020_get_mode(void);
+int bma020_set_wake_up_pause(unsigned char);
+int bma020_get_wake_up_pause(unsigned char *);
+int bma020_set_bandwidth(char);
+int bma020_get_bandwidth(unsigned char *);
+int bma020_set_low_g_threshold(unsigned char);
+int bma020_get_low_g_threshold(unsigned char*);
+int bma020_set_low_g_hysteresis(unsigned char);
+int bma020_set_low_g_countdown(unsigned char);
+int bma020_get_low_g_countdown(unsigned char *);
+int bma020_get_low_g_hysteresis(unsigned char*);
+int bma020_set_low_g_duration(unsigned char);
+int bma020_get_low_g_duration(unsigned char*);
+int bma020_set_high_g_threshold(unsigned char);
+int bma020_get_high_g_threshold(unsigned char*);
+int bma020_set_high_g_hysteresis(unsigned char);
+int bma020_set_high_g_countdown(unsigned char);
+int bma020_get_high_g_countdown(unsigned char *);
+int bma020_get_high_g_hysteresis(unsigned char*);
+int bma020_set_high_g_duration(unsigned char);
+int bma020_get_high_g_duration(unsigned char*);
+int bma020_set_any_motion_threshold(unsigned char);
+int bma020_get_any_motion_threshold(unsigned char*);
+int bma020_set_any_motion_count(unsigned char);
+int bma020_get_any_motion_count(unsigned char *);
+int bma020_read_accel_x(short *);
+int bma020_read_accel_y(short *);
+int bma020_read_accel_z(short *);
+int bma020_read_temperature(unsigned char*);
+int kxsd9_read_accel_xyz(struct kxsd9 *, kxsd9acc_t *);
+int bma020_get_interrupt_status(unsigned char *);
+int bma020_reset_interrupt(void);
+int bma020_set_interrupt_mask(unsigned char);
+int bma020_get_interrupt_mask(unsigned char *);
+int bma020_set_low_g_int(unsigned char);
+int bma020_set_high_g_int(unsigned char);
+int bma020_set_any_motion_int(unsigned char);
+int bma020_set_alert_int(unsigned char);
+int bma020_set_advanced_int(unsigned char);
+int bma020_latch_int(unsigned char);
+int bma020_set_new_data_int(unsigned char onoff);
+int bma020_pause(int);
+int bma020_read_reg(unsigned char , unsigned char *, unsigned char);
+int bma020_write_reg(unsigned char , unsigned char*, unsigned char );
+#endif   // __KXSD9_H__
+
Index: android-2.6.35/drivers/sensors/accel/kxsd9_acc.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/kxsd9_acc.h	2010-12-22 14:36:04.141988371 +0530
@@ -0,0 +1,21 @@
+#ifndef __KXSD9_ACC_HEADER__
+#define __KXSD9_ACC_HEADER__
+
+#include "kxsd9_i2c.h"
+#include "kxsd9.h"
+
+#define ACC_DEV_NAME		"accelerometer"
+#define ACC_DEV_MAJOR		241
+
+#define KXSD9_MAJOR		100
+
+/* kxsd9 ioctl command label */
+#define IOCTL_KXSD9_GET_ACC_VALUE		0
+#define DCM_IOC_MAGIC				's'
+#define IOC_SET_ACCELEROMETER			_IO (DCM_IOC_MAGIC, 0x64)
+
+
+#define KXSD9_POWER_OFF		0
+#define KXSD9_POWER_ON		1
+
+#endif
Index: android-2.6.35/drivers/sensors/accel/kxsd9_i2c.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/sensors/accel/kxsd9_i2c.h	2010-12-22 14:36:04.141988371 +0530
@@ -0,0 +1,10 @@
+#ifndef __KXSD9_I2C_HEADER__
+#define __KXSD9_I2C_HEADER__
+
+int kxsd9_i2c_rxdata(char *rxData, int length);
+int kxsd9_i2c_txdata(char *txData, int length);
+
+int  i2c_acc_kxsd9_init(void);
+void i2c_acc_kxsd9_exit(void);
+
+#endif
Index: android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:03.923238696 +0530
+++ android-2.6.35/arch/arm/configs/android_4430_samsung_defconfig	2010-12-22 14:36:54.983862276 +0530
@@ -770,6 +770,8 @@
 CONFIG_NEW_SENSORS=y
 CONFIG_OPTICAL=y
 CONFIG_OPTICAL_ISL29023=y
+CONFIG_ACCEL=y
+CONFIG_ACCEL_KXSD9=y
 CONFIG_MISC_DEVICES=y
 # CONFIG_AD525X_DPOT is not set
 CONFIG_ANDROID_PMEM=y
