Index: kernel/arch/arm/mach-omap2/i2c-omap-gpio.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/i2c-omap-gpio.c	2011-03-16 00:37:46.000000000 +0900
+++ kernel/arch/arm/mach-omap2/i2c-omap-gpio.c	2011-03-16 00:48:26.197877846 +0900
@@ -260,6 +260,14 @@
 	return ack;
 }
 
+static void omap_gpio_i2c_smbus_ack(OMAP_GPIO_I2C_CLIENT * client)
+{
+    gpio_set_value(client->scl, GPIO_LEVEL_HIGH);
+     udelay(client->delay);
+     gpio_set_value(client->scl, GPIO_LEVEL_LOW);
+}
+
+
 //
 // omap_gpio_i2c_write
 //
@@ -320,6 +328,73 @@
 EXPORT_SYMBOL(omap_gpio_i2c_write);
 
 //
+// omap_gpio_i2c_smbus_write
+//
+
+int omap_gpio_i2c_smbus_write(OMAP_GPIO_I2C_CLIENT * client, OMAP_GPIO_I2C_WR_DATA *i2c_param)
+{
+    int i = 0;
+
+    mutex_lock(&omap_gpio_i2c_mutex);
+    // send start condition
+    omap_gpio_i2c_send_start(client);
+
+    // send slave address
+    omap_gpio_i2c_send_byte(client, (client->addr << 1) | I2C_M_WR);
+
+    // receive ack/nack from slave
+
+   omap_gpio_i2c_smbus_ack(client);
+    /*if( !omap_gpio_i2c_poll_ack(client) )
+    {
+        omap_gpio_i2c_send_stop(client);
+        printk("[omap_gpio_i2c_do_write] ack timeout while sending SA+W\n");
+        mutex_unlock(&omap_gpio_i2c_mutex);
+        return -EIO;
+    }
+   */
+
+    // send register address
+    for(i=0; i < i2c_param->reg_len; i++)
+    {
+        omap_gpio_i2c_send_byte( client, i2c_param->reg_addr[(i2c_param->reg_len-1)-i] );
+
+       omap_gpio_i2c_smbus_ack(client);
+       /*if( !omap_gpio_i2c_poll_ack(client) )
+        {
+            omap_gpio_i2c_send_stop(client);
+            printk("[omap_gpio_i2c_do_write] ack timeout while sending RA\n");
+            mutex_unlock(&omap_gpio_i2c_mutex);
+            return -EIO;
+        }*/
+    }
+ 	// send data
+    for(i=0; i < i2c_param->wdata_len; i++)
+    {
+        omap_gpio_i2c_send_byte( client, i2c_param->wdata[i] );
+
+       omap_gpio_i2c_smbus_ack(client);
+       /*if( !omap_gpio_i2c_poll_ack(client) )
+        {
+            omap_gpio_i2c_send_stop(client);
+            printk("[omap_gpio_i2c_do_write] ack timeout while writing DATA\n");
+            mutex_unlock(&omap_gpio_i2c_mutex);
+            return -EIO;
+        }*/
+    }
+
+    // send stop condition
+    omap_gpio_i2c_send_stop(client);
+
+    mutex_unlock(&omap_gpio_i2c_mutex);
+
+    return 0;
+}
+
+EXPORT_SYMBOL(omap_gpio_i2c_smbus_write);
+
+
+//
 // omap_gpio_i2c_read
 //
 int omap_gpio_i2c_read(OMAP_GPIO_I2C_CLIENT * client, OMAP_GPIO_I2C_RD_DATA *i2c_param)
@@ -404,3 +479,89 @@
 
 EXPORT_SYMBOL(omap_gpio_i2c_read);
 
+//
+// omap_gpio_i2c_smbus_read
+//
+int omap_gpio_i2c_smbus_read(OMAP_GPIO_I2C_CLIENT * client, OMAP_GPIO_I2C_RD_DATA *i2c_param)
+{
+    int i = 0;
+
+    // check argument
+    if(client == NULL)
+    {
+        printk(KERN_ERR "[%s] client is null!\n", __func__);
+        return -EINVAL;
+    }
+
+    mutex_lock(&omap_gpio_i2c_mutex);
+
+    // send start condition
+    omap_gpio_i2c_send_start(client);
+
+    // if the client wants to send/receive in one command using SR
+    if(i2c_param->reg_len > 0)
+    {
+        // send slave address
+        omap_gpio_i2c_send_byte(client, (client->addr << 1) | I2C_M_WR);
+
+        // check ack/nack
+       omap_gpio_i2c_smbus_ack(client);
+       /* if( !omap_gpio_i2c_poll_ack(client) )
+        {
+            omap_gpio_i2c_send_stop(client);
+            printk("[omap_gpio_i2c_do_read] ack timeout while sending SA+W\n");
+            mutex_unlock(&omap_gpio_i2c_mutex);
+            return -EIO;
+        }*/
+
+        // send data
+        for(i = 0; i < i2c_param->reg_len; i++)
+        {
+            omap_gpio_i2c_send_byte( client, i2c_param->reg_addr[(i2c_param->reg_len-1)-i] );
+           omap_gpio_i2c_smbus_ack(client);
+           /*if( !omap_gpio_i2c_poll_ack(client) )
+            {
+				omap_gpio_i2c_send_stop(client);
+                printk("[omap_gpio_i2c_do_read] ack timeout while sending RA\n");
+               mutex_unlock(&omap_gpio_i2c_mutex);
+                return -EIO;
+            }*/
+        }
+
+        omap_gpio_i2c_send_stop(client);
+        udelay(client->delay);
+
+        omap_gpio_i2c_send_start(client);
+    }
+
+    // send slave address
+    omap_gpio_i2c_send_byte(client, (client->addr << 1) | I2C_M_RD);
+   omap_gpio_i2c_smbus_ack(client);
+
+   /*if( !omap_gpio_i2c_poll_ack(client) )
+    {
+        omap_gpio_i2c_send_stop(client);
+        printk("[omap_gpio_i2c_do_read] ack timeout while sending SA+R\n");
+        mutex_unlock(&omap_gpio_i2c_mutex);
+        return -EIO;
+    }*/
+
+    // receive data and send ack or nack
+    for(i = 0; i < i2c_param->rdata_len; i++)
+    {
+        i2c_param->rdata[i] = omap_gpio_i2c_read_byte(client);
+
+        if(i == (i2c_param->rdata_len-1))
+            omap_gpio_i2c_send_nack(client);
+        else
+            omap_gpio_i2c_send_ack(client);
+    }
+
+    // terminate communication
+    omap_gpio_i2c_send_stop(client);
+    mutex_unlock(&omap_gpio_i2c_mutex);
+
+    return 0;
+}
+EXPORT_SYMBOL(omap_gpio_i2c_smbus_read);
+
Index: kernel/arch/arm/plat-omap/include/plat/i2c-omap-gpio.h
===================================================================
--- kernel.orig/arch/arm/plat-omap/include/plat/i2c-omap-gpio.h	2011-03-16 00:37:46.000000000 +0900
+++ kernel/arch/arm/plat-omap/include/plat/i2c-omap-gpio.h	2011-03-16 00:52:15.307877857 +0900
@@ -34,3 +34,5 @@
 extern void omap_gpio_i2c_deinit(OMAP_GPIO_I2C_CLIENT *);
 extern int omap_gpio_i2c_write(OMAP_GPIO_I2C_CLIENT *, OMAP_GPIO_I2C_WR_DATA *);
 extern int omap_gpio_i2c_read(OMAP_GPIO_I2C_CLIENT *, OMAP_GPIO_I2C_RD_DATA *);
+extern int omap_gpio_i2c_smbus_read(OMAP_GPIO_I2C_CLIENT *, OMAP_GPIO_I2C_RD_DATA *);
+extern int omap_gpio_i2c_smbus_write(OMAP_GPIO_I2C_CLIENT *, OMAP_GPIO_I2C_WR_DATA *);
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234.c
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/sii9234.c	2011-03-16 00:37:46.000000000 +0900
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234.c	2011-03-16 01:19:08.880378995 +0900
@@ -44,6 +44,7 @@
 #include "sii9234_driver.h"
 #include "Common_Def.h"
 #include <plat/i2c-omap-gpio.h>
+
 #define SUBJECT "MHL_DRIVER"
 
 #define SII_DEV_DBG(format,...)\
@@ -290,7 +291,7 @@
 		SII_DEV_DBG("I2C not ready");
 		return 0;
 	}
-	u8 buf=0;
+	u8 buf[1];
 	printk("[Dharam] reading reg:%x\n",reg);
 
 	OMAP_GPIO_I2C_RD_DATA i2c_rd_param;
@@ -298,8 +299,8 @@
     i2c_rd_param.reg_len = 1;
     i2c_rd_param.reg_addr = &reg;
     i2c_rd_param.rdata_len = 1;
-    i2c_rd_param.rdata = &buf;
-    omap_gpio_i2c_read(client_ptr, &i2c_rd_param);
+    i2c_rd_param.rdata = buf;
+    omap_gpio_i2c_smbus_read(client_ptr, &i2c_rd_param);
 
 	//printk(KERN_ERR "#######Read reg %x data %x\n", reg, ret);
 
@@ -310,7 +311,8 @@
 	}
 	return ret;
 	*/
-	printk("[Dharam] read value:%x\n",buf);
+	printk("[Dharam] read value:%x\n",buf[0] );
+	return (buf[0]);
 }
 EXPORT_SYMBOL(sii9234_i2c_read);
 
@@ -336,7 +338,7 @@
     i2c_wr_param.reg_addr = &reg;
     i2c_wr_param.wdata_len = 1;
     i2c_wr_param.wdata = &data;
-    omap_gpio_i2c_write(client_ptr, &i2c_wr_param);
+    omap_gpio_i2c_smbus_write(client_ptr, &i2c_wr_param);
    
 
     return ret;
@@ -389,8 +391,8 @@
 
 	printk(KERN_ERR"[MHL_TEST] sii9234_i2c_probe");
 	
-	sii9234_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x72,100);
-	
+	sii9234_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x72,1000);
+		printk(KERN_ERR"bit-banging\n");
 	printk(KERN_ERR "SII9234 attach success!!!\n");
 	MHL_i2c_init = 1;
 
@@ -411,23 +413,13 @@
     if (device_create_file(mhl_dev, &dev_attr_MHD_file) < 0)
         printk(KERN_ERR "Failed to create device file(%s)!\n", dev_attr_MHD_file.attr.name);
 
-   //Routines for checking the read and write operations are working properly or not
-    OMAP_GPIO_I2C_RD_DATA i2c_rd_param;
-    u8 reg=0x03;
-    u8 buf =0;
-    i2c_rd_param.reg_len = 1;
-    i2c_rd_param.reg_addr = &reg;
-    i2c_rd_param.rdata_len = 1;
-    i2c_rd_param.rdata = &buf;
-    int x =omap_gpio_i2c_read(sii9234_i2c_client,&i2c_rd_param);
-    printk("[Dharam]%s read/write testing..value read=%x return_status=%x\n",__func__,buf,x);
 
 	return 0;
 
 }
 static int sii9234a_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        sii9234a_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x7A,100);
+        sii9234a_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x7A,1000);
         printk(KERN_ERR "SII9234A attach success!!!\n");
         MHL_i2c_init = 1;
         return 0;
@@ -436,7 +428,7 @@
 static int sii9234b_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
         printk(KERN_ERR"[MHL_TEST] sii9234b_i2c_probe");
-        sii9234b_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x92,100);
+        sii9234b_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0x92,1000);
         printk(KERN_ERR "SII9234B attach success!!!\n");
         return 0;
 
@@ -444,7 +436,7 @@
 static int sii9234c_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
         printk(KERN_ERR"[MHL_TEST] sii9234c_i2c_probe");
-        sii9234c_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0xC8,100);
+        sii9234c_i2c_client = omap_gpio_i2c_init(GPIO_MHL_SDA_18V,GPIO_MHL_SCL_18V,0xC8,1000);
         printk(KERN_ERR "SII9234C attach success!!!\n");
         MHL_i2c_init = 1;
 
@@ -471,6 +463,7 @@
         }
         //[Dharam]Calling MHL_On(1) for testing purpose.
         MHL_On(1);
+		
         return 0;
 
 }
@@ -744,7 +737,8 @@
 
 	return ret;	
 }
-module_init(sii9234_module_init);
+//module_init(sii9234_module_init);
+late_initcall(sii9234_module_init);
 
 static void __exit sii9234_exit(void)
 {
