Index: android-2.6.35/arch/arm/configs/android_omap4tab_rev03_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_omap4tab_rev03_defconfig	2010-12-22 14:36:06.931988926 +0530
+++ android-2.6.35/arch/arm/configs/android_omap4tab_rev03_defconfig	2010-12-22 14:36:07.133239360 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35
-# Sat Oct 23 14:05:05 2010
+# Thu Nov  4 19:17:12 2010
 #
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
@@ -1434,7 +1434,7 @@
 CONFIG_OMAP2_DSS_DPI=y
 # CONFIG_OMAP2_DSS_RFBI is not set
 # CONFIG_OMAP2_DSS_VENC is not set
-# CONFIG_OMAP2_DSS_HDMI is not set
+CONFIG_OMAP2_DSS_HDMI=y
 # CONFIG_OMAP2_DSS_DSI is not set
 CONFIG_OMAP2_DSS_FAKE_VSYNC=y
 CONFIG_OMAP2_DSS_MIN_FCK_PER_PCK=0
@@ -1702,8 +1702,8 @@
 # CONFIG_USB_GPIO_VBUS is not set
 # CONFIG_USB_ULPI is not set
 # CONFIG_TWL4030_USB is not set
-# CONFIG_TWL6030_USB is not set
-CONFIG_NOP_USB_XCEIV=y
+CONFIG_TWL6030_USB=y
+# CONFIG_NOP_USB_XCEIV is not set
 CONFIG_MMC=y
 # CONFIG_MMC_DEBUG is not set
 CONFIG_MMC_UNSAFE_RESUME=y
Index: android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- android-2.6.35.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:06.931988926 +0530
+++ android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:46.183862600 +0530
@@ -63,9 +63,12 @@
 #define SDP4430_LVDS_nRST_ENABLE_GPIO			17
 #else
 #define OMAP4TAB_MLCD_ON_GPIO				40
-#define OMAP4TAB_LVDS_nRST_GPIO				53
+#define OMAP4TAB_LED_BACKLIGHT_RESET_GPIO		93
+#define OMAP4TAB_LVDS_nSHDN_GPIO			53
 #define OMAP4TAB_TOUCH_nINT_GPIO			90
 #define OMAP4TAB_TOUCH_nRST_GPIO			89
+#define OMAP4TAB_MOTOR_EN1_GPIO				42
+#define OMAP4TAB_MOTOR_EN2_GPIO				43
 #endif
 
 #define OMAP4SDP_MDM_PWR_EN_GPIO			157
@@ -87,10 +90,11 @@
 static unsigned backlight_gpio;
 static unsigned mlcd1_enable_gpio;
 static unsigned mlcd2_enable_gpio;
-static unsigned lvds_nrst_gpio;	
+static unsigned lvds_nshdn_gpio;	
 #else
-static unsigned lvds_nrst_gpio;
+static unsigned lvds_nshdn_gpio;
 static unsigned mlcd_on_gpio;
+static unsigned led_backlight_reset_gpio;
 static unsigned touch_nrst_gpio;
 #endif
 
@@ -186,7 +190,7 @@
         gpio_direction_output(mlcd1_enable_gpio, 1);
         gpio_direction_output(mlcd2_enable_gpio, 1);
 
-        gpio_direction_output(lvds_nrst_gpio, 1);
+        gpio_direction_output(lvds_nshdn_gpio, 1);
 	gpio_direction_output(backlight_gpio, 1);
 
         lcd_enabled = 1;
@@ -220,7 +224,7 @@
 
 	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
         gpio_direction_output(mlcd_on_gpio, 1);
-        gpio_direction_output(lvds_nrst_gpio, 1);
+        gpio_direction_output(lvds_nshdn_gpio, 1);
 	
         lcd_enabled = 1;
 	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
@@ -233,7 +237,7 @@
         lcd_enabled = 0;
 
         gpio_direction_output(mlcd_on_gpio, 0);
-        gpio_direction_output(lvds_nrst_gpio, 0);
+        gpio_direction_output(lvds_nshdn_gpio, 0);
 	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
 	return;
 
@@ -262,6 +266,8 @@
 			goto err0;
 	}
 
+	gpio_direction_output(touch_nrst_gpio, 0);
+	udelay(1);
 	gpio_direction_output(touch_nrst_gpio, 1);
 	printk("[SHANKAR] %s[%d] enabled maXTOUCH nRST GPIO \n", __func__, __LINE__);
 	return;
@@ -1041,7 +1047,7 @@
         mlcd1_enable_gpio    = SDP4430_MLCD1_PANEL_ENABLE_GPIO;
         mlcd2_enable_gpio    = SDP4430_MLCD2_PANEL_ENABLE_GPIO;
         backlight_gpio = SDP4430_LCD_PANEL_BACKLIGHT_ENABLE_GPIO;
-        lvds_nrst_gpio = SDP4430_LVDS_nRST_ENABLE_GPIO;
+        lvds_nshdn_gpio = SDP4430_LVDS_nRST_ENABLE_GPIO;
 
         r = gpio_request(mlcd1_enable_gpio, "LCD MLCD_ON");
        if (r) {
@@ -1059,7 +1065,7 @@
                 printk(KERN_ERR "failed to get LCD backlight GPIO\n");
                 goto err1;
         }
-        r = gpio_request(lvds_nrst_gpio, "LVDS_nRST");
+        r = gpio_request(lvds_nshdn_gpio, "LVDS_nRST");
         if (r) {
                 printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
                 goto err0;
@@ -1068,11 +1074,11 @@
         gpio_direction_output(mlcd1_enable_gpio, 0);
         gpio_direction_output(mlcd2_enable_gpio, 0);
         gpio_direction_output(backlight_gpio, 0);
-        gpio_direction_output(lvds_nrst_gpio, 0);
+        gpio_direction_output(lvds_nshdn_gpio, 0);
 
         return;
 err2:
-        gpio_free(lvds_nrst_gpio);
+        gpio_free(lvds_nshdn_gpio);
 err1:
         gpio_free(mlcd1_enable_gpio);
         gpio_free(mlcd2_enable_gpio);
@@ -1087,7 +1093,8 @@
 	    int r;
 
         mlcd_on_gpio    = OMAP4TAB_MLCD_ON_GPIO;
-        lvds_nrst_gpio  = OMAP4TAB_LVDS_nRST_GPIO;
+        led_backlight_reset_gpio    = OMAP4TAB_LED_BACKLIGHT_RESET_GPIO;
+        lvds_nshdn_gpio  = OMAP4TAB_LVDS_nSHDN_GPIO;
 
         r = gpio_request(mlcd_on_gpio, "LCD MLCD_ON");
         if (r) {
@@ -1095,24 +1102,49 @@
                 goto err0;
         }
 
-        r = gpio_request(lvds_nrst_gpio, "LVDS_nRST");
+        r = gpio_request(lvds_nshdn_gpio, "LVDS_nRST");
         if (r) {
                 printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
                 goto err1;
         }
+        r = gpio_request(led_backlight_reset_gpio, "LCD LED_BACKLIGHT_RESET");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err0;
+        }
 
         gpio_direction_output(mlcd_on_gpio, 0);
-        gpio_direction_output(lvds_nrst_gpio, 0);
+        gpio_direction_output(led_backlight_reset_gpio, 0);
+	mdelay(1);
+        gpio_direction_output(led_backlight_reset_gpio, 1);
+        gpio_direction_output(lvds_nshdn_gpio, 0);
 
         return;
 
 err1:
-        gpio_free(lvds_nrst_gpio);
+        gpio_free(lvds_nshdn_gpio);
 err0:
 		gpio_free(mlcd_on_gpio);
         return;
 }
 
+static void omap4tab_touch_init(void)
+{
+	printk("[SHANKAR] %s[%d] Entry \n", __func__, __LINE__);
+	gpio_request(101, "TOUCH ENable GPIO");
+	gpio_direction_output(101, 1);
+	msleep(200);
+	printk("[SHANKAR] %s[%d] exit \n", __func__, __LINE__);
+	
+}
+static void omap4tab_vib_motor_init(void)
+{
+	/* Move this to proper place TBD */
+	gpio_request(OMAP4TAB_MOTOR_EN1_GPIO, "Vib Motor 1 GPIO");
+	gpio_direction_output(OMAP4TAB_MOTOR_EN1_GPIO, 0);
+	gpio_request(OMAP4TAB_MOTOR_EN2_GPIO, "Vib Motor 2 GPIO");
+	gpio_direction_output(OMAP4TAB_MOTOR_EN2_GPIO, 0);
+}
 #endif
 static void enable_board_wakeup_source(void)
 {
@@ -1164,6 +1196,8 @@
 	int status;
 
 	omap4tab_gpiowk_setup();
+	omap4tab_touch_init();
+	omap4tab_vib_motor_init();
 	omap4430_internal_i2c4_pull_up();
 	omap4_i2c_init();
 	omap4tab_display_init();
@@ -1174,10 +1208,12 @@
 #ifdef CONFIG_TIWLAN_SDIO
 	wlan_1283_config();
 #endif
-
+# if 0
 	usb_uhhtll_init(&usbhs_pdata);
 	usb_ehci_init();
 	usb_ohci_init();
+#endif
+
 	/* OMAP4 SDP uses internal transceiver so register nop transceiver */
 	usb_nop_xceiv_register();
 	usb_musb_init(&musb_board_data);
@@ -1189,9 +1225,6 @@
 	omap_display_init(&omap4tab_dss_data);
 	enable_board_wakeup_source();
 
-	gpio_request(100, "TOUCH ENable GPIO");
-	gpio_direction_output(100, 1);
-	msleep(10);
 
 	samsung_omap4_pwr_key_irq_init();
 
Index: android-2.6.35/drivers/video/omap2/displays/cmc623.c
===================================================================
--- android-2.6.35.orig/drivers/video/omap2/displays/cmc623.c	2010-12-22 14:36:06.443238791 +0530
+++ android-2.6.35/drivers/video/omap2/displays/cmc623.c	2010-12-22 14:36:07.133239360 +0530
@@ -43,9 +43,9 @@
 
 #define CMC623_DRIVER_NAME	"cmc623_i2c_driver"
 
-#define CMC623_IMA_nRST_GPIO                  32
-#define CMC623_IMA_BYPASS_GPIO                33
-#define CMC623_IMA_PWR_EN_GPIO                34
+#define CMC623_IMA_nRST_GPIO                  62
+#define CMC623_IMA_BYPASS_GPIO                55
+#define CMC623_IMA_PWR_EN_GPIO                36
 #define CMC623_IMA_SLEEP_GPIO                 35
 
 static unsigned cmc623_ima_nrst_gpio;
@@ -150,7 +150,7 @@
 	//int retry = 0;
 	int err;
 
-	printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 
 	if (!sd->client->adapter)
 	{                
@@ -169,12 +169,12 @@
 	err = i2c_transfer(sd->client->adapter, &msg, 1);
 	mutex_unlock(&sd->xfer_lock);
 
-	printk("[SHANKAR] %s [%d] EXIT", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] EXIT \n", __func__, __LINE__);
     if (err > 0)
         return 0;
     else
     {
-		printk("[SHANKAR] %s [%d] I2C write faild", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] I2C write faild \n", __func__, __LINE__);
 		return -1;
     }
 
@@ -191,7 +191,7 @@
 		//int retry = 0;
 		int err;
 	
-		printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 	
 		if (!sd->client->adapter)
 		{				 
@@ -211,12 +211,12 @@
 		err = i2c_transfer(sd->client->adapter, &msg, 1);
 		mutex_unlock(&sd->xfer_lock);
 	
-		printk("[SHANKAR] %s [%d] EXIT", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] EXIT \n", __func__, __LINE__);
 		if (err > 0)
 			return 0;
 		else
 		{
-			printk("[SHANKAR] %s [%d] I2C write faild", __func__, __LINE__);
+			//printk("[SHANKAR] %s [%d] I2C write faild \n", __func__, __LINE__);
 			return -1;
 		}
 
@@ -235,7 +235,7 @@
 	//int retry = 0;
 	int err;
 	
-	printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 	
 	if (!sd->client->adapter)
 	{				 
@@ -261,7 +261,7 @@
         return 0;
     else
     {
-		printk("[SHANKAR] %s [%d] I2C write faild", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] I2C write faild \n", __func__, __LINE__);
 		return -1;
     }
     
@@ -276,7 +276,7 @@
 	//int retry = 0;
 	int err;
 	
-	printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 	
 	if (!sd->client->adapter)
 	{				 
@@ -302,7 +302,7 @@
         return 0;
     else
     {
-		printk("[SHANKAR] %s [%d] I2C write faild", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] I2C write faild \n", __func__, __LINE__);
 		return -1;
     }
 
@@ -338,7 +338,7 @@
 #if 0
 	if(!p_cmc623_data)
 		{
-		printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
+		//printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
 		return;
 		}
 #endif
@@ -362,7 +362,7 @@
 #if 0
 	if(!p_cmc623_data)
 		{
-		printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
+		//printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
 		return;
 		}
 #endif
@@ -383,7 +383,7 @@
 #if 0
 	if(!p_cmc623_data)
 		{
-		printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
+		//printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
 		return;
 		}
 #endif
@@ -399,7 +399,7 @@
 #if 0
 	if(!p_cmc623_data)
 		{
-		printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
+		//printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
 		return;
 		}
 #endif
@@ -415,7 +415,7 @@
 #if 0
 	if(!p_cmc623_data)
 		{
-		printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
+		//printk(KERN_ERR "%s cmc623 is not initialized\n", __func__);
 		return;
 		}
 #endif
@@ -480,7 +480,7 @@
 
 	int tune_level;
 
-	printk( "%s : BL brightness level = %d\n", __func__, intensity);
+	//printk( "%s : BL brightness level = %d\n", __func__, intensity);
 	// brightness tuning
 	if(intensity >= MID_BRIGHTNESS_LEVEL)
 			tune_level = (intensity - MID_BRIGHTNESS_LEVEL) * (MAX_BACKLIGHT_VALUE-MID_BACKLIGHT_VALUE) / (MAX_BRIGHTNESS_LEVEL-MID_BRIGHTNESS_LEVEL) + MID_BACKLIGHT_VALUE;
@@ -501,7 +501,7 @@
 int cmc623_init(void)
 {
 	int err=0;
-	printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 	mutex_init(&sd->xfer_lock);
 	
 	cmc623_ima_nrst_gpio = CMC623_IMA_nRST_GPIO;
@@ -511,25 +511,25 @@
 	
 	err = gpio_request(cmc623_ima_nrst_gpio, "CMC623 IMA_nRST GPIO");
 	if (err) {
-	        printk(KERN_ERR "failed to get CMC623 IMA_nRST GPIO\n");
+	        //printk(KERN_ERR "failed to get CMC623 IMA_nRST GPIO\n");
 	        goto err0;
 	}
 
 	err = gpio_request(cmc623_ima_bypass_gpio, "CMC623 IMA_BYPASS GPIO");
 	if (err) {
-	        printk(KERN_ERR "failed to get CMC623 IMA_BYPASS GPIO\n");
+	        //printk(KERN_ERR "failed to get CMC623 IMA_BYPASS GPIO\n");
 	        goto err1;
 	}
 
 	err = gpio_request(cmc623_ima_pwr_en_gpio, "CMC623 IMA_PWR_EN GPIO");
 	if (err) {
-	        printk(KERN_ERR "failed to get CMC623 IMA_PWR_EN GPIO\n");
+	        //printk(KERN_ERR "failed to get CMC623 IMA_PWR_EN GPIO\n");
 	        goto err2;
 	}
 
 	err = gpio_request(cmc623_ima_sleep_gpio, "CMC623 IMA_SLEEP GPIO");
 	if (err) {
-	        printk(KERN_ERR "failed to get CMC623 IMA_SLEEP GPIO\n");
+	        //printk(KERN_ERR "failed to get CMC623 IMA_SLEEP GPIO\n");
 	        goto err3;
 	}	
 
@@ -554,7 +554,7 @@
     mdelay(4);  // 4ms
     if (cmc623_setup()<0)
 	{
-		printk("[SHANKAR] %s [%d] CMC623 setup failed ", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] CMC623 setup failed \n ", __func__, __LINE__);
 		goto err3;
 	}
 #else  // set by-pass mode
@@ -565,7 +565,7 @@
 	//Set default Back Light Intensity
 	cmc623_set_backlight_intensity(200);
 
-	printk("[SHANKAR] %s [%d] EXIT", __func__, __LINE__);
+	//printk("[SHANKAR] %s [%d] EXIT \n", __func__, __LINE__);
 	return 0;
 
 err3:
@@ -595,20 +595,20 @@
 
 static int cmc623_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+        //printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
         sd = kzalloc(sizeof(struct cmc623_context), GFP_KERNEL);
         if (sd == NULL)
                 return -ENOMEM;
         i2c_set_clientdata(client, sd);
         sd->client = client;
-		printk("[SHANKAR] %s [%d] EXIT", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] EXIT \n", __func__, __LINE__);
         return 0;
 }
 static int cmc623_remove(struct i2c_client *client, const struct i2c_device_id *id)
 {
-        printk("[SHANKAR] %s [%d] ENTER", __func__, __LINE__);
+        //printk("[SHANKAR] %s [%d] ENTER \n", __func__, __LINE__);
 
-		printk("[SHANKAR] %s [%d] EXIT", __func__, __LINE__);
+		//printk("[SHANKAR] %s [%d] EXIT \n", __func__, __LINE__);
         return 0;
 }
 
