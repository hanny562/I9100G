diff --git a/drivers/staging/omap_hsi/hsi-protocol-if.h b/drivers/staging/omap_hsi/hsi-protocol-if.h
index 88ca8a9..e342518 100644
--- a/drivers/staging/omap_hsi/hsi-protocol-if.h
+++ b/drivers/staging/omap_hsi/hsi-protocol-if.h
@@ -55,6 +55,8 @@ struct if_hsi_channel {
 	u32 *rx_buf;
 	unsigned int tx_state;
 	unsigned int rx_state;
+	unsigned int tx_nak_count;
+	unsigned int rx_nak_count;
         spinlock_t lock; /* Serializes access to channel data */
 };
 
@@ -65,6 +67,13 @@ struct if_hsi_iface {
         spinlock_t lock; /* Serializes access to HSI functional interface */
 };
 
+struct if_hsi_cmd {
+	u32 tx_cmd[ 50 ];
+	u32 rx_cmd[ 50 ];
+	struct timespec tx_cmd_time[ 50 ];
+	struct timespec rx_cmd_time[ 50 ];
+};
+
 enum {
   HSI_LL_MSG_BREAK           = 0x00,
   HSI_LL_MSG_ECHO            = 0x01,
diff --git a/drivers/staging/omap_hsi/hsi_protocol.c b/drivers/staging/omap_hsi/hsi_protocol.c
index d37f59c..d7d27fd 100644
--- a/drivers/staging/omap_hsi/hsi_protocol.c
+++ b/drivers/staging/omap_hsi/hsi_protocol.c
@@ -16,7 +16,8 @@
  * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  */
 
-/* #define DEBUG */
+#define DEBUG 1
+
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -65,8 +66,8 @@ void if_notify(int ch, struct hsi_event *ev)
 
         pr_debug("%s, ev = {0x%x, 0x%p, %u}\n", __func__, ev->event, ev->data,
                  ev->count);
-        printk("%s, ev = {0x%x, 0x%p, %u} ch{%d} \n", __func__, ev->event, ev->data,
-                 ev->count, ch);
+//        printk("%s, ev = {0x%x, 0x%p, %u} ch{%d} \n", __func__, ev->event, ev->data,
+//                 ev->count, ch);
 
         spin_lock(&hsi_protocol_data[ch].lock);
 
@@ -106,7 +107,7 @@ void if_notify(int ch, struct hsi_event *ev)
                 list_add_tail(&entry->list, &hsi_protocol_data[ch].tx_queue);
 		spin_unlock(&hsi_protocol_data[ch].lock);
                 pr_debug("%s, HSI_EV_OUT\n", __func__);
-                printk("%s, HSI_EV_OUT\n", __func__);
+                //printk("%s, HSI_EV_OUT\n", __func__);
                 wake_up_interruptible(&hsi_protocol_data[ch].tx_wait);
                 break;
         case HSI_EV_EXCEP:
@@ -176,6 +177,7 @@ int hsi_proto_read(int ch, u32 *buffer, int count)
 
                 if (data_len) {
                         pr_debug("%s, RX finished\n", __func__);
+                        //printk("%s, RX finished, ch-> %d, length = %d\n", __func__, ch, count);
                         spin_lock_bh(&hsi_protocol_data[ch].lock);
                         hsi_protocol_data[ch].poll_event &= ~(POLLIN | POLLRDNORM);
                         spin_unlock_bh(&hsi_protocol_data[ch].lock);
@@ -219,25 +221,21 @@ int hsi_proto_write(int ch, u32 *buffer, int length)
 	unsigned int data_len = 0, ret = -1;
 	struct protocol_queue *entry;
 
-	printk("%s\n",__func__);
         ret = if_hsi_write(ch, buffer, length);
         if (ret < 0) {
 		pr_err("HSI Write ERROR %s \n", __func__);
                 goto out2;
         }else
-		printk("if_hsi_write() returned successfuly\n");
 	spin_lock_bh(&hsi_protocol_data[ch].lock);
         hsi_protocol_data[ch].poll_event &= ~(POLLOUT | POLLWRNORM);
         add_wait_queue(&hsi_protocol_data[ch].tx_wait, &wait);
         spin_unlock_bh(&hsi_protocol_data[ch].lock);
 
-	printk("Added task to waitqueue, sleeping\n");
 	for (;;) {
                 data = NULL;
                 data_len = 0;
 
                 set_current_state(TASK_INTERRUPTIBLE);
-		printk("Inside for loop\n");
                 spin_lock_bh(&hsi_protocol_data[ch].lock);
                 if (!list_empty(&hsi_protocol_data[ch].tx_queue)) {
                         entry = list_entry(hsi_protocol_data[ch].tx_queue.next,
@@ -246,13 +244,12 @@ int hsi_proto_write(int ch, u32 *buffer, int length)
                         data_len = entry->count;
                         list_del(&entry->list);
                         kfree(entry);
-			printk("data_len = %d\n",data_len);
                 }
                 spin_unlock_bh(&hsi_protocol_data[ch].lock);
 
                 if (data_len) {
                         pr_debug("%s, TX finished\n", __func__);
-                        printk("%s, TX finished\n", __func__);
+                        //printk("%s, TX finished, data_len = %d, ch-> %d\n", __func__,length,ch);
                         ret = data_len;
                         break;
                 } else if (signal_pending(current)) {
@@ -261,9 +258,7 @@ int hsi_proto_write(int ch, u32 *buffer, int length)
                         goto out;
                 }
 
-                printk("%s, going to sleep...\n", __func__); 
                 schedule();
-                printk("%s, woke up\n", __func__); 
         }
 
 out:
diff --git a/drivers/staging/omap_hsi/hsi_protocol_cmd.c b/drivers/staging/omap_hsi/hsi_protocol_cmd.c
index 5c69a15..dc33bdb 100644
--- a/drivers/staging/omap_hsi/hsi_protocol_cmd.c
+++ b/drivers/staging/omap_hsi/hsi_protocol_cmd.c
@@ -1,7 +1,9 @@
 /* 
+ *File -  hsi_protocol_if_cmd.c
  *
- * Copyright (C) 2011 Samsung Electrnoics. All rights reserved.
- * 
+ * Implements HSI protocol for Infineon Modem.
+ *
+ * Copyright (C) 2011 Samsung Electronics. All rights reserved.
  *
  * Author: Rupesh Gujare <rupesh.g@samsung.com>
  *
@@ -33,8 +35,9 @@ extern wait_queue_head_t ipc_read_wait, ipc_write_wait;
 int if_hsi_openchannel(struct if_hsi_channel *channel);
 int if_hsi_closechannel(struct if_hsi_channel *channel);
 
-extern u32 avlb_ch, avlb_length;
-extern u32 actual_write;
+extern struct if_hsi_cmd hsi_cmd_history;
+extern int tx_cmd_history_p;
+extern int rx_cmd_history_p;
 
 /*Decode command from received PDU on channle 0*/
 int hsi_decode_cmd( u32 *cmd_data, u32 *cmd, u32 *ch, u32 *param)
@@ -74,7 +77,7 @@ int hsi_decode_cmd( u32 *cmd_data, u32 *cmd, u32 *ch, u32 *param)
 	case HSI_LL_MSG_ACK:
 		*ch = ((data & 0x0F000000) >> 24);
 		*param = (data & 0x00FFFFFF);
-		printk("ACK Received ch=%d, param=%d\n",*ch, *param);
+		//printk("ACK Received ch=%d, param=%d\n",*ch, *param);
 		break;
 	
 	case HSI_LL_MSG_CONF_RATE:
@@ -224,24 +227,58 @@ int set_tx_config(struct if_hsi_channel *ch, u32 mode, u32 max_channels)
 	return ret;
 }
 
+static int saved_cmd_queue = 0;
+static u32 cmd_saved[ 5 ];
 int hsi_protocol_send_command(u32 cmd, u32 channel, u32 param)
 {
-	u32 cmd_array[4] = {0, 0xAAAAAAAA, 0xBBBBBBBB, 0xCCCCCCCC}, ret = -1;
+	struct if_hsi_channel *channel_zero;
+	u32 cmd_array[4] = {0x00000000, 0xAAAAAAAA, 0xBBBBBBBB, 0xCCCCCCCC}, ret = -1;
 
+	channel_zero = &hsi_protocol_iface.channels[0]; 
 	cmd_array[0] = protocol_create_cmd(cmd, channel, &param);
-	ret = hsi_proto_write(0, &cmd_array, 16 );
+	//printk("[%s] CMD = %08x \n",__func__, cmd_array[0]);
+	while (channel_zero->tx_state != HSI_LL_TX_STATE_IDLE){
+		cmd_saved[ saved_cmd_queue ] = cmd_array[ 0 ];
+		saved_cmd_queue++;
+		printk( "(%s) cmd_saved : %x(%d) \n", __func__, cmd_array[ 0 ], saved_cmd_queue );
+
+		return 0;
+	}
+
+SEND_RETRY :
+	
+	channel_zero->tx_state = HSI_LL_TX_STATE_TX;
+	ret = hsi_proto_write(0, cmd_array, 16 );
 	if(ret < 0){
-		printk("Command Write failed %s()\n", __func__);
+		printk("(%s) Command Write failed, CMD->%X \n", __func__,cmd_array[0]);
+		channel_zero->tx_state = HSI_LL_TX_STATE_IDLE;
 		return -1;
-	}else
+	}else{
+		channel_zero->tx_state = HSI_LL_TX_STATE_IDLE;
+
+		printk("[%s] CMD = %08x \n",__func__, cmd_array[0]);
+		
+		hsi_cmd_history.tx_cmd[ tx_cmd_history_p ] = cmd_array[ 0 ];
+		hsi_cmd_history.tx_cmd_time[ tx_cmd_history_p ] = CURRENT_TIME;
+		tx_cmd_history_p++;
+		if( tx_cmd_history_p >= 50 ) tx_cmd_history_p = 0;
+
+		if( saved_cmd_queue ) {
+			saved_cmd_queue--;
+			cmd_array[ 0 ] = cmd_saved[ saved_cmd_queue ];
+
+			goto SEND_RETRY;
+		}
+		
 		return 0;
+	}
 }
 
 
 void rx_stm(u32 cmd, u32 ch, u32 param)
 {
 	struct if_hsi_channel *channel;
-	u32 size = 0, ret;
+	u32 size = 0, tmp_cmd = 0, ret, i;
 	channel = &hsi_protocol_iface.channels[ch]; 
 
 	switch(cmd){
@@ -257,8 +294,7 @@ void rx_stm(u32 cmd, u32 ch, u32 param)
 		switch(channel->tx_state){
 		case HSI_LL_TX_STATE_WAIT_FOR_CONN_CLOSED:
 			channel->tx_state = HSI_LL_TX_STATE_IDLE;
-			printk("Received CONN_CLOSED\n");
-			if_hsi_closechannel(channel);
+			//printk("[%s] Received CONN_CLOSED. ch-> %d\n",__func__,ch);
 			break;
 
 		default:
@@ -272,38 +308,28 @@ void rx_stm(u32 cmd, u32 ch, u32 param)
 
 	case HSI_LL_MSG_ACK:
 		switch(channel->tx_state){
-		struct hst_ctx tx_config;
 		
 		case HSI_LL_TX_STATE_WAIT_FOR_ACK:
 		case HSI_LL_TX_STATE_SEND_OPEN_CONN:
-			printk("ACK received %s()\n",__func__);
-			ret = if_hsi_openchannel(channel);
-			if (ret != 0)
-				pr_err("Unable to open channel %d after ACK for data transfer\n", channel->channel_id);	
-			/*Set Tx Config*/
-			hsi_ioctl(channel->dev, HSI_IOCTL_GET_TX, &tx_config);
-			tx_config.mode = 2;
-			tx_config.channels = HSI_MAX_CHANNELS;
-			ret = hsi_ioctl(channel->dev, HSI_IOCTL_SET_TX, &tx_config);
-			if ( ret == 0)
-				printk ("SET_TX Successful %s()\n",__func__);
+			//printk("ACK received %s()\n",__func__);
 			
 			channel->tx_state = HSI_LL_TX_STATE_TX;
 			size = param;
-			if ((size > 16) && (size % 4))
-				size += (4 - (size % 4));
+			// TEMP: send/read by 16 byte unit for v.11A(CP)
+			if ((size > 16) && (size % 16))
+				size += (16 - (size % 16));
 			else if (size < 16)
 				size = 16;
-			printk("Writing %d bytes data on channel %d, tx_buf = %x,  in %s()\n", size, ch, channel->tx_buf, __func__);
+			//printk("Writing %d bytes data on channel %d, tx_buf = %x,  in %s()\n", size, ch, channel->tx_buf, __func__);
 			ret = hsi_proto_write(ch, channel->tx_buf, size);
 			channel->tx_state = HSI_LL_TX_STATE_WAIT_FOR_CONN_CLOSED;
-			actual_write = ret;
 			wake_up_interruptible (&ipc_write_wait);
+			channel->tx_nak_count = 0;
 			break;
 
 		case HSI_LL_TX_STATE_CLOSED:/* ACK as response to CANCEL_CONN */
 			if(channel->rx_state == HSI_LL_RX_STATE_WAIT_FOR_CANCEL_CONN_ACK)
-			 channel->rx_state = HSI_LL_RX_STATE_CLOSED;
+			 channel->rx_state = HSI_LL_RX_STATE_IDLE;
 			break;
 
 		case HSI_LL_TX_STATE_WAIT_FOR_CONF_ACK: /* ACK as response to CONF_RATE */
@@ -318,16 +344,33 @@ void rx_stm(u32 cmd, u32 ch, u32 param)
 
 	case HSI_LL_MSG_NAK:
 		switch(channel->tx_state){
-		case HSI_LL_TX_STATE_WAIT_FOR_ACK:
-			channel->tx_state = HSI_LL_TX_STATE_NACK;
-			break;
+			case HSI_LL_TX_STATE_WAIT_FOR_ACK:
+				printk("(%s) NAK received. ch->%d \n",__func__,ch);
+				channel->tx_state = HSI_LL_TX_STATE_NACK;
+				if (channel->tx_nak_count < 5 ){
+
+					tmp_cmd = ((HSI_LL_MSG_OPEN_CONN_OCTET & 0x0000000F) << 28) |
+						  ((ch                         & 0x000000FF) << 24);
+					for(i=49; i >= 0; i--){
+						if((hsi_cmd_history.tx_cmd[i] & 0xFFF00000) == tmp_cmd)
+						break;
+					}
+					size = (hsi_cmd_history.tx_cmd[i] & 0x000FFFFF);
+					hsi_protocol_send_command(HSI_LL_MSG_OPEN_CONN_OCTET, ch, size);
+					channel->tx_nak_count++;
+				}else{
+					hsi_protocol_send_command(HSI_LL_MSG_BREAK, ch, size);
+					printk("(%s) Sending MSG_BREAK. ch->%d \n",__func__,ch);
+					//TODO Reset All channels and inform IPC write about failure (Possibly by sending signal)
+				}
+				break;
 
-		 case HSI_LL_TX_STATE_WAIT_FOR_CONF_ACK: /* NAK as response to CONF_RATE */
-		 channel->tx_state = HSI_LL_TX_STATE_IDLE;
-		break;
+			case HSI_LL_TX_STATE_WAIT_FOR_CONF_ACK: /* NAK as response to CONF_RATE */
+				channel->tx_state = HSI_LL_TX_STATE_IDLE;
+				break;
 
-		default:
-			pr_err("ERROR - Received NAK in invalid state\n");
+			default:
+				pr_err("ERROR - Received NAK in invalid state. state->%d\n",channel->tx_state);
 		}
 		break;
 
@@ -338,35 +381,26 @@ void rx_stm(u32 cmd, u32 ch, u32 param)
 
 	case HSI_LL_MSG_OPEN_CONN_OCTET:
 		switch(channel->rx_state){
-			case HSI_LL_RX_STATE_CLOSED:
-				printk("OPEN_CONN_OCTET in %s()\n",__func__);
+			//case HSI_LL_RX_STATE_CLOSED:
+			case HSI_LL_RX_STATE_IDLE:
+				//printk("OPEN_CONN_OCTET in %s(), ch-> %d\n",__func__, ch);
 				channel->rx_state = HSI_LL_RX_STATE_TO_ACK;
-				ret = if_hsi_openchannel(channel);
-				if ( ret < 0){
-					printk("%s() Channel Open failed\n",__func__);
-					hsi_protocol_send_command(HSI_LL_MSG_NAK, ch, param);
-					channel->rx_state = HSI_LL_RX_STATE_CLOSED;
-					break;
-				}else{
-					printk("%s() Channel Open Successful\n",__func__);
-					set_tx_config(channel, 2, HSI_MAX_CHANNELS);
-					hsi_protocol_send_command(HSI_LL_MSG_ACK, ch, param);
-				}
-				channel->rx_state = HSI_LL_RX_STATE_SEND_ACK;
+				hsi_protocol_send_command(HSI_LL_MSG_ACK, ch, param);
+				
+				channel->rx_count = param; 
 				channel->rx_state = HSI_LL_RX_STATE_RX;
-				avlb_ch = ch;
-				avlb_length = param; 
-				printk("Waking up IPC read\n");
+				//printk("Waking up IPC read, length in command = %d\n", param);
 				wake_up_interruptible (&ipc_read_wait);
-				//Open channel Set RX config & Read Data & close channel 
-				//hsi_protocol_send_command(HSI_LL_MSG_CONN_CLOSED, ch, param);
-				//channel->HSI_LL_RX_STATE_IDLE;
 				break;
+			
 			case HSI_LL_RX_STATE_BLOCKED:
 				//TODO
 				break;
+			
 			default:
-				pr_err("OPEN_CONN_OCTET in invalid state\n");
+				pr_err("OPEN_CONN_OCTET in invalid state, Current State -> %d\n", channel->rx_state);
+				printk("Sending NAK to channel-> %d\n",ch);
+				hsi_protocol_send_command(HSI_LL_MSG_NAK, ch, param);
 		}
 		break;	
 	
diff --git a/drivers/staging/omap_hsi/hsi_protocol_if.c b/drivers/staging/omap_hsi/hsi_protocol_if.c
index 9c4ab20..ec7e2c6 100644
--- a/drivers/staging/omap_hsi/hsi_protocol_if.c
+++ b/drivers/staging/omap_hsi/hsi_protocol_if.c
@@ -30,28 +30,23 @@
 #include <linux/poll.h>
 #include <linux/kthread.h>
 #include <linux/slab.h>
+#include <linux/proc_fs.h>
 
 #include <linux/hsi_driver_if.h>
 #include "hsi-protocol-if.h" 
 
-#define DEBUG	1
+//#define DEBUG	1
+//#define DEBUG_PHY_DATA	1
 
 #define HSI_CHANNEL_STATE_UNAVAIL       (1 << 0)
 #define HSI_CHANNEL_STATE_READING       (1 << 1)
 #define HSI_CHANNEL_STATE_WRITING       (1 << 2)
 
-#define MAX_HSI_IPC_BUFFER		512*1024
-
-
-
-
 
 struct if_hsi_iface hsi_protocol_iface;
-
-u32 avlb_ch, avlb_length = 0;
-u32 actual_write;
 wait_queue_head_t ipc_read_wait, ipc_write_wait;
 
+
 static void if_hsi_protocol_port_event(struct hsi_device *dev, unsigned int event,
                               void *arg);
 static int __devinit hsi_protocol_probe(struct hsi_device *dev);
@@ -66,7 +61,9 @@ static struct hsi_device_driver if_hsi_protocol_driver = {
 	},
 };
 
-
+struct if_hsi_cmd hsi_cmd_history;
+int tx_cmd_history_p = 0;
+int rx_cmd_history_p = 0;
 
 static int if_hsi_read_on(int ch, u32 *data, unsigned int count)
 {
@@ -98,8 +95,13 @@ static void if_hsi_proto_read_done(struct hsi_device *dev, unsigned int size)
 {
 	struct if_hsi_channel *channel;
         struct hsi_event ev;
+	
+#ifdef DEBUG_PHY_DATA
+	u32 *tmp;
+	u32 i;
+#endif
 
-	printk("if_hsi_proto_read_done() is called for ch-> %d\n",dev->n_ch);
+	//printk("if_hsi_proto_read_done() is called for ch-> %d\n",dev->n_ch);
         channel = &hsi_protocol_iface.channels[dev->n_ch];
         dev_dbg(&channel->dev->device, "%s, ch = %d\n", __func__, dev->n_ch);
         spin_lock(&channel->lock);
@@ -108,7 +110,19 @@ static void if_hsi_proto_read_done(struct hsi_device *dev, unsigned int size)
         ev.data = channel->rx_data;
         ev.count = 4 * size;
         spin_unlock(&channel->lock);
-        if_notify(dev->n_ch, &ev);
+
+#ifdef DEBUG_PHY_DATA
+	//Check received data -> Commented as it adds delay which causes MSG_BREAK
+	tmp = channel->rx_data;
+	printk("[%s](%d)(%d) RX = ",__func__, dev->n_ch, ev.count);
+	for (i=0; i< ( ( size > 5 )? 5 : size ); i++){
+		printk("%08x ",*tmp);
+		tmp++;
+	}
+	printk("\n");
+#endif
+
+	if_notify(dev->n_ch, &ev);
 }
 
 int if_hsi_read(int ch, u32 *data, unsigned int count)
@@ -137,10 +151,8 @@ static int if_hsi_write_on(int ch, u32 *address, unsigned int count)
         int ret;
 	
         channel = &hsi_protocol_iface.channels[ch];
-	printk("In Funcion - %s acquiring channel->lock\n",__func__);
 
         spin_lock(&channel->lock);
-	printk("In Funcion - %s\n Acquired channel->lock\n",__func__);
         if (channel->state & HSI_CHANNEL_STATE_WRITING) {
                 pr_err("Write still pending on channel %d\n", ch);
                 printk("Write still pending on channel %d\n", ch);
@@ -153,9 +165,7 @@ static int if_hsi_write_on(int ch, u32 *address, unsigned int count)
         channel->state |= HSI_CHANNEL_STATE_WRITING;
         spin_unlock(&channel->lock);
         dev_dbg(&channel->dev->device, "%s, ch = %d\n", __func__, ch);
-	printk("hsi_write() Starting ...\n");
         ret = hsi_write(channel->dev, address, count / 4);
-	printk("hsi_write() returned %d, %s()\n", ret, __func__);
         return ret;
 }
 
@@ -164,8 +174,13 @@ static void if_hsi_proto_write_done(struct hsi_device *dev, unsigned int size)
 {
 	struct if_hsi_channel *channel;
         struct hsi_event ev;
+		
+#ifdef DEBUG_PHY_DATA
+	u32 *tmp;
+	u32 i;
+#endif
 
-	printk("if_hsi_proto_write_done() is called for ch-> %d\n",dev->n_ch);
+	//printk("if_hsi_proto_write_done() is called for ch-> %d\n",dev->n_ch);
         channel = &hsi_protocol_iface.channels[dev->n_ch];
         dev_dbg(&channel->dev->device, "%s, ch = %d\n", __func__, dev->n_ch);
 
@@ -175,6 +190,18 @@ static void if_hsi_proto_write_done(struct hsi_device *dev, unsigned int size)
         ev.data = channel->tx_data;
         ev.count = 4 * size;
         spin_unlock(&channel->lock);
+
+#ifdef DEBUG_PHY_DATA
+	//Check Outgoing data, Commented as it adds delay which causes MSG_BREAK
+	tmp = channel->tx_data;
+	printk("[%s](%d)(%d) TX = ",__func__, dev->n_ch, ev.count);
+	for (i=0; i< ( ( size > 5 )? 5 : size ); i++){
+		printk("%08x ",*tmp);
+		tmp++;
+	}
+	printk("\n");
+#endif
+
         if_notify(dev->n_ch, &ev);
 
 }
@@ -287,7 +314,7 @@ int if_hsi_openchannel(struct if_hsi_channel *channel)
 
         channel->opened = 1;
 	channel->tx_state = HSI_LL_TX_STATE_IDLE;
-	channel->rx_state = HSI_LL_RX_STATE_IDLE;
+	channel->rx_state = HSI_LL_RX_STATE_TO_CONN_READY;
 	printk("setting channel->opened=1 for channel %d\n", channel->dev->n_ch);
 leave:
         spin_unlock(&channel->lock);
@@ -345,22 +372,26 @@ leave:
 */
 static int hsi_read_thrd(void *data)
 {
-	u32 cmd_data[4], cmd, channel, param ;
+	u32 cmd_data[4], cmd, channel, param = 0;
 	int ret;
 
 	printk("Inside read thread\n");
 	while(1){
 		/*Call hsi_proto_read*/
 		/*Read 16 bytes due to Modem limitation*/
-		hsi_proto_read(0,&cmd_data, (4 * 4));
-		printk("hsi_proto_read returned\n");
+		hsi_proto_read(0, cmd_data, (4 * 4));
+
+		hsi_cmd_history.rx_cmd[ rx_cmd_history_p ] = cmd_data[ 0 ];
+		hsi_cmd_history.rx_cmd_time[ rx_cmd_history_p ] = CURRENT_TIME;
+		rx_cmd_history_p++;
+		if( rx_cmd_history_p >= 50 ) rx_cmd_history_p = 0;
 
 		/*Decode Command*/
 		ret = hsi_decode_cmd(&cmd_data[0], &cmd, &channel, &param);
 		if(ret != 0){
 			pr_err("Can not decode command\n");
 			}else{
-				printk("cmd is %x\n",cmd);
+				printk("%s(),CMD Received->  %x, ch-> %d, param-> %d. \n",__func__, cmd, channel, param);
 				/*Rx State Machine*/
 				rx_stm(cmd, channel, param);
 			}
@@ -373,43 +404,67 @@ int hsi_start_protocol(void)
 {
 	struct hst_ctx tx_config;
 	struct hsr_ctx rx_config;
-	int ret = 0;
+	int i, ret = 0;
 
 	printk("In function  %s()\n",__func__);	
-	/*Open channel 0 */
-	ret = if_hsi_openchannel(&hsi_protocol_iface.channels[0]);
-	if (ret < 0){
-		pr_err("Can not Open channel 0. Can not start HSI protocol \n");
-		goto err;
-	}else
-		printk("if_hsi_openchannel() returned %d\n", ret);
-
-	/*Set Rx Config*/
-	hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_GET_RX, &rx_config);
-	rx_config.mode = 2;
-	rx_config.channels = HSI_MAX_CHANNELS;
-	ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_SET_RX, &rx_config);
-	if ( ret == 0)
-		printk ("SET_RX Successful\n");
-	
-	/*Set Tx Config*/
-	hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_GET_TX, &tx_config);
-	tx_config.mode = 2;
-	tx_config.channels = HSI_MAX_CHANNELS;
-	ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_SET_TX, &tx_config);
-	if ( ret == 0)
-		printk ("SET_TX Successful\n");
-	
-	/* Making ACWAKE HIGH here as clocks are disabled otherwise*/
-	//hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_ACWAKE_UP, NULL);
+	/*Open All channels */
+	for (i=0; i <= 5; i++){
+		ret = if_hsi_openchannel(&hsi_protocol_iface.channels[i]);
+		if (ret < 0){
+			pr_err("Can not Open channel->%d . Can not start HSI protocol \n",i);
+		}else
+			printk("Channel->%d Open Successful\n", i);
+
+		/*Set Rx Config*/
+		hsi_ioctl(hsi_protocol_iface.channels[i].dev, HSI_IOCTL_GET_RX, &rx_config);
+		rx_config.mode = 2;
+		rx_config.divisor = 1;
+		rx_config.channels = HSI_MAX_CHANNELS;
+		ret = hsi_ioctl(hsi_protocol_iface.channels[i].dev, HSI_IOCTL_SET_RX, &rx_config);
+		if ( ret == 0)
+			printk ("SET_RX Successful for ch->%d\n", i);
 	
-	/*Create read thread*/
-	//read_thread = kthread_run(hsi_read_thrd, NULL, "hsi_read_thread");
-err: 
+		/*Set Tx Config*/
+		hsi_ioctl(hsi_protocol_iface.channels[i].dev, HSI_IOCTL_GET_TX, &tx_config);
+		tx_config.mode = 2;
+		tx_config.divisor = 1;
+		tx_config.channels = HSI_MAX_CHANNELS;
+		ret = hsi_ioctl(hsi_protocol_iface.channels[i].dev, HSI_IOCTL_SET_TX, &tx_config);
+		if ( ret == 0)
+			printk ("SET_TX Successful for ch->%d\n", i);
+	}	
+	/*Make channel-0 tx_state to IDLE*/
+	hsi_protocol_iface.channels[0].tx_state = HSI_LL_TX_STATE_IDLE;
 	return ret;
 }
 EXPORT_SYMBOL(hsi_start_protocol);
 
+static int hsi_protocol_proc( char *page, char **start, off_t off, int count, int *eof, void *data )
+{
+	char *p = page;
+	int len, i;
+
+	p += sprintf( p, "======= HISTORY OF CMD =======\n" );
+	p += sprintf( p, "   tx_cmd_history_p : %d\n", tx_cmd_history_p );
+	p += sprintf( p, "   rx_cmd_history_p : %d\n", rx_cmd_history_p );
+	for( i = 0; i < 50; i++ ) {
+		p += sprintf( p, "   [%d] tx : 0x%08x(%lu.%09lu), rx : 0x%08x(%lu.%09lu)\n", 
+			i, hsi_cmd_history.tx_cmd[ i ], ( unsigned long )hsi_cmd_history.tx_cmd_time[ i ].tv_sec, ( unsigned long )hsi_cmd_history.tx_cmd_time[ i ].tv_nsec,
+			hsi_cmd_history.rx_cmd[ i ], ( unsigned long )hsi_cmd_history.rx_cmd_time[ i ].tv_sec, ( unsigned long )hsi_cmd_history.rx_cmd_time[ i ].tv_nsec );
+	}
+	p += sprintf( p, "======= HISTORY OF CMD =======\n" );
+
+	len = ( p - page ) - off;
+	if( len < 0 ) {
+		len = 0;
+	}
+
+	*eof = ( len <= count ) ? 1 : 0;
+	*start = page + off;
+
+	return len;
+}
+
 int __devexit hsi_protocol_remove(struct hsi_device *dev)
 {
 	struct if_hsi_channel *channel;
@@ -466,16 +521,16 @@ int __devinit hsi_protocol_probe(struct hsi_device *dev)
 		channel->state = 0;
 		channel->rx_state = HSI_LL_RX_STATE_CLOSED;
 		channel->tx_state = HSI_LL_TX_STATE_CLOSED;
+		channel->tx_count = 0;
+		channel->rx_count = 0;
+		channel->tx_nak_count = 0;
+		channel->rx_nak_count = 0;
 		channel->rx_buf = NULL;
 		channel->tx_buf = NULL;
 		hsi_protocol_iface.init_chan_map ^= (1 << dev->n_ch);
 	}
 	spin_unlock_bh(&hsi_protocol_iface.lock);
 
-	//hsi_start_protocol();	
-/*	printk("Starting write_hsi() function\n");	
-	port = write_hsi(0, data, 4);
-	printk("write_hsi returned %d\n",port);	*/
 	return 0;
 	
 }
@@ -485,7 +540,8 @@ int __init if_hsi_init(void)
 {
 	struct if_hsi_channel *channel;
 	int i, ret;
-		
+	struct proc_dir_entry *dir;
+	
 	for (i = 0; i < HSI_MAX_PORTS; i++)
                 if_hsi_protocol_driver.ch_mask[i] = 0;
 	
@@ -509,6 +565,12 @@ int __init if_hsi_init(void)
 	if (ret)
 		pr_err("Error while registering HSI driver %d", ret);
 
+	dir = create_proc_read_entry( "driver/hsi_cmd", 0, 0, hsi_protocol_proc, NULL );
+	if( dir == NULL ) {
+		printk("create_proc_read_entry Fail.\n");
+	}
+	printk("create_proc_read_entry Done.\n");
+
 	return ret;
 }
 
@@ -540,13 +602,184 @@ int __devexit if_hsi_exit(void)
 
 }
 
+u32 initialization = 0;
+
+/*Write data to channel*/
+int write_hsi(u32 ch, u32 *data, int length)
+{
+	int ret;	
+	//u32 cmd[4] = {0x00000000, 0xAAAAAAAA, 0xBBBBBBBB, 0xCCCCCCCC};
+	struct if_hsi_channel *channel;
+	struct task_struct *read_thread;
+
+	channel = &hsi_protocol_iface.channels[ch];
+	channel->tx_buf = data;	
+	channel->tx_count = 0;
+
+	//cmd[0] = protocol_create_cmd(HSI_LL_MSG_OPEN_CONN_OCTET, ch, (void *)&length);
+	//printk("data ptr is %x\n", data); 
+
+	if (initialization == 0){
+		/* ACWAKE ->HIGH */
+		ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_ACWAKE_UP, NULL);
+		if(ret == 0)
+			printk("ACWAKE pulled high in %s()\n",__func__);
+
+		/*Creating read thread*/
+		read_thread = kthread_run(hsi_read_thrd, NULL, "hsi_read_thread");
+	
+		initialization++;
+	}
+	/*Wait till previous data transfer is over*/
+	while(channel->tx_state != HSI_LL_TX_STATE_IDLE) {
+		//printk( "Wait 5ms previous data transfer isn't over %s()\n", __func__ );
+		
+		msleep(5);
+	}
+	channel->tx_state = HSI_LL_TX_STATE_WAIT_FOR_ACK;
+	
+	//send_cmd(cmd, channel, data)
+	//ret = hsi_proto_write(0, &cmd, 4*4);
+	//printk("Write returned %d\n", ret); 	
+	hsi_protocol_send_command(HSI_LL_MSG_OPEN_CONN_OCTET, ch, length);
+	
+	wait_event_interruptible(ipc_write_wait, channel->tx_count != 0);
+
+	return	channel->tx_count;
+
+
+}
+EXPORT_SYMBOL(write_hsi);
+
+
+int read_hsi(u8 *data, u32 ch, u32 *length)
+{
+	int ret, size, tmp,actual_length;
+	struct if_hsi_channel *channel;
+
+	channel = &hsi_protocol_iface.channels[ch];
+	channel->rx_state = HSI_LL_RX_STATE_IDLE;
+	
+	//printk("In read_hsi() function, Sleeping ... channel-> %d\n",ch);
+	wait_event_interruptible(ipc_read_wait,(channel->rx_count != 0));
+	//printk("In read_hsi() function, Waking Up ... channel-> %d\n",ch);
+
+	actual_length = channel->rx_count;
+	size = channel->rx_count;
+	// TEMP: send/read by 16 byte unit for v.11A(CP)
+	if ((size > 16) && (size % 16))
+		size += (16 - (size % 16));
+	else if (size < 16)
+		size = 16;
+	ret = hsi_proto_read(ch, (u32 *)data, size);
+	if( ret < 0)
+		printk("Read in IPC failed, %s()\n",__func__);
+	
+	//printk("%s() read returned %d, actual_length = %d, ch-> %d\n",__func__, ret,actual_length,ch );
+	//printk("%s() sending CONN_CLOSED. \n",__func__);
+	tmp = hsi_protocol_send_command(HSI_LL_MSG_CONN_CLOSED, ch, 0);
+	//printk("%s() Sending CONN_CLOSED Finished. ret = %d\n",__func__, tmp);
+	
+	*length = actual_length;
+	channel->rx_count = 0;
+	
+	//printk("%s() RETURNING TO IPC with ret = %d\n",__func__, ret);
+	return ret;
+
+}
+EXPORT_SYMBOL(read_hsi);
+
+
+//========================================================//
+//                ++ Flashless Boot. ++                   //
+//========================================================//
+int hsi_start_protocol_single( void )
+{
+	int ret = 0;
+
+	struct hst_ctx tx_config;
+	struct hsr_ctx rx_config;
+
+	/*Open channel 0 */
+	ret = if_hsi_openchannel(&hsi_protocol_iface.channels[0]);
+	if (ret < 0){
+		pr_err("Can not Open channel 0. Can not start HSI protocol \n");
+		goto err;
+	}else
+		printk("if_hsi_openchannel() returned %d\n", ret);
+
+	
+	/*Set Tx Config*/
+	hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_GET_TX, &tx_config);
+	tx_config.mode = 2;
+	tx_config.channels = 1;
+	tx_config.divisor = 1;	
+	ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_SET_TX, &tx_config);
+	if ( ret < 0 ) {
+		printk( "write_hsi_direct : SET_TX Fail : %d\n", ret );
+		return ret;
+	}
+
+	hsi_ioctl( hsi_protocol_iface.channels[ 0 ].dev, HSI_IOCTL_GET_RX, &rx_config );
+	rx_config.mode = 2;
+	rx_config.channels = 1;
+	rx_config.divisor = 3;
+	//rx_config.timeout = HZ / 2;
+	ret = hsi_ioctl( hsi_protocol_iface.channels[0].dev, HSI_IOCTL_SET_RX, &rx_config);
+	if ( ret < 0 ) {
+		printk( "write_hsi_direct : SET_RX Fail : %d\n", ret );
+		return ret;
+	}
+
+	/* ACWAKE ->HIGH */
+	ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_ACWAKE_UP, NULL);
+	if(ret == 0)
+		printk("ACWAKE pulled high in %s()\n",__func__);
+
+err: 
+
+	return ret;
+}
+EXPORT_SYMBOL( hsi_start_protocol_single );
+
+int hsi_reconfigure_protocol( void )
+{
+	int ret = 0;
+	
+	/* ACWAKE ->LOW */
+	ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_ACWAKE_DOWN, NULL);
+	if(ret == 0)
+		printk("ACWAKE pulled low in %s()\n",__func__);
+	else
+		printk("ACWAKE down fail!! %d\n", ret);
+
+
+	/*Clse channel 0 */
+	ret = if_hsi_closechannel(&hsi_protocol_iface.channels[0]);
+	if (ret < 0){
+		pr_err("Can not Close channel 0. Can not Stop HSI protocol for flashless\n");
+		goto err;
+	}
+
+
+	printk( "(%s)(%d) hsi_start_protocol Start.\n", __func__, __LINE__ );
+	hsi_start_protocol();
+	printk( "(%s)(%d) hsi_start_protocol Done.\n", __func__, __LINE__ );
+
+err: 
+
+	return ret;
+}
+EXPORT_SYMBOL( hsi_reconfigure_protocol );
+
 int write_hsi_direct( u32 *data, int length )
 {
 	int retval = 0;
+#if 0
 	struct hst_ctx tx_config;
 
-	printk( "write_hsi_direct : len : %d\n", length );
 
+	printk( "write_hsi_direct : len : %d\n", length );
 	hsi_ioctl( hsi_protocol_iface.channels[ 0 ].dev, HSI_IOCTL_GET_TX, &tx_config );
 	tx_config.mode = 2;
 	tx_config.channels = 1;
@@ -563,22 +796,25 @@ int write_hsi_direct( u32 *data, int length )
 		printk("write_hsi_direct : ACWAKE High Fail : %d\n", retval );
 		return retval;
 	}
-	printk( "write_hsi_direct : ACWAKE High\n" );
+#endif
 
-	if( ( length > 16 ) || ( length % 4 ) ) {
+#if 0
+	if( ( length > 16 ) && ( length % 4 ) ) {
 		length += ( 4 - ( length % 4 ) );
 	}
 	else if( length < 16 ) {
 		length = 16;
 	}
-	printk( "write_hsi_direct : new len : %d\n", length );
+#endif
+
+//	printk( "write_hsi_direct : new len : %d\n", length );
 	
 	retval = hsi_proto_write( 0, data, length );
 	if( retval < 0 ) {
 		printk( "write_hsi_direct : hsi_proto_write Fail : %d\n", retval );
 		return retval;
 	}
-	printk( "write_hsi_direct : Write returned %d\n", retval );
+	//printk( "write_hsi_direct : Write returned %d\n", retval );
 
 	return retval;
 }
@@ -587,10 +823,11 @@ EXPORT_SYMBOL( write_hsi_direct );
 int read_hsi_direct( u32 *data, int length )
 {
 	int retval = 0;
+#if 0
 	struct hsr_ctx rx_config;
 
-	printk( "read_hsi_direct : len : %d\n", length );
 
+	printk( "read_hsi_direct : len : %d\n", length );
 	hsi_ioctl( hsi_protocol_iface.channels[ 0 ].dev, HSI_IOCTL_GET_RX, &rx_config );
 	rx_config.mode = 2;
 	rx_config.channels = 1;
@@ -608,118 +845,31 @@ int read_hsi_direct( u32 *data, int length )
 		return retval;
 	}
 	printk( "read_hsi_direct : ACWAKE High\n" );
+#endif
 
-	if( ( length > 16 ) || ( length % 4 ) ) {
+#if 0
+	if( ( length > 16 ) && ( length % 4 ) ) {
 		length += ( 4 - ( length % 4 ) );
 	}
 	else if( length < 16 ) {
 		length = 16;
 	}
-	printk( "read_hsi_direct : new len : %d\n", length );
+#endif
+	//printk( "read_hsi_direct : new len : %d\n", length );
 	
 	retval = hsi_proto_read( 0, data, length );
 	if( retval < 0 ) {
 		printk( "read_hsi_direct : hsi_proto_read Fail : %d\n", retval );
 		return retval;
 	}
-	printk( "read_hsi_direct : Read returned %d\n", retval );
+	//printk( "read_hsi_direct : Read returned %d\n", retval );
 
 	return retval;
 }
 EXPORT_SYMBOL( read_hsi_direct );
 
-u32 initialization = 0;
-
-/*write data to channel*/
-int write_hsi(u32 ch, u32 *data, int length)
-{
-	int ret;	
-	u32 cmd[4] = {0, 0xAAAAAAAA, 0xBBBBBBBB, 0xCCCCCCCC};
-	struct if_hsi_channel *channel;
-	struct task_struct *read_thread;
-
-	channel = &hsi_protocol_iface.channels[ch];
-	channel->tx_buf = data;	
-	actual_write = 0;
-
-	cmd[0] = protocol_create_cmd(HSI_LL_MSG_OPEN_CONN_OCTET, ch, (void *)&length);
-	printk("data ptr is %x\n", data); 
-
-	if (initialization == 0){
-		/* ACWAKE ->HIGH */
-		ret = hsi_ioctl(hsi_protocol_iface.channels[0].dev, HSI_IOCTL_ACWAKE_UP, NULL);
-		if(ret == 0)
-			printk("ACWAKE pulled high in %s()\n",__func__);
-
-		/*Creating read thread*/
-		read_thread = kthread_run(hsi_read_thrd, NULL, "hsi_read_thread");
-	
-		initialization++;
-	}
-
-	channel->tx_state = HSI_LL_TX_STATE_WAIT_FOR_ACK;
-	
-	//send_cmd(cmd, channel, data)
-	ret = hsi_proto_write(0, &cmd, 4*4);
-	printk("Write returned %d\n", ret); 	
-
-	wait_event_interruptible(ipc_write_wait, actual_write != 0);
-
-	return	actual_write;
-
-
-/*	printk("%s() Opening channel %d\n", __func__, channel);
-	ret = if_hsi_openchannel(&hsi_protocol_iface.channels[channel]);
-	if (ret < 0){
-		pr_err("Can not Open channel 0. Can not start HSI protocol \n");
-		//Close Channel
-		if_hsi_closechannel(&hsi_protocol_iface.channels[channel]);
-		return -1;
-
-	}else{
-	//Send Data
-	printk("Channel Open successful. ret = %d, func-%s\n", ret, __func__);
-	ret = hsi_proto_write(channel, data, length);
-	//Close Channel
-	if_hsi_closechannel(&hsi_protocol_iface.channels[channel]);*/
-}
-EXPORT_SYMBOL(write_hsi);
-
-
-int read_hsi(u8 *data, u32 *ch, u32 *length)
-{
-	int ret, size, tmp;
-	struct if_hsi_channel *channel;
-
-	printk("In read_hsi() function, Sleeping ...\n");
-	wait_event_interruptible(ipc_read_wait,(avlb_length != 0));
-	printk("In read_hsi() function, Waking Up ...\n");
-
-	channel = &hsi_protocol_iface.channels[avlb_ch];	
-	
-	size = avlb_length;
-	if ((size > 16) && (size % 4))
-		size += (4 - (size % 4));
-	else if (size < 16)
-		size = 16;
-	ret = hsi_proto_read(avlb_ch, data, size);
-	if( ret < 0)
-		printk("Read in IPC failed, %s()\n",__func__);
-	
-	printk("%s() read returned %d, actual_length = %d, ch-> %d\n",__func__, ret,avlb_length, avlb_ch);
-	tmp = if_hsi_closechannel(channel);
-	printk("%s() closed channel, sending CONN_CLOSED. ret = %d\n",__func__, tmp);
-	tmp = hsi_protocol_send_command(HSI_LL_MSG_CONN_CLOSED, avlb_ch, 0);
-	printk("%s() Sending CONN_CLOSED Finished. ret = %d\n",__func__, tmp);
-	
-	*ch = avlb_ch;
-	*length = avlb_length;
-	avlb_length = 0;
-	
-	printk("%s() RETURNING TO IPC with ret = %d\n",__func__, ret);
-	return ret;
-
-}
-EXPORT_SYMBOL(read_hsi);
+//========================================================//
+//                -- Flashless Boot. --                   //
+//========================================================//
 
 
