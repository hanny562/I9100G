commit 6e97fdc14f344a78124c5f26572e108f073c128b
Author: Devaraj Rangasamy <dev@ti.com>
Date:   Fri May 6 17:25:30 2011 +0530

    DISPLAY: Suspend/Shutdown/Resume sequence atomic to avoid race condition and proper state checks
    
    Currently Display suspend,shutdown calls just invoke power-off sequence.
    If both are triggered parallely, or subsequently, due to race conditions,
    we end up in faults.
    
     - Added mutex protection, so that suspend/shutdown/resume sequences will be atomic
     - Added state check so that proper sequence path will be followed
    
    Signed-off-by: Devaraj Rangasamy <dev@ti.com>

Index: kernel/drivers/video/omap2/dss/display.c
===================================================================
--- kernel.orig/drivers/video/omap2/dss/display.c	2011-04-04 19:22:36.000000000 +0900
+++ kernel/drivers/video/omap2/dss/display.c	2011-05-05 10:39:39.000000000 +0900
@@ -35,6 +35,10 @@
 
 static LIST_HEAD(display_list);
 
+static struct {
+    struct mutex power_lock;
+} display;
+
 int omapdss_display_enable(struct omap_dss_device *dssdev)
 {
 	int r = 0;
@@ -678,6 +682,8 @@
 			dev_name(&dssdev->dev));
 	if (r)
 		DSSERR("failed to create sysfs display link\n");
+
+        mutex_init(&display.power_lock);
 }
 
 void dss_uninit_device(struct platform_device *pdev,
@@ -701,7 +707,8 @@
 	struct omap_dss_device *dssdev = to_dss_device(dev);
 
 	/* don't work on suspended displays */
-	if (dssdev->state == OMAP_DSS_DISPLAY_SUSPENDED)
+	if ((dssdev->state == OMAP_DSS_DISPLAY_SUSPENDED) ||
+               (dssdev->state == OMAP_DSS_DISPLAY_DISABLED ))
 		return 0;
 
 	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE) {
@@ -729,7 +736,9 @@
 	int r;
 	struct bus_type *bus = dss_get_bus();
 
+        mutex_lock(&display.power_lock);
 	r = bus_for_each_dev(bus, NULL, NULL, dss_suspend_device);
+        mutex_unlock(&display.power_lock);
 	if (r) {
 		/* resume all displays that were suspended */
 		dss_resume_all_devices();
@@ -770,8 +779,13 @@
 int dss_resume_all_devices(void)
 {
 	struct bus_type *bus = dss_get_bus();
+        int r = 0;
+
+        mutex_lock(&display.power_lock);
+        r = bus_for_each_dev(bus, NULL, NULL, dss_resume_device);
+        mutex_unlock(&display.power_lock);
 
-	return bus_for_each_dev(bus, NULL, NULL, dss_resume_device);
+        return r;
 }
 
 static int dss_check_state_disabled(struct device *dev, void *data)
@@ -834,8 +848,11 @@
 {
 	struct omap_dss_device *dssdev = to_dss_device(dev);
 
-	if (dssdev->state != OMAP_DSS_DISPLAY_DISABLED)
-		dssdev->driver->disable(dssdev);
+        if ((dssdev->state == OMAP_DSS_DISPLAY_SUSPENDED) ||
+               (dssdev->state == OMAP_DSS_DISPLAY_DISABLED ))
+                return 0;
+
+	dssdev->driver->disable(dssdev);
 
 	return 0;
 }
@@ -843,7 +860,9 @@
 void dss_disable_all_devices(void)
 {
 	struct bus_type *bus = dss_get_bus();
+        mutex_lock(&display.power_lock);
 	bus_for_each_dev(bus, NULL, NULL, dss_disable_device);
+        mutex_unlock(&display.power_lock);
 }
 
 
Index: kernel/kernel/panic.c
===================================================================
--- kernel.orig/kernel/panic.c	2011-04-13 09:41:27.000000000 +0900
+++ kernel/kernel/panic.c	2011-05-05 10:40:41.000000000 +0900
@@ -435,6 +435,11 @@
 	smp_send_stop();
 	
 #ifdef CONFIG_SAMSUNG_KERNEL_DEBUG
+       //Added by shankar.b
+       extern u32 omap_readl(u32 pa);
+       #define CM_DSS_DSS_CLKCTRL 0x4A009120
+       printk("%s[%d] CM_DSS_DSS_CLKCTRL:0x%x \n", __func__, __LINE__, omap_readl(CM_DSS_DSS_CLKCTRL));
+
 	kernel_sec_save_final_context();
 
 	flush_cache_all();
