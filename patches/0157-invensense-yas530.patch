Index: Kernel/drivers/sensors/mpu3050/compass/yas530.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ Kernel/drivers/sensors/mpu3050/compass/yas530.c	2011-02-17 20:41:15.082230643 +0530
@@ -0,0 +1,823 @@
+/*
+ $License:
+ 
+ /*
+  $License:
+     Copyright (C) 2010 InvenSense Corporation, All Rights Reserved.
+  $
+  */
+ /**
+  *  @defgroup   ACCELDL (Motion Library - Accelerometer Driver Layer)
+  *  @brief      Provides the interface to setup and handle an accelerometers
+  *              connected to the secondary I2C interface of the gyroscope.
+  *
+  *  @{
+  *      @file   yas530.c
+  *      @brief  Magnetometer setup and handling methods for Yamaha yas530
+  *              compass.
+  */
+ 
+ /* ------------------ */
+ /* - Include Files. - */
+ /* ------------------ */
+ 
+#include "mpu.h"
+#include "mltypes.h"
+ 
+#include "mlsl.h"
+#include "mlos.h"
+ 
+#ifdef __KERNEL__
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <i2c.h>
+#endif //__KERNEL__
+ 
+#include <log.h>
+#undef MPL_LOG_TAG
+#define MPL_LOG_TAG "MPL-yas530:"
+ 
+ 
+ //#define _DEBUG_YAS530_
+ 
+ 
+ 
+ 
+ typedef struct yas_cal_data {
+     uint8_t dx, dy1, dy2;
+     uint8_t d2, d3, d4, d5, d6, d7, d8, d9, d0;
+     uint8_t dck;
+ }YAS_CAL_DATA;
+ 
+ 
+ 
+ typedef struct yas_correction_data {
+     int32_t Cx, Cy1, Cy2;
+     int32_t a2, a3, a4, a5, a6, a7, a8, a9, k;
+ }YAS_CORRECTION_DATA;
+ 
+ 
+ 
+ struct yas_measure_data {
+     int16_t t;
+     int16_t x;
+     int16_t y1;
+     int16_t y2;
+ }YAS_MEATURE_DATA;
+ 
+ 
+ 
+ typedef struct yas_handle_type{
+     void*           mlslHandle;
+     unsigned char   addrSlave;
+ }*PHANDLE_MPL, HANDLE_MPL ;
+ 
+ 
+ /*----- YAMAHA YAS530 Registers ------*/
+#define YAS_REGADDR_DEVICE_ID          (0x80)
+#define YAS_REGADDR_ACTUATE_INIT_COIL  (0x81)
+#define YAS_REGADDR_MEASURE_COMMAND    (0x82)
+#define YAS_REGADDR_CONFIG             (0x83)
+#define YAS_REGADDR_MEASURE_INTERVAL   (0x84)
+#define YAS_REGADDR_OFFSET_X           (0x85)
+#define YAS_REGADDR_OFFSET_Y1          (0x86)
+#define YAS_REGADDR_OFFSET_Y2          (0x87)
+#define YAS_REGADDR_TEST1              (0x88)
+#define YAS_REGADDR_TEST2              (0x89)
+#define YAS_REGADDR_CAL                (0x90)
+#define YAS_REGADDR_MEASURE_DATA       (0xb0)
+ 
+ 
+ 
+ /* --------------------- */
+ /* -    Variables.     - */
+ /* --------------------- */
+ 
+ 
+ typedef struct {
+     YAS_CAL_DATA cal;
+     YAS_CORRECTION_DATA correction;
+ } YAS530_DATA,*PYAS530_DATA;
+ 
+ static const YAS530_DATA lYas530Data = {0,};
+ static PYAS530_DATA pYas530Data = &lYas530Data;
+ 
+ 
+ 
+#ifdef AIO
+ tMLError MLSLSetYamahaCompassDataMode(unsigned char mode);
+#endif
+ 
+ 
+ 
+ static int
+ yas530_i2c_write
+ (
+     PHANDLE_MPL handle, 
+     uint8_t registerAddr, 
+     const uint8_t *buf,
+     int len
+ ) 
+ {
+     unsigned char data[10]={0,};
+     int result = ML_SUCCESS ;
+ 
+     if (NULL == buf || NULL == handle)
+         return ML_ERROR_INVALID_PARAMETER;
+ 
+     data[0] = registerAddr;
+     if(len>0) {
+         memcpy(&data[1], buf, len);
+     }
+     
+ 
+ 
+     result = MLSLSerialWrite(handle->mlslHandle, 
+                                             handle->addrSlave,
+                                             len+1, //
+                                             data);
+ 
+ 
+     return result;
+ }
+ 
+ 
+ 
+ static int 
+ yas530_i2c_read
+ (
+     PHANDLE_MPL handle,
+     uint8_t registerAddr, 
+     const uint8_t *buf,
+     int len    
+ )
+ {
+     int result = ML_SUCCESS ;
+ 
+     result = MLSLSerialRead(handle->mlslHandle, 
+                                             handle->addrSlave,
+                                             registerAddr,
+                                             len,
+                                             buf);
+ 
+     return result;
+ }
+ 
+ 
+ static int
+ yas530_get_device_id
+ (
+     PHANDLE_MPL handle
+ )
+ {
+     uint8_t data = 0;
+     int result = ML_SUCCESS ;
+ 
+     result = yas530_i2c_read(handle,YAS_REGADDR_DEVICE_ID, &data, 1);
+     ERROR_CHECK(result);
+ 
+     //MPL_LOGV("DEVICE_FAIL:%d\n",data);
+ 
+     if (data != 0x01) {
+         result = ML_ERROR_SERIAL_DEVICE_NOT_RECOGNIZED;
+     }
+ 
+     return result;
+ }
+ 
+ 
+ 
+ static int 
+ yas530_init_test_register
+ (
+     PHANDLE_MPL handle
+ )
+ {
+     unsigned char data;
+     int result = ML_SUCCESS ;
+ 
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+     data = 0x00;
+     result = yas530_i2c_write(handle,YAS_REGADDR_TEST1, &data, 1);
+     ERROR_CHECK(result);
+ 
+ 
+     data = 0x00;
+     result = yas530_i2c_write(handle,YAS_REGADDR_TEST2, &data, 1);
+     ERROR_CHECK(result);
+ 
+     return ML_SUCCESS;
+ 
+ }
+ 
+ 
+ 
+ static int 
+ yas530_get_calibration_data
+ (
+     PHANDLE_MPL handle, 
+     struct yas_cal_data* cal
+ )
+ {
+     unsigned char data[16];
+     int result = ML_SUCCESS ;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     result = yas530_i2c_read(handle,YAS_REGADDR_CAL, data, 16);
+     ERROR_CHECK(result);
+     result = yas530_i2c_read(handle,YAS_REGADDR_CAL, data, 16);
+     ERROR_CHECK(result);
+ 
+ 
+ 
+     cal->dx = data[0];
+     cal->dy1 = data[1];
+     cal->dy2 = data[2];
+     cal->d2 = (data[3]>>2) & 0x03f;
+     cal->d3 = ((data[3]<<2) & 0x0c) | ((data[4]>>6) & 0x03);
+     cal->d4 = data[4] & 0x3f;
+     cal->d5 = (data[5]>>2) & 0x3f;
+     cal->d6 = ((data[5]<<4) & 0x30) | ((data[6]>>4) & 0x0c);
+     cal->d7 = ((data[6]<<3) & 0x78) | ((data[7]>>5) & 0x07);
+     cal->d8 = ((data[7]<<1) & 0x3e) | ((data[8]>>7) & 0x01);
+     cal->d9 = ((data[8]<<1) & 0xfe) | ((data[9]>>7) & 0x01);
+     cal->d0 = (data[9]>>2) & 0x1f;
+     cal->dck = ((data[9]<<1) & 0x06) | ((data[10]>>7) & 0x01);
+ 
+ 
+ /*
+     //MPL_LOGV("CAL[%d][%d][%d] [%d][%d][%d][%d][%d][%d] [%d][%d][%d][%d]\n",
+             cal->dx,
+             cal->dy1,
+             cal->dy2,
+             cal->d2,
+             cal->d3,
+             cal->d4,
+             cal->d5,
+             cal->d6,
+             cal->d7,
+             cal->d8,
+             cal->d9,
+             cal->d0,
+             cal->dck
+             );
+ 
+ */
+     return result;
+ 
+ }
+ 
+ 
+ 
+ static void 
+ yas530_correction_value
+ (
+     struct yas_cal_data *cal,  
+     struct yas_correction_data *correct
+ )
+ {
+     correct->Cx = cal->dx * 6 - 768;
+     correct->Cy1 = cal->dy1 * 6 - 768;
+     correct->Cy2 = cal->dy2 * 6 - 768;
+     correct->a2 = cal->d2 - 32;
+     correct->a3 = cal->d3 - 8;
+     correct->a4 = cal->d4 - 32;
+     correct->a5 = cal->d5 + 38;
+     correct->a6 = cal->d6 - 32;
+     correct->a7 = cal->d7 - 64;
+     correct->a8 = cal->d8 - 32;
+     correct->a9 = cal->d9;
+     correct->k = cal->d0 + 10;
+ 
+ /*
+     //MPL_LOGV("CORRECTION[%d][%d][%d] [%d][%d][%d][%d][%d][%d] [%d][%d][%d]\n",
+             correct->Cx,
+             correct->Cy1,
+             correct->Cy2,
+             correct->a2,
+             correct->a3,
+             correct->a4,
+             correct->a5,
+             correct->a6,
+             correct->a7,
+             correct->a8,
+             correct->a9,
+             correct->k
+             );
+ */
+     
+ }
+ 
+ 
+ static int 
+ yas530_set_configuration
+ (
+     PHANDLE_MPL handle, 
+     int inton, 
+     int inthact, 
+     int cck
+ )
+ {
+     unsigned char data = 0;
+     int result = ML_SUCCESS;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+         
+     data |= (!!inton) & 0x01;
+     data |= ((!!inthact)<<1) & 0x02;
+     data |= (cck<<2) & 0x1c;
+ 
+     result = yas530_i2c_write(handle,YAS_REGADDR_CONFIG,  &data, 1);
+     ERROR_CHECK(result);
+ 
+     return result;
+ }
+ 
+ 
+ 
+ static int 
+ yas530_set_measure_interval
+ (
+     PHANDLE_MPL handle, 
+     int32_t msec
+ )
+ {
+     unsigned char data = 0;
+     int result = ML_SUCCESS;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     if (msec > 5*0xff) {
+         data = 0xff;
+     }
+     else {
+         data = (msec % 5) == 0 ? msec / 5 : (msec / 5) + 1;
+     }
+ 
+     result = yas530_i2c_write(handle,YAS_REGADDR_MEASURE_INTERVAL, &data, 1);
+     ERROR_CHECK(result);
+ 
+ 
+     return ML_SUCCESS;
+ }
+ 
+ 
+ static int 
+ yas530_init_coil
+ (
+     PHANDLE_MPL handle
+ )
+ {
+     unsigned char data = 0;
+     int result = ML_SUCCESS;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     result = yas530_i2c_write(handle,YAS_REGADDR_ACTUATE_INIT_COIL, &data, 1);
+     ERROR_CHECK(result);
+ 
+     return ML_SUCCESS;
+ }
+ 
+ static int 
+ yas530_set_hardware_offset
+ (
+     PHANDLE_MPL handle,
+     int8_t offset_x, 
+     int8_t offset_y1, 
+     int8_t offset_y2
+ )
+ {
+     int result = ML_SUCCESS;
+     uint8_t data;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+     //MPL_LOGV("x=%d,y1=%d,y2=%d\n", offset_x, offset_y1, offset_y2);
+ 
+     data = offset_x & 0x3f;
+     result = yas530_i2c_write(handle,YAS_REGADDR_OFFSET_X, &data, 1);
+     ERROR_CHECK(result);
+ 
+     data = offset_y1 & 0x3f;
+     result = yas530_i2c_write(handle,YAS_REGADDR_OFFSET_Y1, &data, 1);
+     ERROR_CHECK(result);
+ 
+     data = offset_y2 & 0x3f;
+     result = yas530_i2c_write(handle,YAS_REGADDR_OFFSET_Y2, &data, 1);
+     ERROR_CHECK(result);
+ 
+ 
+     return ML_SUCCESS;
+ }
+ 
+ 
+ static int 
+ yas530_set_measure_command
+ (
+     PHANDLE_MPL handle,
+     int ldtc, 
+     int fors, 
+     int dlymes
+ )
+ {
+     int result = ML_SUCCESS;
+     uint8_t data = 0;
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     data |= 0x01; /* bit 0 must be 1 */
+     data |= ((!!ldtc)<<1) & 0x02;
+     data |= ((!!fors)<<2) & 0x04;
+     data |= ((!!dlymes)<<4) & 0x10;
+ 
+     result = yas530_i2c_write(handle,YAS_REGADDR_MEASURE_COMMAND, &data, 1);
+     ERROR_CHECK(result);
+ 
+     return result;
+ }
+ 
+ 
+ 
+ static int 
+ yas530_measure_normal
+ (
+     PHANDLE_MPL handle, 
+     struct yas_measure_data* measure_data,
+     int *busy
+ )
+ {
+     int result = ML_SUCCESS;
+     uint8_t data[8];
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     result = yas530_set_measure_command(handle,0, 0, 0);
+     ERROR_CHECK(result);
+ 
+ 
+     MLOSSleep(20);
+ 
+     result = yas530_i2c_read(handle, YAS_REGADDR_MEASURE_DATA, data, 8);
+     ERROR_CHECK(result);
+ 
+     *busy = (data[0]>>7) & 0x01;
+     measure_data->t = (int16_t) ((data[0]<<2) & 0x1fc) | ((data[1]>>6) & 0x03);
+     measure_data->x = (int16_t) ((data[2]<<5) & 0xfe0) | ((data[3]>>3) & 0x1f);
+     measure_data->y1 = (int16_t) ((data[4]<<5) & 0xfe0) | ((data[5]>>3) & 0x1f);
+     measure_data->y2 = (int16_t) ((data[6]<<5) & 0xfe0) | ((data[7]>>3) & 0x1f);
+ 
+   
+ 
+ /*
+     //MPL_LOGV("f[%d] t[%d] x[%d] y1[%d] y2[%d]\n",   *busy, 
+         measure_data->t, 
+         measure_data->x, 
+         measure_data->y1, 
+         measure_data->y2);
+ */
+     return result;
+ }
+ 
+ 
+ 
+ static int 
+ yas530_check_offset
+ (
+     PHANDLE_MPL handle,
+     int8_t offset_x, 
+     int8_t offset_y1, 
+     int8_t offset_y2,
+     int *flag_x, 
+     int *flag_y1, 
+     int *flag_y2
+ )
+ {
+     int busy;
+     int result = ML_SUCCESS;
+     struct yas_measure_data measure_data = {0,};
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     result=yas530_set_hardware_offset(handle,offset_x, offset_y1, offset_y2);
+     ERROR_CHECK(result);
+ 
+     result=yas530_measure_normal(handle,&measure_data,&busy);
+     ERROR_CHECK(result);
+ 
+     *flag_x = *flag_y1 = *flag_y2 = 0;
+     if (measure_data.x  > 2048)  *flag_x  =  1;
+     if (measure_data.y1 > 2048)  *flag_y1 =  1;
+     if (measure_data.y2 > 2048)  *flag_y2 =  1;
+     if (measure_data.x  < 2048)  *flag_x  = -1;
+     if (measure_data.y1 < 2048)  *flag_y1 = -1;
+     if (measure_data.y2 < 2048)  *flag_y2 = -1;
+ 
+     return result;
+ }
+ 
+ 
+ static int 
+ yas530_measure_and_set_offset
+ (
+     PHANDLE_MPL handle, 
+     unsigned char* offset
+ )
+ {
+     int i;
+     int result = ML_SUCCESS;
+     int8_t offset_x = 0, offset_y1 = 0, offset_y2 = 0;
+     int flag_x = 0, flag_y1 = 0, flag_y2 = 0;
+     static const int correct[5] = {16, 8, 4, 2, 1};
+ 
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+     for (i = 0; i < 5; i++) {
+         result = yas530_check_offset(handle,offset_x, offset_y1, offset_y2,&flag_x, &flag_y1, &flag_y2);
+         ERROR_CHECK(result);
+ /*
+ 
+         //MPL_LOGV("offset[%d][%d][%d] flag[%d][%d][%d]\n",
+                 offset_x, offset_y1, offset_y2,
+                 flag_x, flag_y1, flag_y2);
+ */
+ 
+         if (flag_x)  {
+             offset_x  += flag_x  * correct[i];
+         }
+         if (flag_y1) {
+             offset_y1 += flag_y1 * correct[i];
+         }
+         if (flag_y2) {
+             offset_y2 += flag_y2 * correct[i];
+         }
+     }
+ 
+     result = yas530_set_hardware_offset(handle,offset_x, offset_y1, offset_y2);
+     ERROR_CHECK(result);
+ 
+     offset[0] = offset_x;
+     offset[1] = offset_y1;
+     offset[2] = offset_y2;
+ 
+     return result;
+ }
+ 
+ 
+ static int 
+ yas530_coordinate_conversion
+ (
+     struct yas_measure_data* measure_data, 
+     int16_t *xo, 
+     int16_t *yo, 
+     int16_t *zo,
+     struct yas_correction_data *c
+ )
+ {
+     int16_t sx, sy1, sy2, sy, sz;
+     int16_t hx, hy, hz;
+     
+     //MPL_LOGV("%s",__FUNCTION__);
+     
+     
+     sx  = measure_data->x  - (c->Cx  * measure_data->t) / 100;
+     sy1 = measure_data->y1 - (c->Cy1 *measure_data->t) / 100;
+     sy2 = measure_data->y2 - (c->Cy2 * measure_data->t) / 100;
+     
+     sy = sy1 - sy2;
+     sz = -sy1 - sy2;
+     
+     int a1 = (c->a4 * sx + c->a5 * sy + c->a6 * sz);
+     
+     hx = ((100   * sx + c->a2 * sy + c->a3 * sz)>>7)*41;
+     hy = ((c->a4 * sx + c->a5 * sy + c->a6 * sz)>>7)*41;
+     hz = ((c->a7 * sx + c->a8 * sy + c->a9 * sz) >>7)*41;
+     
+     *xo =  hx;
+     *yo =  hy;
+     *zo =  hz;
+     
+
+ 
+     return ML_SUCCESS;
+ }
+ 
+ 
+ 
+ 
+ 
+ /*****************************************
+     Accelerometer Initialization Functions
+ *****************************************/
+ 
+ static int 
+ yas530_suspend
+ (
+     void *mlsl_handle,
+     struct ext_slave_descr *slave,
+     struct ext_slave_platform_data *pdata
+ )
+ {
+     int result = ML_SUCCESS;
+     
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+     return result;
+ }
+ 
+ 
+ static int 
+ yas530_resume
+ (
+     void *mlsl_handle,
+     struct ext_slave_descr *slave,
+     struct ext_slave_platform_data *pdata
+ )
+ {
+     int result = ML_SUCCESS;
+     unsigned char offset[3]={0,};
+     
+     HANDLE_MPL HandleMPL = {0,};
+     PHANDLE_MPL handle = &HandleMPL;
+     
+     handle->mlslHandle = mlsl_handle;
+     handle->addrSlave = pdata->address;
+     
+     //MPL_LOGV("%s",__FUNCTION__);
+ 
+ 
+#ifdef AIO
+     /* Enable Yamaha I2C data mode */
+     result = MLSLSetYamahaCompassDataMode(1);
+     ERROR_CHECK(result);
+#endif				/* AIO */
+ 
+ 
+     /* YAS530 Application Manual MS-3E - Section 8.4.4 */
+     /* =============================================== */
+     /* Step 1 - Setting the Test Registers */
+     result = yas530_init_test_register(handle);
+     ERROR_CHECK(result);
+ 
+ 
+     result=yas530_get_device_id(handle);
+ 
+ 
+     /*Step 2 - Reading Data stored in the CAL Register*/ 
+     result = yas530_get_calibration_data(handle,&pYas530Data->cal);
+     ERROR_CHECK(result);
+ 
+     yas530_correction_value(&pYas530Data->cal, &pYas530Data->correction);
+ 
+ 
+ 
+     /*Step 3 - Setting the Config Register */
+     result = yas530_set_configuration(handle, 0, 0, pYas530Data->cal.dck);
+     ERROR_CHECK(result);
+ 
+ 
+ 
+ 
+     /*Step 4 - Setting the Measurement Interval Register */
+     result = yas530_set_measure_interval(handle, 0);
+     ERROR_CHECK(result);
+ 
+ 
+ 
+ 
+     /*Step 5 - Initialization Coil Operation */
+     result = yas530_init_coil(handle);
+     ERROR_CHECK(result);
+ 
+ 
+ 
+ 
+     /*Step 6 - Setting Offset Control Values*/
+     /*Step 7 - Finding Offset*/
+     result = yas530_measure_and_set_offset(handle, offset);
+     ERROR_CHECK(result);
+ 
+ 
+     //MPL_LOGV("[k][a2][a3][a4][a5][a6][a7][a8][a9]\n");
+ /*    
+     MPL_LOGV("[%ld][%ld][%ld][%ld][%ld][%ld][%ld][%ld][%ld]\n", 
+         pYas530Data->correction.k, 
+         pYas530Data->correction.a2,
+         pYas530Data->correction.a3,
+         pYas530Data->correction.a4,
+         pYas530Data->correction.a5,
+         pYas530Data->correction.a6,
+         pYas530Data->correction.a7,
+         pYas530Data->correction.a8,
+         pYas530Data->correction.a9);    
+ */
+     return result;
+ }
+ 
+ 
+ 
+ 
+ static int 
+ yas530_read
+ (
+     void *mlsl_handle,
+     struct ext_slave_descr *slave,
+     struct ext_slave_platform_data *pdata, 
+     unsigned char *data
+ )
+ {
+     int busy;
+     int result = ML_SUCCESS;
+ 
+     //int16_t t, x, y1, y2;
+     int16_t dataOut[3] = {0,};
+     struct yas_measure_data measure_data = {0,};
+ 
+     HANDLE_MPL HandleMPL = {0,};
+     PHANDLE_MPL handle = &HandleMPL;
+     
+     handle->mlslHandle = mlsl_handle;
+     handle->addrSlave = pdata->address;
+ 
+     //MPL_LOGV("yas530_read");
+ 
+ 
+ 
+     /* Config register*/
+     result = yas530_set_configuration(handle, 0, 0, pYas530Data->cal.dck);
+     ERROR_CHECK(result);
+ 
+ 
+     /* normal measure */
+     result=yas530_measure_normal(handle,&measure_data,&busy);
+     ERROR_CHECK(result);
+ 
+     /* check overflow */
+     if((measure_data.x>=4095) || 
+         (measure_data.y1>=4095) || 
+         (measure_data.y2>=4095)) 
+       return  ML_ERROR_COMPASS_DATA_OVERFLOW;
+ 
+ 
+     result = yas530_coordinate_conversion(
+                         &measure_data,
+                         &dataOut[0],&dataOut[1],&dataOut[2],
+                         &pYas530Data->correction);
+     ERROR_CHECK(result);
+ 
+     data[0] = dataOut[0]>>8;
+     data[1] = dataOut[0] & 0xFF;
+     data[2] = dataOut[1]>>8;
+     data[3] = dataOut[1] & 0xFF;
+     data[4] = dataOut[2]>>8;
+     data[5] = dataOut[2] & 0xFF;
+ 
+     //MPL_LOGV("[data0][data1][data2][data3][data4][data5][data6]\n");
+     //MPL_LOGV("[%ld][%ld][%ld][%ld][%ld][%ld]\n", data[0], data[1],data[2],data[3],data[4],data[5]);    
+ 
+ 
+     return result;
+ }
+ 
+ 
+ 
+ struct ext_slave_descr yas530_descr = {
+     /*.init             = */ NULL,
+     /*.exit             = */ NULL,
+     /*.suspend          = */ yas530_suspend,
+     /*.resume           = */ yas530_resume,
+     /*.read             = */ yas530_read,
+     /*.config           = */ NULL,
+     /*.name             = */ "yas530",
+     /*.type             = */ EXT_SLAVE_TYPE_COMPASS,
+     /*.id               = */ COMPASS_ID_YAS530,
+     /*.reg              = */ 0x06,
+     /*.len              = */ 6,
+     /*.endian           = */ EXT_SLAVE_BIG_ENDIAN,
+     /*.range            = */ {19660, 8000},
+ };
+ 
+ struct ext_slave_descr *yas530_get_slave_descr(void)
+ {
+     return &yas530_descr;
+ }
+ 
+#ifdef __KERNEL__
+ EXPORT_SYMBOL(yas530_get_slave_descr);
+#endif
+ 
+ /**
+  *  @}
+ **/
+ 
+ 
Index: Kernel/drivers/sensors/compass/Kconfig
===================================================================
--- Kernel.orig/drivers/sensors/compass/Kconfig	2011-02-15 16:24:37.000000000 +0530
+++ Kernel/drivers/sensors/compass/Kconfig	2011-02-17 20:41:15.082230643 +0530
@@ -15,6 +15,6 @@
 	help
 	  This option enables magnetic sensors using ak8973 driver.
 
-config COMPASS_YAS530
+config COMPASS_YAS530_GENERIC
 	tristate "Yamaha YAS530 Geomagnetic Sensor"
 	depends on COMPASS
Index: Kernel/drivers/sensors/compass/Makefile
===================================================================
--- Kernel.orig/drivers/sensors/compass/Makefile	2011-02-15 16:24:37.000000000 +0530
+++ Kernel/drivers/sensors/compass/Makefile	2011-02-17 20:41:15.082230643 +0530
@@ -7,5 +7,5 @@
 
 obj-$(CONFIG_COMPASS_AK8973B)	+= ak8973b.o
 
-obj-$(CONFIG_COMPASS_YAS530)	+= yas530.o
+obj-$(CONFIG_COMPASS_YAS530_GENERIC)	+= yas530.o
 
Index: Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-02-17 20:40:02.000000000 +0530
+++ Kernel/arch/arm/mach-omap2/board-omap4tab10-1.c	2011-02-17 20:41:15.082230643 +0530
@@ -288,13 +288,13 @@
 	 },
 	/* compass */
 	.compass = {
-	.get_slave_descr = yas529_get_slave_descr,
+	.get_slave_descr = yas530_get_slave_descr,
 	.adapt_num   = 4,
 	.bus         = EXT_SLAVE_BUS_PRIMARY,
 	.address     = 0x2E,
-	.orientation = { 1, 0, 0, 
-			 0, 1, 0, 
-			 0, 0, 1 },
+	.orientation = {  0,  1,  0, 
+			 -1,  0,  0, 
+			  0,  0,  1 },
 	 },
 };
 
Index: Kernel/include/linux/mpu.h
===================================================================
--- Kernel.orig/include/linux/mpu.h	2011-02-17 20:39:52.000000000 +0530
+++ Kernel/include/linux/mpu.h	2011-02-17 20:41:15.082230643 +0530
@@ -142,6 +142,7 @@
 	COMPASS_ID_LSM303,
 	COMPASS_ID_MMC314X,
 	COMPASS_ID_HSCDTD00XX,
+	COMPASS_ID_YAS530,
 
 	PRESSURE_ID_BMA085,
 };
@@ -381,6 +382,13 @@
 #define get_compass_slave_descr yas529_get_slave_descr
 #endif
 
+#ifdef CONFIG_SENSORS_YAS530    /* Yamaha compass */
+struct ext_slave_descr *yas530_get_slave_descr(void);
+#undef get_compass_slave_descr
+#define get_compass_slave_descr yas530_get_slave_descr
+#endif
+
+
 #ifdef CONFIG_SENSORS_HSCDTD00XX	/* Alps compass */
 struct ext_slave_descr *hscdtd00xx_get_slave_descr(void);
 #undef get_compass_slave_descr
Index: Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig
===================================================================
--- Kernel.orig/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-02-17 20:39:52.000000000 +0530
+++ Kernel/arch/arm/configs/android_omap4tab_rev05_defconfig	2011-02-17 20:41:15.082230643 +0530
@@ -816,22 +816,10 @@
 CONFIG_SENSORS_MPU3050=y
 # CONFIG_SENSORS_MPU6000 is not set
 # CONFIG_SENSORS_ACCELEROMETER_NONE is not set
-# CONFIG_SENSORS_ADXL346 is not set
-# CONFIG_SENSORS_BMA150 is not set
-# CONFIG_SENSORS_BMA222 is not set
 CONFIG_SENSORS_KXSD9=y
-# CONFIG_SENSORS_KXTF9 is not set
-# CONFIG_SENSORS_LIS331DLH is not set
-# CONFIG_SENSORS_LSM303DLHA is not set
-# CONFIG_SENSORS_MMA8450 is not set
-# CONFIG_SENSORS_MMA8451 is not set
 # CONFIG_SENSORS_COMPASS_NONE is not set
-# CONFIG_SENSORS_AK8975 is not set
-# CONFIG_SENSORS_MMC314X is not set
-# CONFIG_SENSORS_AMI30X is not set
-# CONFIG_SENSORS_HMC5883 is not set
-# CONFIG_SENSORS_LSM303DLHM is not set
-CONFIG_SENSORS_YAS529=y
+# CONFIG_SENSORS_YAS529 is not set
+CONFIG_SENSORS_YAS530=y
 # CONFIG_SENSORS_HSCDTD00XX is not set
 CONFIG_SENSORS_PRESSURE_NONE=y
 # CONFIG_SENSORS_BMA085 is not set
@@ -846,6 +834,7 @@
 # CONFIG_SENSORS_TSL2550 is not set
 CONFIG_TWL6030_POWER_OFF=y
 # CONFIG_SENSORS_BH1780 is not set
+# CONFIG_SENSORS_AK8975 is not set
 # CONFIG_TWL6040_VIB is not set
 # CONFIG_DS1682 is not set
 # CONFIG_TI_DAC7512 is not set
Index: Kernel/drivers/sensors/mpu3050/Kconfig
===================================================================
--- Kernel.orig/drivers/sensors/mpu3050/Kconfig	2011-02-17 20:39:52.000000000 +0530
+++ Kernel/drivers/sensors/mpu3050/Kconfig	2011-02-17 20:41:15.082230643 +0530
@@ -52,7 +52,7 @@
 choice
     prompt "Compass Type"
     depends on SENSORS_MPU6000 || SENSORS_MPU3050
-    default SENSORS_YAS529
+    default SENSORS_YAS530
 
 config SENSORS_COMPASS_NONE
     bool "NONE"
@@ -66,6 +66,12 @@
     help
       This enables support for the Yamaha yas529 compass
 
+config SENSORS_YAS530
+    bool "Yamaha yas530"
+    depends on SENSORS_MPU3050
+    help
+      This enables support for the Yamaha yas530 compass
+
 config SENSORS_HSCDTD00XX
     bool "Alps hscdtd00XX"
     depends on SENSORS_MPU3050
Index: Kernel/drivers/sensors/mpu3050/Makefile
===================================================================
--- Kernel.orig/drivers/sensors/mpu3050/Makefile	2011-02-17 20:39:52.000000000 +0530
+++ Kernel/drivers/sensors/mpu3050/Makefile	2011-02-17 20:41:15.082230643 +0530
@@ -30,6 +30,10 @@
 mpu3050-objs += $(MLLITE_DIR)compass/yas529-kernel.o
 endif
 
+ifdef CONFIG_SENSORS_YAS530
+mpu3050-objs += $(MLLITE_DIR)compass/yas530.o
+endif
+
 #
 # Pressure options
 #
