Index: kernel/arch/arm/mach-omap2/dpll-44xx.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/dpll-44xx.c	2011-05-09 15:23:05.877105900 +0900
+++ kernel/arch/arm/mach-omap2/dpll-44xx.c	2011-05-09 15:24:23.439647780 +0900
@@ -38,8 +38,8 @@
 #define LP_98M_RATE		98304000
 #define LP_DELAY		1000000
 
-static struct workqueue_struct	*lpmode_wq;
 static struct delayed_work	lpmode_work;
+struct clk *dpll_core_clk=NULL;
 
 bool omap4_lpmode = false;
 
@@ -115,7 +115,6 @@
 	 * parameters in EMIF shadow registers for validrate divided
 	 * by 2.
 	 */
-	if (!omap4_lpmode)
 	omap_emif_setup_registers(validrate / 2, LPDDR2_VOLTAGE_STABLE);
 
 	/*
@@ -201,7 +200,6 @@
 		 * parameters in EMIF shadow registers for bypass clock rate
 		 * divided by 2
 		 */
-		 if (!omap4_lpmode)
 		omap_emif_setup_registers(rate / 2, LPDDR2_VOLTAGE_STABLE);
 
 		/*
@@ -251,7 +249,6 @@
 		 * parameters in EMIF shadow registers for rate divided
 		 * by 2.
 		 */
-		 if (!omap4_lpmode)
 		omap_emif_setup_registers(rate / 2, LPDDR2_VOLTAGE_STABLE);
 
 		/*
@@ -515,12 +512,35 @@
 {
 	int delay;
 
-	if (num_online_cpus() > 1) {
+	 /*
+	  * It is invalid to enter into DPLL cascading
+	  * with both CPU cores online.
+	  *
+	  * If CPU1 remains online due to higher-than-normal system activity 
+	  * then the 'check' function will schedule itself to be re-run in one 
+	  * second later to check again if CPU1 is offline or not.  
+	  * This will continue until either CPU1 goes offline or
+	  * ASoC requests for DPLL cascade to be exited.
+	  */ 
+
+	if (num_online_cpus() > 1 ) {
 		delay = usecs_to_jiffies(LP_DELAY);
-		schedule_delayed_work_on(0, &lpmode_work, delay);
-	}
-	else
+		return schedule_delayed_work_on(0, &lpmode_work, delay);
+ 	} 
+
+	/*
+	 * If CORE DPLL clock is at > 400MHz, then the 'check' function will 
+	 * schedule itself to be re-run in one second later to check again 
+	 * If CORE DPLL clock is < 400MHz or not.This will continue until 
+	 * CORE domain drop to OPP50.
+	 */	
+	if (clk_get_rate(dpll_core_clk) > 400000000) {
+		delay = usecs_to_jiffies(LP_DELAY);
+		return schedule_delayed_work_on(0, &lpmode_work, delay);
+	} else {
+		pr_err("[%s] dpll_core_m2 rate=%d\n", __func__, clk_get_rate(dpll_core_clk));
 		omap4_dpll_low_power_cascade_enter();
+	}
 }
 
 int omap4_dpll_low_power_cascade_check_entry()
@@ -530,6 +550,10 @@
 	INIT_DELAYED_WORK_DEFERRABLE(&lpmode_work,
 			omap4_dpll_low_power_cascade_check_timer);
 
+	dpll_core_clk = clk_get(NULL, "dpll_core_m2_ck");
+	if(!dpll_core_clk)
+		pr_err("[%s] fail to get emif1_fck clock\n", __func__);
+
 	return schedule_delayed_work_on(0, &lpmode_work, delay);
 }
 
Index: kernel/arch/arm/mach-omap2/smartreflex.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/smartreflex.c	2011-05-09 15:23:06.067171042 +0900
+++ kernel/arch/arm/mach-omap2/smartreflex.c	2011-05-09 15:24:23.469647867 +0900
@@ -172,12 +172,10 @@
 		}
 	}
 	switch (sys_clk_speed) {
-	case 12288000:
-		sr->clk_length = 0x41;
-		break;
 	case 12000000:
 		sr->clk_length = SRCLKLENGTH_12MHZ_SYSCLK;
 		break;
+	case 12288000:
 	case 13000000:
 		sr->clk_length = SRCLKLENGTH_13MHZ_SYSCLK;
 		break;
