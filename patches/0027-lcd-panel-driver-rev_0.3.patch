Index: android-2.6.35/drivers/video/omap2/displays/panel-samsung-D10E50T6332.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/video/omap2/displays/panel-samsung-D10E50T6332.c	2010-12-22 14:36:06.671988904 +0530
@@ -0,0 +1,234 @@
+/*
+ * LCD panel driver for Samsung D10E50T6332
+ *
+ * Copyright (C) 2010 Samsung Electronics
+ * Author: Shankar Bandal (shankar.b@samsung.com)
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License  as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+
+#include <plat/display.h>
+
+extern int cmc623_init(void);
+
+struct samsung_data {
+	/* XXX This regulator should actually be in SDP board file, not here,
+	 * as it doesn't actually power the LCD, but something else that
+	 * affects the output to LCD (I think. Somebody clarify). It doesn't do
+	 * harm here, as SDP is the only board using this currently */
+	struct regulator *vusim_reg;
+};
+
+static struct omap_video_timings samsung_D10E50T6332_timings = {
+	.x_res = 1280,
+	.y_res = 800,
+	.pixel_clock	= 68940,
+
+	.hsw		= 48, 	// h_sync_width
+	.hfp		= 16,	// h_front_porch
+	.hbp		= 64, 	//h_back_porch
+
+	.vsw		= 3, 	// v_sync_width
+	.vfp		= 1,	// v_front_porch
+	.vbp		= 12, 	// v_back_porch
+
+	
+	/* 
+	 *	For Magna D10E50T6332 TFT Display timing controller:
+	 *	Signal					Min. 			Typ.			Max
+	 *	Frame Frequency(TV)			815			-			850
+	 *	Vertical Active Display Term(TVD) 	- 			800			-
+	 *	One Line Scanning Time(TH)		1350			1408			1460
+	 *	Horizontal Active Display Term(THD) 	-			1280			-
+	 *
+	 *	Total clocks per line (TH) = hsw + hfp + columns (THD) + hbp
+	 *			     1408  = 48  + 16  + 1280          + 64
+	 *						  
+	 *	Total LCD lines (TV) 	  = vsw + vfp + rows (TVD)  + vbp
+	 *			816	  = 3   + 1   + 800	    + 12
+	 *					
+	 *	From this data,
+	 *	- single line takes (48 + 16 + 1280 + 64) clocks = 1408 clocks/line
+	 *	- full frame takes (3 + 1 + 800 + 12) lines = 816 lines/frame
+	 *	- full frame in clocks = 1408 * 816 = 1148928 clocks/frame
+	 *	- 20MHz, the LCD would refresh at 20M/1148928 = 17.4Hz
+	 *	- 70MHz, the LCD would refresh at 68.94M/1148928 = 60Hz
+	 */
+
+};
+
+static int samsung_D10E50T6332_panel_probe(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd;
+
+	dssdev->panel.config = OMAP_DSS_LCD_TFT | OMAP_DSS_LCD_IVS |
+		OMAP_DSS_LCD_IHS;
+	dssdev->panel.acb = 0x28;
+	dssdev->panel.timings = samsung_D10E50T6332_timings;
+
+	sd = kzalloc(sizeof(*sd), GFP_KERNEL);
+	if (!sd)
+		return -ENOMEM;
+
+	dev_set_drvdata(&dssdev->dev, sd);
+#if 0
+	sd->vusim_reg = regulator_get(&dssdev->dev, "vusim");
+	if (IS_ERR(sd->vusim_reg)) {
+		kfree(sd);
+		pr_err("failed to get VUSIM regulator\n");
+		return PTR_ERR(sd->vusim_reg);
+	}
+#endif
+	return 0;
+}
+
+static void samsung_D10E50T6332_panel_remove(struct omap_dss_device *dssdev)
+{
+	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+
+	//regulator_put(sd->vusim_reg);
+
+	kfree(sd);
+}
+
+static int samsung_D10E50T6332_panel_enable(struct omap_dss_device *dssdev)
+{
+//	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+	int r = 0;
+
+	/* wait couple of vsyncs until enabling the LCD */
+	//msleep(1);
+	//regulator_enable(sd->vusim_reg);
+
+	if (dssdev->platform_enable) {
+		r = dssdev->platform_enable(dssdev);
+		if(r)
+		    return r;
+	}
+	r = omapdss_dpi_display_enable(dssdev);
+	if (r) {
+		dev_err(&dssdev->dev, "failed to enable DPI\n");
+		return r;
+	}
+	dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
+
+
+	/* Now enable image converter */
+	if(cmc623_init()< 0)
+	{
+		printk("[SHANKAR] %s [%d] CMC623 init failed ", __func__, __LINE__);
+		return -1;
+	}
+	return r;
+}
+
+static void samsung_D10E50T6332_panel_disable(struct omap_dss_device *dssdev)
+{
+//	struct samsung_data *sd = dev_get_drvdata(&dssdev->dev);
+	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
+		return;
+
+	omapdss_dpi_display_disable(dssdev);
+
+
+	if (dssdev->platform_disable)
+		dssdev->platform_disable(dssdev);
+
+	dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
+
+	//regulator_disable(sd->vusim_reg);
+
+	/* wait at least 5 vsyncs after disabling the LCD */
+
+	msleep(1);
+}
+
+static int samsung_D10E50T6332_panel_suspend(struct omap_dss_device *dssdev)
+{
+	samsung_D10E50T6332_panel_disable(dssdev);
+	return 0;
+}
+
+static int samsung_D10E50T6332_panel_resume(struct omap_dss_device *dssdev)
+{
+	return samsung_D10E50T6332_panel_enable(dssdev);
+}
+
+static void samsung_D10E50T6332_panel_get_resolution(struct omap_dss_device *dssdev,
+		u16 *xres, u16 *yres)
+{
+	*xres = dssdev->panel.timings.x_res;
+	*yres = dssdev->panel.timings.y_res;
+}
+
+
+static void samsung_D10E50T6332_panel_set_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        dpi_set_timings(dssdev, timings);
+}
+
+static void samsung_D10E50T6332_panel_get_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        *timings = dssdev->panel.timings;
+}
+
+static int samsung_D10E50T6332_panel_check_timings(struct omap_dss_device *dssdev,
+                struct omap_video_timings *timings)
+{
+        return dpi_check_timings(dssdev, timings);
+}
+
+static struct omap_dss_driver samsung_D10E50T6332_driver = {
+	.probe		= samsung_D10E50T6332_panel_probe,
+	.remove		= samsung_D10E50T6332_panel_remove,
+
+	.enable		= samsung_D10E50T6332_panel_enable,
+	.disable	= samsung_D10E50T6332_panel_disable,
+	.get_resolution = samsung_D10E50T6332_panel_get_resolution,
+	.suspend	= samsung_D10E50T6332_panel_suspend,
+	.resume		= samsung_D10E50T6332_panel_resume,
+
+	.set_timings	= samsung_D10E50T6332_panel_set_timings,
+	.get_timings	= samsung_D10E50T6332_panel_get_timings,
+	.check_timings	= samsung_D10E50T6332_panel_check_timings,
+
+	.driver         = {
+		.name   = "samsung_D10E50T6332_panel",
+		.owner  = THIS_MODULE,
+	},
+};
+
+static int __init samsung_D10E50T6332_panel_drv_init(void)
+{
+	return omap_dss_register_driver(&samsung_D10E50T6332_driver);
+}
+
+static void __exit samsung_D10E50T6332_panel_drv_exit(void)
+{
+	omap_dss_unregister_driver(&samsung_D10E50T6332_driver);
+}
+
+module_init(samsung_D10E50T6332_panel_drv_init);
+module_exit(samsung_D10E50T6332_panel_drv_exit);
+MODULE_DESCRIPTION("Samsung D10E50T6332 LCD timing controller driver");
+MODULE_AUTHOR("Shankar Bandal<shankar.b@samsung.com>");
+MODULE_LICENSE("GPL");
Index: android-2.6.35/drivers/video/omap2/displays/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/video/omap2/displays/Kconfig	2010-12-22 14:36:02.491988531 +0530
+++ android-2.6.35/drivers/video/omap2/displays/Kconfig	2010-12-22 14:36:45.443862458 +0530
@@ -15,6 +15,12 @@
           LCD Panel used on Samsung Universal OMAP4 board
 
 
+config PANEL_SAMSUNG_D10E50T6332
+        tristate "Samsung D10E50T6332 LCD TFT Panel"
+        depends on OMAP2_DSS
+        help
+          LCD Panel used on Samsung Universal Rev 0.3 OMAP4 board
+
 config PANEL_SHARP_LS037V7DW01
         tristate "Sharp LS037V7DW01 LCD Panel"
         depends on OMAP2_DSS
Index: android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- android-2.6.35.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:06.453238559 +0530
+++ android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:48.543862873 +0530
@@ -54,14 +54,22 @@
 #include "hsmmc.h"
 #include "smartreflex-class3.h"
 
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV <= 2)
 #define SDP4430_LCD_PANEL_BACKLIGHT_ENABLE_GPIO		16
 #define SDP4430_MLCD1_PANEL_ENABLE_GPIO			2
 #define SDP4430_MLCD2_PANEL_ENABLE_GPIO			40
 #define SDP4430_LVDS_nRST_ENABLE_GPIO			17
+#else
+#define OMAP4TAB_MLCD_ON_GPIO				40
+#define OMAP4TAB_LVDS_nRST_GPIO				53
+#define OMAP4TAB_TOUCH_nINT_GPIO			90
+#define OMAP4TAB_TOUCH_nRST_GPIO			89
+#endif
+
 #define OMAP4SDP_MDM_PWR_EN_GPIO			157
-#define OMAP4430UNIV_ISL29023_INT_GPIO			52
-#define OMAP4430UNIV_KXSD9_INT_GPIO			94
-#define OMAP4430UNIV_AKM8973_INT_GPIO			157
+#define OMAP4TAB_ISL29023_INT_GPIO			52
+#define OMAP4TAB_KXSD9_INT_GPIO				94
+#define OMAP4TAB_AKM8973_INT_GPIO			157
 
 #define CONTROL_CORE_PAD0_I2C3_SDA_PAD1_I2C4_SCL	0x4A10012C
 #define CONTROL_CORE_PAD0_I2C4_SDA_PAD1_MCSPI1_CLK	0x4A100130
@@ -73,10 +81,17 @@
 #define OMAP4430_GPIO_TA_NCHG				12
 #define OMAP4430_GPIO_USBSW_NINT			44
 
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV <= 2)
 static unsigned backlight_gpio;
 static unsigned mlcd1_enable_gpio;
 static unsigned mlcd2_enable_gpio;
+static unsigned lvds_nrst_gpio;	
+#else
 static unsigned lvds_nrst_gpio;
+static unsigned mlcd_on_gpio;
+static unsigned touch_nrst_gpio;
+#endif
+
 static int lcd_enabled;
 
 void omap4430univ_sensors_init(void);
@@ -161,7 +176,7 @@
 {
 	return;
 }
-
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV <= 2)
 static int ltn121at_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
 
@@ -197,7 +212,44 @@
         .platform_disable       = ltn121at_panel_disable_lcd,
 	.channel                        = OMAP_DSS_CHANNEL_LCD2,
 };
+#elif (CONFIG_SAMSUNG_OMAP4_TAB_REV == 3)
+static int D10E50T6332_panel_enable_lcd(struct omap_dss_device *dssdev)
+{
+
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+        gpio_direction_output(mlcd_on_gpio, 1);
+        gpio_direction_output(lvds_nrst_gpio, 1);
+	
+        lcd_enabled = 1;
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+        return 0;
+}
+
+static void D10E50T6332_panel_disable_lcd(struct omap_dss_device *dssdev)
+{
+	printk("[SHANKAR] %s [%d] entry \n", __func__, __LINE__);
+        lcd_enabled = 0;
+
+        gpio_direction_output(mlcd_on_gpio, 0);
+        gpio_direction_output(lvds_nrst_gpio, 0);
+	printk("[SHANKAR] %s [%d] exit \n", __func__, __LINE__);
+	return;
+
+ }
+ 
+static struct omap_dss_device omap4tab_lcd_device = {
+        .name                   = "lcd",
+        .driver_name            = "samsung_D10E50T6332_panel",
+        .type                   = OMAP_DISPLAY_TYPE_DPI,
+        .phy.dpi.data_lines     = 24,
+        .platform_enable        = D10E50T6332_panel_enable_lcd,
+        .platform_disable       = D10E50T6332_panel_disable_lcd,
+	.channel                = OMAP_DSS_CHANNEL_LCD2,
+};
 
+#else
+/*TBD */
+#endif
 
 static struct omap_dss_device omap4tab_hdmi_device = {
 	.name = "hdmi",
@@ -774,7 +826,7 @@
 static struct i2c_board_info __initdata omap4tab_i2c_2_boardinfo[] = {
 	{
 		I2C_BOARD_INFO("isl29023", 0x44),
-		.irq	= OMAP_GPIO_IRQ(OMAP4430UNIV_ISL29023_INT_GPIO),
+		.irq	= OMAP_GPIO_IRQ(OMAP4TAB_ISL29023_INT_GPIO),
 	},
 	{
 		I2C_BOARD_INFO("secFuelgaugeDev", 0x34),
@@ -788,11 +840,11 @@
 static struct i2c_board_info __initdata omap4tab_i2c_4_boardinfo[] = {
 	{
 		I2C_BOARD_INFO("akm8973", 0x1C),
-		.irq	= OMAP_GPIO_IRQ(OMAP4430UNIV_AKM8973_INT_GPIO),
+		.irq	= OMAP_GPIO_IRQ(OMAP4TAB_AKM8973_INT_GPIO),
 	},
 	{
 		I2C_BOARD_INFO("kxsd9", 0x18),
-		.irq	= OMAP_GPIO_IRQ(OMAP4430UNIV_KXSD9_INT_GPIO),
+		.irq	= OMAP_GPIO_IRQ(OMAP4TAB_KXSD9_INT_GPIO),
 	},
 #if (CONFIG_SAMSUNG_OMAP4_TAB_REV == 3)
         {
@@ -934,6 +986,7 @@
 	return;
 }
 
+#if (CONFIG_SAMSUNG_OMAP4_TAB_REV <= 2)
 static void __init omap4tab_display_init(void)
 {
         int r;
@@ -980,7 +1033,40 @@
         return;
 
 }
+#else 
+
+static void __init omap4tab_display_init(void)
+{
+	    int r;
+
+        mlcd_on_gpio    = OMAP4TAB_MLCD_ON_GPIO;
+        lvds_nrst_gpio  = OMAP4TAB_LVDS_nRST_GPIO;
+
+        r = gpio_request(mlcd_on_gpio, "LCD MLCD_ON");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err0;
+        }
 
+        r = gpio_request(lvds_nrst_gpio, "LVDS_nRST");
+        if (r) {
+                printk(KERN_ERR "failed to get LCD MLCD_ON GPIO\n");
+                goto err1;
+        }
+
+        gpio_direction_output(mlcd_on_gpio, 0);
+        gpio_direction_output(lvds_nrst_gpio, 0);
+
+        return;
+
+err1:
+        gpio_free(lvds_nrst_gpio);
+err0:
+		gpio_free(mlcd_on_gpio);
+        return;
+}
+
+#endif
 static void enable_board_wakeup_source(void)
 {
 	u16 padconf;
Index: android-2.6.35/arch/arm/configs/android_omap4tab_rev03_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_omap4tab_rev03_defconfig	2010-12-22 14:36:06.453238559 +0530
+++ android-2.6.35/arch/arm/configs/android_omap4tab_rev03_defconfig	2010-12-22 14:36:48.533862725 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35
-# Sat Oct 23 11:17:28 2010
+# Sat Oct 23 11:54:02 2010
 #
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
@@ -1461,7 +1461,8 @@
 # OMAP2/3 Display Device Drivers
 #
 # CONFIG_PANEL_GENERIC is not set
-CONFIG_PANEL_SAMSUNG_LTN121AT=y
+# CONFIG_PANEL_SAMSUNG_LTN121AT is not set
+CONFIG_PANEL_SAMSUNG_D10E50T6332=y
 # CONFIG_PANEL_SHARP_LS037V7DW01 is not set
 # CONFIG_PANEL_SHARP_LQ043T1DG01 is not set
 # CONFIG_PANEL_PICO_DLP is not set
Index: android-2.6.35/drivers/video/omap2/displays/Makefile
===================================================================
--- android-2.6.35.orig/drivers/video/omap2/displays/Makefile	2010-12-22 14:36:02.491988531 +0530
+++ android-2.6.35/drivers/video/omap2/displays/Makefile	2010-12-22 14:36:45.423862671 +0530
@@ -10,3 +10,4 @@
 obj-$(CONFIG_PANEL_ACX565AKM) += panel-acx565akm.o
 
 obj-$(CONFIG_PANEL_SAMSUNG_LTN121AT) += panel-samsung-ltn121at.o
+obj-$(CONFIG_PANEL_SAMSUNG_D10E50T6332) += panel-samsung-D10E50T6332.o cmc623.o
