Index: android-2.6.35/drivers/usb/otg/Kconfig
===================================================================
--- android-2.6.35.orig/drivers/usb/otg/Kconfig	2010-12-10 15:11:22.000000000 +0530
+++ android-2.6.35/drivers/usb/otg/Kconfig	2010-12-22 14:36:11.491988795 +0530
@@ -76,4 +76,9 @@
 	 built-in with usb ip or which are autonomous and doesn't require any
 	 phy programming such as ISP1x04 etc.
 
+config FSA9480_MICROUSB
+bool "FSA9480 MicroUSB Driver"
+depends on I2C && USB_GADGET
+
+
 endif # USB || OTG
Index: android-2.6.35/drivers/usb/otg/Makefile
===================================================================
--- android-2.6.35.orig/drivers/usb/otg/Makefile	2010-12-10 15:11:22.000000000 +0530
+++ android-2.6.35/drivers/usb/otg/Makefile	2010-12-22 14:36:11.491988795 +0530
@@ -4,6 +4,8 @@
 
 # infrastructure
 obj-$(CONFIG_USB_OTG_UTILS)	+= otg.o
+obj-$(CONFIG_FSA9480_MICROUSB)  += fsa9480.o
+
 
 # transceiver drivers
 obj-$(CONFIG_USB_GPIO_VBUS)	+= gpio_vbus.o
Index: android-2.6.35/drivers/usb/otg/fsa9480.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/drivers/usb/otg/fsa9480.c	2010-12-22 14:36:11.491988795 +0530
@@ -0,0 +1,592 @@
+/*
+ * fsa9480.c - FSA9480 micro USB switch device driver
+ *
+ * Copyright (C) 2009 Samsung Electronics
+ * Wonguk Jeong <wonguk.jeong@samsung.com>
+ * Minkyu Kang <mk7.kang@samsung.com>
+ *
+ * Modified by Sumeet Pawnikar <sumeet.p@samsung.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/fsa9480.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/workqueue.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <plat/microusbic.h>
+
+/* FSA9480 I2C registers */
+#define FSA9480_REG_DEVID              0x01
+#define FSA9480_REG_CTRL               0x02
+#define FSA9480_REG_INT1               0x03
+#define FSA9480_REG_INT2               0x04
+#define FSA9480_REG_INT1_MASK          0x05
+#define FSA9480_REG_INT2_MASK          0x06
+#define FSA9480_REG_ADC                        0x07
+#define FSA9480_REG_TIMING1            0x08
+#define FSA9480_REG_TIMING2            0x09
+#define FSA9480_REG_DEV_T1             0x0a
+#define FSA9480_REG_DEV_T2             0x0b
+#define FSA9480_REG_BTN1               0x0c
+#define FSA9480_REG_BTN2               0x0d
+#define FSA9480_REG_CK                 0x0e
+#define FSA9480_REG_CK_INT1            0x0f
+#define FSA9480_REG_CK_INT2            0x10
+#define FSA9480_REG_CK_INTMASK1                0x11
+#define FSA9480_REG_CK_INTMASK2                0x12
+#define FSA9480_REG_MANSW1             0x13
+#define FSA9480_REG_MANSW2             0x14
+
+/* MANSW1 */
+#define VAUDIO                 0x90
+#define UART                   0x6c
+#define AUDIO                  0x48
+#define DHOST                  0x24
+#define AUTO                   0x0
+
+/* Control */
+#define SWITCH_OPEN            (1 << 4)
+#define RAW_DATA               (1 << 3)
+#define MANUAL_SWITCH          (1 << 2)
+#define WAIT                   (1 << 1)
+#define INT_MASK               (1 << 0)
+#define CTRL_MASK              (SWITCH_OPEN | RAW_DATA | MANUAL_SWITCH | \
+                                       WAIT | INT_MASK)
+
+#define DEV_USB_OTG            (1 << 7)
+#define DEV_DEDICATED_CHG      (1 << 6)
+#define DEV_USB_CHG            (1 << 5)
+#define DEV_CAR_KIT            (1 << 4)
+#define DEV_UART               (1 << 3)
+#define DEV_USB                        (1 << 2)
+#define DEV_AUDIO_2            (1 << 1)
+#define DEV_AUDIO_1            (1 << 0)
+
+#define FSA9480_DEV_T1_USB_MASK                (DEV_USB_OTG | DEV_USB)
+#define FSA9480_DEV_T1_UART_MASK       (DEV_UART)
+#define FSA9480_DEV_T1_CHARGER_MASK    (DEV_DEDICATED_CHG | DEV_USB_CHG)
+
+#define DEV_AV                 (1 << 6)
+#define DEV_TTY                        (1 << 5)
+#define DEV_PPD                        (1 << 4)
+#define DEV_JIG_UART_OFF       (1 << 3)
+#define DEV_JIG_UART_ON                (1 << 2)
+#define DEV_JIG_USB_OFF                (1 << 1)
+#define DEV_JIG_USB_ON         (1 << 0)
+
+#define FSA9480_DEV_T2_USB_MASK                (DEV_JIG_USB_OFF | DEV_JIG_USB_ON)
+#define FSA9480_DEV_T2_UART_MASK       (DEV_JIG_UART_OFF | DEV_JIG_UART_ON)
+
+#define FSA9480_DEV_T2_JIG_MASK                (DEV_JIG_USB_OFF | DEV_JIG_USB_ON | \
+                                       DEV_JIG_UART_OFF | DEV_JIG_UART_ON)
+
+struct fsa9480_usbsw {
+       struct i2c_client               *client;
+       struct fsa9480_platform_data    *pdata;
+       struct work_struct              work;
+       int                             dev1;
+       int                             dev2;
+       int                             mansw;
+};
+
+static struct fsa9480_usbsw *chip;
+
+static int fsa9480_write_reg(struct i2c_client *client,        u8 reg, u8 data)
+{
+       int ret = 0;
+       u8 buf[2];
+       struct i2c_msg msg[1];
+
+       buf[0] = reg;
+       buf[1] = data;
+
+       msg[0].addr = client->addr;
+       msg[0].flags = 0;
+       msg[0].len = 2;
+       msg[0].buf = buf;
+
+       ret = i2c_transfer(client->adapter, &msg, 1);
+       if (ret != 1) {
+               printk("\n [FSA9480] i2c Write Failed (ret=%d) \n", ret);
+               return -1;
+       }
+
+       printk("[FAS9480] i2c Write success\n");
+       return ret;
+}
+
+static int fsa9480_read_reg(struct i2c_client *client, u8 reg, u8 *data)
+{
+       int ret = 0;
+       u8 buf[1];
+       struct i2c_msg msg[2];
+
+       buf[0] = reg;
+
+        msg[0].addr = client->addr;
+        msg[0].flags = 0;
+        msg[0].len = 1;
+        msg[0].buf = buf;
+
+        msg[1].addr = client->addr;
+        msg[1].flags = I2C_M_RD;
+        msg[1].len = 1;
+        msg[1].buf = buf;
+
+       ret = i2c_transfer(client->adapter, msg, 2);
+       if (ret != 2) {
+               printk("\n [FSA9480] i2c Read Failed (ret=%d) \n", ret);
+               return -1;
+       }
+       *data = buf[0];
+
+       printk("[FSA9480] i2c Read success\n");
+       return 0;
+}
+
+void fsa9480_set_switch(const char *buf)
+{
+       struct fsa9480_usbsw *usbsw = chip;
+       struct i2c_client *client = usbsw->client;
+       u8 value = 0;
+       unsigned int path = 0;
+
+       fsa9480_read_reg(client, FSA9480_REG_CTRL, &value);
+
+       if (!strncmp(buf, "VAUDIO", 6)) {
+               path = VAUDIO;
+               value &= ~MANUAL_SWITCH;
+       } else if (!strncmp(buf, "UART", 4)) {
+               path = UART;
+               value &= ~MANUAL_SWITCH;
+       } else if (!strncmp(buf, "AUDIO", 5)) {
+               path = AUDIO;
+               value &= ~MANUAL_SWITCH;
+       } else if (!strncmp(buf, "DHOST", 5)) {
+               path = DHOST;
+               value &= ~MANUAL_SWITCH;
+       } else if (!strncmp(buf, "AUTO", 4)) {
+               path = AUTO;
+               value |= MANUAL_SWITCH;
+       } else {
+               printk(KERN_ERR "Wrong command\n");
+               return;
+       }
+
+       usbsw->mansw = path;
+       fsa9480_write_reg(client, FSA9480_REG_MANSW1, path);
+       fsa9480_write_reg(client, FSA9480_REG_CTRL, value);
+}
+EXPORT_SYMBOL_GPL(fsa9480_set_switch);
+
+ssize_t fsa9480_get_switch(char *buf)
+{
+struct fsa9480_usbsw *usbsw = chip;
+       struct i2c_client *client = usbsw->client;
+       u8 value;
+
+       fsa9480_read_reg(client, FSA9480_REG_MANSW1, &value);
+
+       if (value == VAUDIO)
+               return sprintf(buf, "VAUDIO\n");
+       else if (value == UART)
+               return sprintf(buf, "UART\n");
+       else if (value == AUDIO)
+               return sprintf(buf, "AUDIO\n");
+       else if (value == DHOST)
+               return sprintf(buf, "DHOST\n");
+       else if (value == AUTO)
+               return sprintf(buf, "AUTO\n");
+       else
+               return sprintf(buf, "%x", value);
+}
+EXPORT_SYMBOL_GPL(fsa9480_get_switch);
+
+static ssize_t fsa9480_show_status(struct device *dev,
+                                  struct device_attribute *attr,
+                                  char *buf)
+{
+       struct fsa9480_usbsw *usbsw = dev_get_drvdata(dev);
+       struct i2c_client *client = usbsw->client;
+       u8 devid, ctrl, adc, dev1, dev2, intr;
+       u8 intmask1, intmask2, time1, time2, mansw1;
+
+       fsa9480_read_reg(client, FSA9480_REG_DEVID, &devid);
+       fsa9480_read_reg(client, FSA9480_REG_CTRL, &ctrl);
+       fsa9480_read_reg(client, FSA9480_REG_ADC, &adc);
+       fsa9480_read_reg(client, FSA9480_REG_INT1_MASK, &intmask1);
+       fsa9480_read_reg(client, FSA9480_REG_INT2_MASK, &intmask2);
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T1, &dev1);
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T2, &dev2);
+       fsa9480_read_reg(client, FSA9480_REG_TIMING1, &time1);
+       fsa9480_read_reg(client, FSA9480_REG_TIMING2, &time2);
+       fsa9480_read_reg(client, FSA9480_REG_MANSW1, &mansw1);
+
+       fsa9480_read_reg(client, FSA9480_REG_INT1, &intr);
+       intr &= 0xffff;
+
+       return sprintf(buf, "Device ID(%02x), CTRL(%02x)\n"
+                       "ADC(%02x), DEV_T1(%02x), DEV_T2(%02x)\n"
+                       "INT(%04x), INTMASK(%02x, %02x)\n"
+                       "TIMING(%02x, %02x), MANSW1(%02x)\n",
+                       devid, ctrl, adc, dev1, dev2, intr,
+                       intmask1, intmask2, time1, time2, mansw1);
+}
+
+static ssize_t fsa9480_show_manualsw(struct device *dev,
+               struct device_attribute *attr, char *buf)
+{
+       return fsa9480_get_switch(buf);
+
+}
+
+static ssize_t fsa9480_set_manualsw(struct device *dev,
+                                   struct device_attribute *attr,
+                                   const char *buf, size_t count)
+{
+       fsa9480_set_switch(buf);
+       return count;
+}
+
+static DEVICE_ATTR(status, S_IRUGO, fsa9480_show_status, NULL);
+static DEVICE_ATTR(switch, S_IRUGO | S_IWUGO,
+               fsa9480_show_manualsw, fsa9480_set_manualsw);
+static struct attribute *fsa9480_attributes[] = {
+       &dev_attr_status.attr,
+       &dev_attr_switch.attr,
+       NULL
+};
+
+static const struct attribute_group fsa9480_group = {
+       .attrs = fsa9480_attributes,
+};
+
+static irqreturn_t fsa9480_irq_handler(int irq, void *data)
+{
+       struct fsa9480_usbsw *usbsw = data;
+
+       if (!work_pending(&usbsw->work)) {
+               disable_irq_nosync(irq);
+               schedule_work(&usbsw->work);
+       }
+
+       return IRQ_HANDLED;
+}
+
+static void fsa9480_detect_dev(struct fsa9480_usbsw *usbsw, u8 intr)
+{
+       u8 val1, val2, ctrl;
+       struct fsa9480_platform_data *pdata = usbsw->pdata;
+       struct i2c_client *client = usbsw->client;
+
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T1, &val1);
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T2, &val2);
+       fsa9480_read_reg(client, FSA9480_REG_CTRL, &ctrl);
+
+       dev_info(&client->dev, "intr: 0x%x, dev1: 0x%x, dev2: 0x%x\n",
+                       intr, val1, val2);
+
+       /* Attached */
+       if (intr & (1 << 0)) {
+               if (val1 & FSA9480_DEV_T1_USB_MASK ||
+                       val2 & FSA9480_DEV_T2_USB_MASK) {
+                       if (pdata->usb_cb)
+                               pdata->usb_cb(FSA9480_ATTACHED);
+
+                       if (usbsw->mansw)
+                               fsa9480_write_reg(client,
+                                       FSA9480_REG_MANSW1, usbsw->mansw);
+               }
+
+               if (val1 & FSA9480_DEV_T1_UART_MASK ||
+                       val2 & FSA9480_DEV_T2_UART_MASK) {
+                       if (pdata->uart_cb)
+                               pdata->uart_cb(FSA9480_ATTACHED);
+
+                       if (!(ctrl & (1 << 2)))
+                               fsa9480_write_reg(client,
+                                       FSA9480_REG_MANSW1, UART);
+               }
+
+
+               if (val1 & FSA9480_DEV_T1_CHARGER_MASK) {
+                       if (pdata->charger_cb)
+                               pdata->charger_cb(FSA9480_ATTACHED);
+               }
+
+               if (val2 & FSA9480_DEV_T2_JIG_MASK) {
+                       if (pdata->jig_cb)
+                               pdata->jig_cb(FSA9480_ATTACHED);
+               }
+       } else if (intr & (1 << 1)) {
+               if (usbsw->dev1 & FSA9480_DEV_T1_USB_MASK ||
+                       usbsw->dev2 & FSA9480_DEV_T2_USB_MASK) {
+                       if (pdata->usb_cb)
+                               pdata->usb_cb(FSA9480_DETACHED);
+               }
+
+               if (usbsw->dev1 & FSA9480_DEV_T1_UART_MASK ||
+                       usbsw->dev2 & FSA9480_DEV_T2_UART_MASK) {
+                       if (pdata->uart_cb)
+                               pdata->uart_cb(FSA9480_DETACHED);
+               }
+
+               if (usbsw->dev1 & FSA9480_DEV_T1_CHARGER_MASK) {
+                       if (pdata->charger_cb)
+                               pdata->charger_cb(FSA9480_DETACHED);
+               }
+
+               if (usbsw->dev2 & FSA9480_DEV_T2_JIG_MASK) {
+                                                                                                                                                                 
+                       if (pdata->jig_cb)
+                               pdata->jig_cb(FSA9480_DETACHED);
+               }
+       }
+
+       usbsw->dev1 = val1;
+       usbsw->dev2 = val2;
+
+       chip->dev1 = val1;
+       chip->dev2 = val2;
+
+       ctrl &= ~INT_MASK;
+       fsa9480_write_reg(client, FSA9480_REG_CTRL, ctrl);
+}
+int get_real_usbic_state(void)
+{
+       struct fsa9480_usbsw *usbsw = chip;
+       int ret = -10;
+       int val1 = 0;
+       int val2 = 0;
+
+       val1 = chip->dev1;
+       val2 = chip->dev2;
+
+       if (val1 & FSA9480_DEV_T1_USB_MASK)
+               ret = MICROUSBIC_USB_CABLE;
+       else if (val1 & FSA9480_DEV_T1_CHARGER_MASK)
+               ret = MICROUSBIC_USB_CHARGER;
+       else if (val1 & FSA9480_DEV_T1_UART_MASK)
+               ret = MICROUSBIC_USB_CHARGER;
+
+       if (!ret) {
+               if (val2 & FSA9480_DEV_T2_USB_MASK)
+                       ret = MICROUSBIC_USB_CABLE;
+       }
+
+       return ret;
+}
+
+static void fsa9480_work_cb(struct work_struct *work)
+{
+       u8 intr;
+       struct fsa9480_usbsw *usbsw =
+               container_of(work, struct fsa9480_usbsw, work);
+       struct i2c_client *client = usbsw->client;
+
+       /* clear interrupt */
+       fsa9480_read_reg(client, FSA9480_REG_INT1, &intr);
+       intr &= 0xffff;
+
+       /* device detection */
+       fsa9480_detect_dev(usbsw, intr);
+
+       enable_irq(client->irq);
+}
+static int fsa9480_irq_init(struct fsa9480_usbsw *usbsw)
+{
+       struct fsa9480_platform_data *pdata = usbsw->pdata;
+       struct i2c_client *client = usbsw->client;
+       int ret, irq = -1;
+       u8 intr;
+       u8 mansw1;
+       unsigned int ctrl = CTRL_MASK;
+
+       /* clear interrupt */
+       fsa9480_read_reg(client, FSA9480_REG_INT1, &intr);
+       intr &= 0xffff;
+
+       /* unmask interrupt (attach/detach only) */
+       ret = fsa9480_write_reg(client, FSA9480_REG_INT1_MASK, 0x00);
+       if (ret < 0)
+               return ret;
+
+       ret = fsa9480_write_reg(client, FSA9480_REG_INT2_MASK, 0x00);
+       if (ret < 0)
+               return ret;
+
+       fsa9480_read_reg(client, FSA9480_REG_MANSW1, &mansw1);
+       usbsw->mansw = mansw1;
+
+       ctrl &= ~INT_MASK;              /* Unmask Interrupt */
+
+       if (usbsw->mansw)
+               ctrl &= ~MANUAL_SWITCH; /* Manual Switching Mode */
+
+       fsa9480_write_reg(client, FSA9480_REG_CTRL, ctrl);
+
+       INIT_WORK(&usbsw->work, fsa9480_work_cb);
+
+       ret = request_irq(client->irq, fsa9480_irq_handler,
+                       IRQF_TRIGGER_LOW | IRQF_DISABLED,
+                       "fsa9480 micro USB", usbsw);
+       if (ret) {
+               dev_err(&client->dev,
+                       "fsa9480: Unable to get IRQ %d\n", irq);
+               goto out;
+       }
+
+       return 0;
+out:
+       return ret;
+}
+static int __devinit fsa9480_probe(struct i2c_client *client,
+                        const struct i2c_device_id *id)
+{
+       struct i2c_adapter *adapter = to_i2c_adapter(client->dev.parent);
+       struct fsa9480_usbsw *usbsw;
+       int ret = 0;
+
+       printk("[FSA9480] PROBE ...\n");
+
+       usbsw = kzalloc(sizeof(struct fsa9480_usbsw), GFP_KERNEL);
+       if (!usbsw) {
+               dev_err(&client->dev, "failed to allocate driver data\n");
+               return -ENOMEM;
+       }
+
+       usbsw->client = client;
+       usbsw->pdata = client->dev.platform_data;
+
+       chip = usbsw;
+
+       i2c_set_clientdata(client, usbsw);
+
+       ret = fsa9480_irq_init(usbsw);
+       if (ret)
+               goto fsa9480_probe_fail;
+
+       ret = sysfs_create_group(&client->dev.kobj, &fsa9480_group);
+       if (ret) {
+               dev_err(&client->dev,
+                               "Creating fsa9480 attribute group failed");
+               goto fsa9480_probe_fail2;
+       }
+
+       fsa9480_write_reg(client, FSA9480_REG_TIMING1, 0x6);
+
+       if (chip->pdata->reset_cb)
+               chip->pdata->reset_cb();
+
+       /* device detection */
+       fsa9480_detect_dev(usbsw, 1);
+
+       printk("[FSA9480] PROBE Done.\n");
+       return 0;
+
+fsa9480_probe_fail2:
+       if (client->irq)
+               free_irq(client->irq, NULL);
+fsa9480_probe_fail:
+       i2c_set_clientdata(client, NULL);
+       kfree(usbsw);
+       return ret;
+}
+static int __devexit fsa9480_remove(struct i2c_client *client)
+{
+       struct fsa9480_usbsw *usbsw = i2c_get_clientdata(client);
+       if (client->irq)
+               free_irq(client->irq, NULL);
+       i2c_set_clientdata(client, NULL);
+
+       sysfs_remove_group(&client->dev.kobj, &fsa9480_group);
+       kfree(usbsw);
+       return 0;
+}
+
+#ifdef CONFIG_PM
+static int fsa9480_resume(struct i2c_client *client)
+{
+       struct fsa9480_usbsw *usbsw = i2c_get_clientdata(client);
+       u8 intr;
+       u8 val1, val2;
+
+       /* for hibernation */
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T1, &val1);
+       fsa9480_read_reg(client, FSA9480_REG_DEV_T2, &val2);
+
+       if (val1 || val2)
+               intr = 1 << 0;
+       else
+               intr = 1 << 1;
+
+       /* device detection */
+       fsa9480_detect_dev(usbsw, intr);
+
+       return 0;
+}
+#else
+#define fsa9480_resume         NULL
+#endif
+
+static const struct i2c_device_id fsa9480_id[] = {
+       {"fsa9480", 0},
+       {}
+};
+MODULE_DEVICE_TABLE(i2c, fsa9480_id);
+
+static struct i2c_driver fsa9480_i2c_driver = {
+       .driver = {
+               .name = "fsa9480",
+       },
+       .probe = fsa9480_probe,
+       .remove = __devexit_p(fsa9480_remove),
+       .resume = fsa9480_resume,
+       .id_table = fsa9480_id,
+};
+
+static int __init fsa9480_init(void)
+{
+       return i2c_add_driver(&fsa9480_i2c_driver);
+}
+
+module_init(fsa9480_init);
+
+#ifdef CONFIG_CHARGER_DETECT_BOOT
+charger_module_init(fsa9480_init);
+#endif
+
+static void __exit fsa9480_exit(void)
+{
+       i2c_del_driver(&fsa9480_i2c_driver);
+}
+
+module_exit(fsa9480_exit);
+
+MODULE_AUTHOR("Wonguk.Jeong <wonguk.jeong@samsung.com>");
+MODULE_DESCRIPTION("FSA9480 USB Switch driver");
+MODULE_LICENSE("GPL");
+
+
+
Index: android-2.6.35/include/linux/fsa9480.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ android-2.6.35/include/linux/fsa9480.h	2010-12-22 14:36:11.491988795 +0530
@@ -0,0 +1,43 @@
+/* linux/fsa9480.h
+ *
+ * header for FSA9480 USB switch device.
+ *
+ * Copyright (c) by Wonguk Jeong <wonguk.jeong@samsung.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#ifndef _FSA9480_H_
+#define _FSA9480_H_
+
+#include <linux/types.h>
+
+struct fsa9480_platform_data {
+       int intb_gpio;
+       void (*usb_cb) (u8 attached);
+       void (*uart_cb) (u8 attached);
+       void (*charger_cb) (u8 attached);
+       void (*jig_cb) (u8 attached);
+       void (*reset_cb) (void);
+#define FSA9480_ATTACHED (1)
+#define FSA9480_DETACHED (0)
+};
+
+void fsa9480_set_switch(const char* buf);
+ssize_t fsa9480_get_switch(char* buf);
+
+#endif /* _FSA9480_H_ */
+
Index: android-2.6.35/arch/arm/configs/android_omap4tab_rev04_defconfig
===================================================================
--- android-2.6.35.orig/arch/arm/configs/android_omap4tab_rev04_defconfig	2010-12-22 14:36:10.653238531 +0530
+++ android-2.6.35/arch/arm/configs/android_omap4tab_rev04_defconfig	2010-12-22 14:36:34.772612433 +0530
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.35
-# Tue Nov 30 18:23:50 2010
+# Fri Dec  3 12:55:07 2010
 #
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
@@ -1564,7 +1564,7 @@
 CONFIG_USB_DEVICE_CLASS=y
 # CONFIG_USB_DYNAMIC_MINORS is not set
 CONFIG_USB_SUSPEND=y
-# CONFIG_USB_OTG is not set
+CONFIG_USB_OTG=y
 # CONFIG_USB_OTG_WHITELIST is not set
 # CONFIG_USB_OTG_BLACKLIST_HUB is not set
 # CONFIG_USB_MON is not set
@@ -1595,9 +1595,10 @@
 # OMAP 44xx high speed USB support
 #
 # CONFIG_USB_MUSB_HOST is not set
-CONFIG_USB_MUSB_PERIPHERAL=y
-# CONFIG_USB_MUSB_OTG is not set
+# CONFIG_USB_MUSB_PERIPHERAL is not set
+CONFIG_USB_MUSB_OTG=y
 CONFIG_USB_GADGET_MUSB_HDRC=y
+CONFIG_USB_MUSB_HDRC_HCD=y
 # CONFIG_MUSB_PIO_ONLY is not set
 CONFIG_USB_INVENTRA_DMA=y
 # CONFIG_USB_TI_CPPI_DMA is not set
@@ -1709,7 +1710,8 @@
 # CONFIG_USB_ULPI is not set
 # CONFIG_TWL4030_USB is not set
 CONFIG_TWL6030_USB=y
-CONFIG_NOP_USB_XCEIV=y
+# CONFIG_NOP_USB_XCEIV is not set
+CONFIG_FSA9480_MICROUSB=y
 CONFIG_MMC=y
 # CONFIG_MMC_DEBUG is not set
 CONFIG_MMC_UNSAFE_RESUME=y
@@ -1799,7 +1801,7 @@
 # CONFIG_RTC_DRV_PCF8583 is not set
 # CONFIG_RTC_DRV_M41T80 is not set
 # CONFIG_RTC_DRV_BQ32K is not set
-# CONFIG_RTC_DRV_TWL4030 is not set
+CONFIG_RTC_DRV_TWL4030=y
 # CONFIG_RTC_DRV_S35390A is not set
 # CONFIG_RTC_DRV_FM3130 is not set
 # CONFIG_RTC_DRV_RX8581 is not set
Index: android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c
===================================================================
--- android-2.6.35.orig/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:11.193239514 +0530
+++ android-2.6.35/arch/arm/mach-omap2/board-omap4tab10-1.c	2010-12-22 14:36:36.422612786 +0530
@@ -58,6 +58,7 @@
 #include "smartreflex-class3.h"
 #include <linux/haptic.h>
 #include <plat/opp_twl_tps.h>
+#include <linux/fsa9480.h>
 
 #include <linux/atmel_mxt1386.h> /* For mXT1386 Touch */
 #include "mux.h"
@@ -116,6 +117,18 @@
 #endif
 #define OMAP4430_GPIO_USBSW_NINT			44
 
+
+
+/* For uUSB Switch */
+#define OMAP4430_GPIO_JACK_NINT                140
+
+static void omap4_usb_cb(u8 attached);
+static void omap4_charger_cb(u8 attached);
+static void omap4_jig_cb(u8 attached);
+static void omap4_fsa9480_reset_cb(void);
+
+
+
 #if (CONFIG_SAMSUNG_OMAP4_TAB_REV <= 2)
 static unsigned backlight_gpio;
 static unsigned mlcd1_enable_gpio;
@@ -169,6 +182,41 @@
 	0,
 };
 
+/* For uUSB Switch */
+static struct fsa9480_platform_data omap4_fsa9480_pdata = {
+       .intb_gpio      = OMAP4430_GPIO_JACK_NINT,
+       .usb_cb         = omap4_usb_cb,
+       .uart_cb        = NULL,
+       .charger_cb     = omap4_charger_cb,
+       .jig_cb         = omap4_jig_cb,
+       .reset_cb       = omap4_fsa9480_reset_cb,
+};
+
+static void omap4_usb_cb(u8 attached)
+{
+       /* TODO: need to implement this once uUSB charging available in HW */
+       printk("\nBoard file [FSA9480]: USB Callback \n");
+}
+
+static void omap4_charger_cb(u8 attached)
+{
+       /* TODO: need to implement this once uUSB charging available in HW */
+       printk("\nBoard file [FSA9480]: Charger Callback \n");
+}
+
+static void omap4_jig_cb(u8 attached)
+{
+       /* TODO: need to implement this once uUSB charging available in HW */
+       printk("\nBoard file [FSA9480]: Jig Callback \n");
+}
+
+static void omap4_fsa9480_reset_cb(void)
+{
+       /* TODO: need to implement this once uUSB charging available in HW */
+       printk("\nBoard file [FSA9480]: Reset Callback \n");
+}
+
+
 static struct matrix_keymap_data omap4tab_keymap_data = {
 	.keymap			= omap4tab_keymap,
 	.keymap_size		= ARRAY_SIZE(omap4tab_keymap),
@@ -1023,6 +1071,12 @@
 	{
 		I2C_BOARD_INFO("secFuelgaugeDev", 0x34),
 	},
+       {
+               I2C_BOARD_INFO("fsa9480", (0x4A >> 1)),
+               .platform_data = &omap4_fsa9480_pdata,
+               .irq = OMAP_GPIO_IRQ(OMAP4430_GPIO_JACK_NINT),
+       },
+
 };
 
 static struct i2c_board_info __initdata omap4tab_i2c_3_boardinfo[] = {
