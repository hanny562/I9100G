From: Madhusudhan Chikkature <madhu.cr@ti.com>
Date: Thu, 28 Apr 2011 16:32:06 +0000 (-0500)
Subject: The HSMMC output clock handling to support DPLL cascading
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=1ad972727e58652dbdf96dae9b483fe7eaa651ab

The HSMMC output clock handling to support DPLL cascading

The HSMMC1 output clock will change from 96MHz to 49MHz upon entry
to DPLL cascading mode. This patch modifies the MMC1 divisor to
handle the change in clock frequency.

Change-Id: I744139938e4e64d659fd8a5e513045ec6bb65bb2
Signed-off-by: Madhusudhan Chikkature <madhu.cr@ti.com>
---

Index: kernel/drivers/mmc/host/omap_hsmmc.c
===================================================================
--- kernel.orig/drivers/mmc/host/omap_hsmmc.c	2011-05-21 00:24:37.537097259 +0900
+++ kernel/drivers/mmc/host/omap_hsmmc.c	2011-05-21 00:42:11.830847685 +0900
@@ -48,6 +48,9 @@
 
 #define DTO_ENABLE		(1 << 20)
 
+#include <linux/notifier.h>
+#include <plat/clock.h>
+
 #define VS18			(1 << 26)
 #define VS30			(1 << 25)
 #define SDVS18			(0x5 << 9)
@@ -136,6 +139,7 @@
 
 #define MMC_TIMEOUT_MS		20
 #define OMAP_MMC_MASTER_CLOCK	96000000
+#define OMAP_MMC_DPLL_CLOCK	49152000
 #define OMAP_MMC_CLOCK_24MHZ	24000000
 #define DRIVER_NAME		"mmci-omap-hs"
 
@@ -177,6 +181,8 @@
 	struct	clk		*fclk;
 	struct	clk		*iclk;
 	struct	clk		*dbclk;
+	struct notifier_block	nb;
+
 	/*
 	 * vcc == configured supply
 	 * vcc_aux == optional
@@ -217,6 +223,8 @@
 	int			use_reg;
 	int			req_in_progress;
 	int			tput_constraint;
+	int			dpll_entry;
+	int			dpll_exit;
 
 	struct	omap_mmc_platform_data	*pdata;
 };
@@ -2039,8 +2047,50 @@
 /* Handler for [DISABLED -> ENABLED] transition */
 static int omap_hsmmc_disabled_to_enabled(struct omap_hsmmc_host *host)
 {
+	int regval, timeout, dsor;
+
 	pm_runtime_get_sync(host->dev);
 
+	if (host->dpll_entry == 1) {
+		dsor = 49152000 / host->mmc->ios.clock;
+		omap_hsmmc_stop_clock(host);
+		regval = OMAP_HSMMC_READ(host, SYSCTL);
+		regval = regval & ~(CLKD_MASK);
+		regval = regval | (dsor << 6) | (DTO << 16);
+		OMAP_HSMMC_WRITE(host, SYSCTL, regval);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+			OMAP_HSMMC_READ(host, SYSCTL) | ICE);
+		/* Wait till the ICS bit is set */
+		timeout = jiffies + msecs_to_jiffies(MMC_TIMEOUT_MS);
+		while ((OMAP_HSMMC_READ(host, SYSCTL) & ICS) != ICS
+			&& time_before(jiffies, timeout))
+			msleep(1);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+			OMAP_HSMMC_READ(host, SYSCTL) | CEN);
+		host->dpll_entry = 0;
+	}
+
+	if (host->dpll_exit == 1) {
+		dsor = 96000000 / host->mmc->ios.clock;
+		omap_hsmmc_stop_clock(host);
+		regval = OMAP_HSMMC_READ(host, SYSCTL);
+		regval = regval & ~(CLKD_MASK);
+		regval = regval | (dsor << 6) | (DTO << 16);
+		OMAP_HSMMC_WRITE(host, SYSCTL, regval);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | ICE);
+
+		/* Wait till the ICS bit is set */
+		timeout = jiffies + msecs_to_jiffies(MMC_TIMEOUT_MS);
+		while ((OMAP_HSMMC_READ(host, SYSCTL) & ICS) != ICS
+			&& time_before(jiffies, timeout))
+			msleep(1);
+
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | CEN);
+		host->dpll_exit = 0;
+	}
+
 	host->dpm_state = ENABLED;
 
 	dev_dbg(mmc_dev(host->mmc), "DISABLED -> ENABLED\n");
@@ -2051,11 +2101,52 @@
 /* Handler for [SLEEP -> ENABLED] transition */
 static int omap_hsmmc_sleep_to_enabled(struct omap_hsmmc_host *host)
 {
+	int regval, timeout, dsor;
+
 	if (!mmc_try_claim_host(host->mmc))
 		return 0;
 
 	pm_runtime_get_sync(host->dev);
 
+	if (host->dpll_entry == 1) {
+		dsor = 49152000 / host->mmc->ios.clock;
+		omap_hsmmc_stop_clock(host);
+		regval = OMAP_HSMMC_READ(host, SYSCTL);
+		regval = regval & ~(CLKD_MASK);
+		regval = regval | (dsor << 6) | (DTO << 16);
+		OMAP_HSMMC_WRITE(host, SYSCTL, regval);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | ICE);
+		/* Wait till the ICS bit is set */
+		timeout = jiffies + msecs_to_jiffies(MMC_TIMEOUT_MS);
+		while ((OMAP_HSMMC_READ(host, SYSCTL) & ICS) != ICS
+			&& time_before(jiffies, timeout))
+			msleep(1);
+
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | CEN);
+		host->dpll_entry = 0;
+	}
+
+	if (host->dpll_exit == 1) {
+		dsor = 96000000 / host->mmc->ios.clock;
+		omap_hsmmc_stop_clock(host);
+		regval = OMAP_HSMMC_READ(host, SYSCTL);
+		regval = regval & ~(CLKD_MASK);
+		regval = regval | (dsor << 6) | (DTO << 16);
+		OMAP_HSMMC_WRITE(host, SYSCTL, regval);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | ICE);
+		/* Wait till the ICS bit is set */
+		timeout = jiffies + msecs_to_jiffies(MMC_TIMEOUT_MS);
+		while ((OMAP_HSMMC_READ(host, SYSCTL) & ICS) != ICS
+			&& time_before(jiffies, timeout))
+			msleep(1);
+		OMAP_HSMMC_WRITE(host, SYSCTL,
+		OMAP_HSMMC_READ(host, SYSCTL) | CEN);
+		host->dpll_exit = 0;
+	}
+
 	if (mmc_slot(host).set_sleep)
 		mmc_slot(host).set_sleep(host->dev, host->slot_id, 0,
 			 host->vdd, host->dpm_state == CARDSLEEP);
@@ -2332,6 +2423,27 @@
 
 EXPORT_SYMBOL(omap_hsmmc_force_presence_change);
 
+static int hsmmc_dpll_notifier(struct notifier_block *nb,
+			unsigned long val, void *data) {
+
+	struct omap_hsmmc_host *host =
+		container_of(nb, struct omap_hsmmc_host, nb);
+	struct clk_notifier_data *cnd = (struct clk_notifier_data *)data;
+	unsigned long i = 0;
+
+	if (val != CLK_PRE_RATE_CHANGE) {
+		if (cnd->old_rate == 49152000) {
+			host->dpll_entry = 1;
+			host->master_clock = OMAP_MMC_DPLL_CLOCK;
+		} else if (cnd->old_rate == 96000000) {
+			host->dpll_exit = 1;
+			host->master_clock = OMAP_MMC_MASTER_CLOCK;
+		}
+	}
+
+	return 0;
+}
+
 static int __init omap_hsmmc_probe(struct platform_device *pdev)
 {
 	struct omap_mmc_platform_data *pdata = pdev->dev.platform_data;
@@ -2387,6 +2499,11 @@
 	host->power_mode = MMC_POWER_OFF;
 	host->tput_constraint = 0;
 
+	if (cpu_is_omap44xx() && host->id == 0) {
+		host->nb.notifier_call = hsmmc_dpll_notifier;
+		host->nb.next = NULL;
+	}
+
 	host->master_clock = OMAP_MMC_MASTER_CLOCK;
 	if (mmc_slot(host).features & HSMMC_HAS_48MHZ_MASTER_CLK)
 		host->master_clock = OMAP_MMC_MASTER_CLOCK / 2;
@@ -2437,6 +2554,10 @@
 		goto err1;
 	}
 
+	/* Register handler for DPLL cascading */
+	if (cpu_is_omap44xx() && host->id == 0)
+		clk_notifier_register(host->fclk, &host->nb);
+
 	omap_hsmmc_context_save(host);
 
 	mmc->caps |= MMC_CAP_DISABLE;
