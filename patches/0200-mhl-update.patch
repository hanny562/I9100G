Index: kernel/arch/arm/mach-omap2/board-t1.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/board-t1.c	2011-04-06 23:30:07.000000000 +0900
+++ kernel/arch/arm/mach-omap2/board-t1.c	2011-04-06 23:37:46.000000000 +0900
@@ -548,6 +548,14 @@
 
 		 printk("//=== OMAP_GPIO_MHL_SEL = %d\n", gpio_get_value(OMAP_GPIO_MHL_SEL));
   		//gpio_direction_output(OMAP_GPIO_MHL_SEL,1);
+	//Clearing the Connect and Disconnect Interrupts of HDMI_WP_IRQ_ENABLE_CLR
+	u32 temp = omap_readl(0x48046030);
+	printk(KERN_ERR"WP_IRQ_ENABLE_CLR..currently reads as:%x",temp);
+	temp = temp | (1<<25)|(1<<26);
+	omap_writel(temp,0x48046030);
+	printk(KERN_ERR"WP_IRQ_ENABLE_CLR..changed to :%x",temp);
+	omap_writel(0x000F0118,0x4A100098);
+	// Look at RSEN interrupt
        	MHL_On(attached);
 	 } else {
 	 	gpio_set_value(OMAP_GPIO_MHL_SEL,0);
Index: kernel/arch/arm/mach-omap2/mux_t1_rev_r00.c
===================================================================
--- kernel.orig/arch/arm/mach-omap2/mux_t1_rev_r00.c	2011-04-06 15:04:14.000000000 +0900
+++ kernel/arch/arm/mach-omap2/mux_t1_rev_r00.c	2011-04-06 23:37:46.000000000 +0900
@@ -165,11 +165,11 @@
 	/* [-----] hdmi_hpd - gpio_63 - HDMI_HPD */
 	OMAP4_MUX(HDMI_HPD, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
 	/* [-----] hdmi_cec - gpio_64 - MHL_WAKE_UP */
-	OMAP4_MUX(HDMI_CEC, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
+	OMAP4_MUX(HDMI_CEC, OMAP_MUX_MODE7 | OMAP_PULL_ENA),
 	/* [-----] hdmi_ddc_scl - gpio_65 - DDC_SCL_3.3V */
-	OMAP4_MUX(HDMI_DDC_SCL, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP | OMAP_PIN_OFF_INPUT_PULLDOWN),
+	OMAP4_MUX(HDMI_DDC_SCL, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
 	/* [-----] hdmi_ddc_sda - gpio_66 - DDC_SDA_3.3V */
-	OMAP4_MUX(HDMI_DDC_SDA, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP | OMAP_PIN_OFF_INPUT_PULLDOWN),
+	OMAP4_MUX(HDMI_DDC_SDA, OMAP_MUX_MODE0 | OMAP_PIN_INPUT),
 
 #if 0
 	/* [-----] csi21_dx0 - gpio_67 - 8M_CLK_P */
Index: kernel/arch/arm/plat-omap/hdmi_lib.c
===================================================================
--- kernel.orig/arch/arm/plat-omap/hdmi_lib.c	2011-04-06 23:37:44.000000000 +0900
+++ kernel/arch/arm/plat-omap/hdmi_lib.c	2011-04-06 23:37:46.000000000 +0900
@@ -1766,6 +1766,17 @@
 		hdmi_read_reg(HDMI_CORE_SYS, HDMI_CORE_SYS__SYS_STAT));
 	DBG("-------------DEBUG-------------------");
 
+	printk("-------------DEBUG-------------------\n");
+        printk("%x hdmi_wp_irqstatus\n", \
+                hdmi_read_reg(HDMI_WP, HDMI_WP_IRQSTATUS));
+        printk("%x hdmi_core_intr_state\n", \
+                hdmi_read_reg(HDMI_CORE_SYS, HDMI_CORE_SYS__INTR_STATE));
+        printk("%x hdmi_core_irqstate\n", \
+                hdmi_read_reg(HDMI_CORE_SYS, HDMI_CORE_SYS__INTR1));
+        printk("%x hdmi_core_sys_sys_stat\n", \
+                hdmi_read_reg(HDMI_CORE_SYS, HDMI_CORE_SYS__SYS_STAT));
+        printk("-------------DEBUG-------------------\n");
+
 	val = hdmi_read_reg(HDMI_WP, HDMI_WP_IRQSTATUS);
 	if (val & HDMI_WP_IRQSTATUS_CORE) {
 		core_state = hdmi_read_reg(HDMI_CORE_SYS, HDMI_CORE_SYS__INTR_STATE);
@@ -1817,6 +1828,7 @@
 	/* We can get connect / disconnect simultaneously due to glitch	*/
 	if (val & HDMI_WP_IRQSTATUS_PHYDISCONNECT) {
 		DBG("Disconnect");
+		printk("%s Disconnect\n",__func__);
 		dirty = 0;
 		first_hpd = 0;
 		*r |= HDMI_DISCONNECT;
@@ -1872,18 +1884,18 @@
 	*/
 	IrqHdmiVectorEnable.core = 1;
 	if(state){
-		//printk("Connected ...");
+		printk("%s Connected\n",__func__);
 		IrqHdmiVectorEnable.phyDisconnect = 1;
 		IrqHdmiVectorEnable.phyConnect = 0;
 		hdmi_w1_irq_wakeup_enable(&IrqHdmiVectorEnable);
 	}
 	else {
-		//printk("DisConnected ...");
+		printk("%s DisConnected\n",__func__);
 		IrqHdmiVectorEnable.phyDisconnect = 0;
 		IrqHdmiVectorEnable.phyConnect = 1;
 		hdmi_w1_irq_wakeup_enable(&IrqHdmiVectorEnable);
 	}
-
+	printk("%s state returned is: %d\n",__func__,state);
 	return state;
 }
 
Index: kernel/drivers/media/video/omap/mhl_v1/sii9234_driver.c
===================================================================
--- kernel.orig/drivers/media/video/omap/mhl_v1/sii9234_driver.c	2011-04-06 15:04:28.000000000 +0900
+++ kernel/drivers/media/video/omap/mhl_v1/sii9234_driver.c	2011-04-06 23:37:46.000000000 +0900
@@ -725,7 +725,7 @@
 {
 	byte		reg71 = I2C_ReadByte(SA_TX_Page0_Primary, 0x71);
 	byte		rsen  = I2C_ReadByte(SA_TX_Page0_Primary, 0x09) & BIT_2;
-
+	omap_writel(0x000F0118,0x4A100098);
 	// Look at RSEN interrupt
 	if(reg71 & BIT_5)
 	{
@@ -830,6 +830,13 @@
 			SiiMhlTxNotifyDsHpdChange( cbusInt );
 			TX_DEBUG_PRINT(("Drv: Downstream HPD changed to: %02X\n", (int) cbusInt));
 
+			//Setting  the Connect and Disconnect Interrupts of HDMI_WP_IRQ_ENABLE_SET
+        		u32 temp = omap_readl(0x4804602C);
+        		printk(KERN_ERR"WP_IRQ_ENABLE_SET..currently reads as:%x",temp);
+        		temp = temp | (1<<25)|(1<<26);
+        		omap_writel(temp,0x4804602C);
+        		printk(KERN_ERR"WP_IRQ_ENABLE_SET..changed to :%x",temp);
+
 			// Remember
 			dsHpdStatus = (BIT_6 & cbusInt);
 		}
@@ -2178,7 +2185,7 @@
 	{
 		// force upstream source to read the EDID again.
 		// Most likely by appropriate togggling of HDMI HPD
-		SiiMhlTxDrvNotifyEdidChange ( );
+		//SiiMhlTxDrvNotifyEdidChange ( );
 	}
 }
 ///////////////////////////////////////////////////////////////////////////////
Index: kernel/drivers/video/omap2/dss/hdmi.c
===================================================================
--- kernel.orig/drivers/video/omap2/dss/hdmi.c	2011-04-06 23:37:44.000000000 +0900
+++ kernel/drivers/video/omap2/dss/hdmi.c	2011-04-07 00:07:01.000000000 +0900
@@ -247,7 +247,7 @@
 	{0, 1}, {0, 1}, {1, 1}, {1, 1},
 	{1, 1}, {1, 1}
 };
-
+#if 1
 /* Map CEA code to the corresponding timing values (10 entries/line) */
 static int code_cea[39] = {
 	-1,  0,  3,  3,  2,  8,  5,  5, -1, -1,
@@ -255,6 +255,18 @@
 	7,   6,  6, -1, -1, -1, -1, -1, -1, 11,
 	11, 12, 14, -1, -1, 13, 13,  4,  4
 };
+#else
+
+/* Map CEA code to the corresponding timing values (10 entries/line) */
+static int code_cea[39] = {
+        -1,  0,  3,  3,  2,  8,  5,  5, -1, -1,
+        -1, -1, -1, -1, -1, -1,  -1, 10, 10,  1,
+        7,   6,  6, -1, -1, -1, -1, -1, -1, 11,
+        11, -1, -1, -1, -1, 13, 13,  4,  4
+};
+
+
+#endif
 
 /* Map CEA code to the corresponding 3D timing values */
 static int s3d_code_cea[39] = {
@@ -532,11 +544,11 @@
 
 	if (onoff != user_hpd_state) {
 		hdmi_notify_hpd(onoff);
-		DSSINFO("hot plug event %d", onoff);
+		DSSINFO("hot plug event %d\n", onoff);
 		ret = kobject_uevent(&dssdev->dev.kobj,
 					onoff ? KOBJ_ADD : KOBJ_REMOVE);
 		if (ret)
-			DSSWARN("error sending hot plug event %d (%d)",
+			DSSWARN("error sending hot plug event %d (%d)\n",
 								onoff, ret);
 		/*
 		 * TRICKY: we update status here as kobject_uevent seems to
@@ -732,6 +744,7 @@
 
 static int hdmi_pll_reset(void)
 {
+	printk("%s called\n",__func__);
 	int t = 0;
 
 	/* SYSREEST  controled by power FSM*/
@@ -853,6 +866,7 @@
 		code = code_cea[hdmi.code];
 
 	if (code == -1 || all_timings_direct[code].x_res >= 2048) {
+		printk(KERN_ERR"------EDID Getting Defaulted-------code=16 , mode=1\n");
 		code = 9;
 		hdmi.code = 16;
 		hdmi.mode = 1;
@@ -954,7 +968,7 @@
 {
 	int r = 0, hdmi_irq;
 	struct resource *hdmi_mem;
-	printk(KERN_INFO "Enter hdmi_init()\n");
+	printk(KERN_ERR "Enter hdmi_init()\n");
 
 	hdmi_s3d.structure = HDMI_S3D_FRAME_PACKING;
 	hdmi_s3d.subsamp = false;
@@ -1030,6 +1044,7 @@
 
 static int hdmi_power_on(struct omap_dss_device *dssdev)
 {
+	printk("---%s----\n",__func__);
 	int r = 0;
 	int code = 0;
 	int dirty;
@@ -1040,6 +1055,7 @@
 
 	hdmi_power = HDMI_POWER_FULL;
 	code = get_timings_index();
+	printk("%s code=%d\n",__func__,code);
 	dssdev->panel.timings = all_timings_direct[code];
 
 	hdmi_enable_clocks(1);
@@ -1047,11 +1063,14 @@
 	p = &dssdev->panel.timings;
 
 	if (!custom_set) {
+		printk("[%s]cusom_set is false\n",__func__);
 		code = get_timings_index();
-
+		printk("[%s]code =%d\n",__func__,code);
 		DSSDBG("No edid set thus will be calling hdmi_read_edid");
+		printk("No edid set thus will be calling hdmi_read_edid\n");
 		r = hdmi_read_edid(p);
 		if (r) {
+			printk("%s error in reading hdmi_read_edid\n",__func__);
 			r = -EIO;
 			goto err;
 		}
@@ -1072,13 +1091,15 @@
 
 	if (hdmi.s3d_enabled && (hdmi_s3d.structure == HDMI_S3D_FRAME_PACKING))
 		code = get_s3d_timings_index();
-	else
+	else{
 		code = get_timings_index();
+		printk("[%s]code =%d\n",__func__,code);
+	}
 	update_cfg_pol(&hdmi.cfg, code);
 
 	dssdev->panel.timings = all_timings_direct[code];
 
-	DSSINFO("%s:%d res=%dx%d ", hdmi.mode ? "CEA" : "VESA", hdmi.code,
+	DSSINFO("[%s] %s:%d res=%dx%d\n",__func__, hdmi.mode ? "CEA" : "VESA", hdmi.code,
 		dssdev->panel.timings.x_res, dssdev->panel.timings.y_res);
 
 	clkin = 3840; /* 38.4 mHz */
@@ -1086,7 +1107,9 @@
 
 	switch (hdmi.deep_color) {
 	case 1:
+		printk("switch(hdmi.deep_color) case 1:\n");
 		temp = (p->pixel_clock * 125) / 100 ;
+		printk("temp = %d\n",temp);
 		if (!custom_set) {
 			if (vsdb_format->bit_30) {
 				if (max_tmds != 0 && max_tmds >= temp)
@@ -1099,8 +1122,10 @@
 			phy = temp;
 		}
 		hdmi.cfg.deep_color = 1;
+		printk("phy=%d\n",phy);
 		break;
 	case 2:
+		printk("switch(hdmi.deep_color) case 2:\n");
 		if (p->pixel_clock == 148500) {
 			printk(KERN_ERR"36 bit deep color not supported");
 			goto err;
@@ -1118,11 +1143,14 @@
 		} else {
 			phy = temp;
 		}
+		printk("phy=%d\n",phy);
 		hdmi.cfg.deep_color = 2;
 		break;
 	case 0:
 	default:
+		printk("switch(hdmi.deep_color) case 0/default:\n");
 		phy = p->pixel_clock;
+		printk("phy=%d\n",phy);
 		hdmi.cfg.deep_color = 0;
 		break;
 	}
@@ -1151,7 +1179,7 @@
 		tmds_freq = 0x1;
 	else
 		tmds_freq = 0x2;
-
+	printk("[%s] calling hdmi_phy_init with tmds_freq=%d\n",__func__,tmds_freq);
 	r = hdmi_phy_init(HDMI_WP, HDMI_PHY, tmds_freq);
 	if (r) {
 		DSSERR("Failed to start PHY\n");
@@ -1218,7 +1246,7 @@
 		(*hdmi.hdmi_start_frame_cb)();
 
 	kfree(vsdb_format);
-
+	printk("----Exit of %s-----\n",__func__);
 	return 0;
 err:
 	kfree(vsdb_format);
@@ -1278,6 +1306,7 @@
 
 static int hdmi_reconfigure(struct omap_dss_device *dssdev)
 {
+	printk("---------Enter %s------\n",__func__);
 	/* don't reconfigure in power off state */
 	if (hdmi_power == HDMI_POWER_OFF)
 		return -EINVAL;
@@ -1289,6 +1318,7 @@
 		hdmi_power = HDMI_POWER_MIN;
 
 	return set_video_power(dssdev, HDMI_POWER_FULL);
+	printk("-------Exit %s-------\n",__func__);
 }
 
 static void hdmi_notify_queue(struct work_struct *work)
@@ -1333,6 +1363,7 @@
 
 static void hdmi_work_queue(struct work_struct *ws)
 {
+	printk("------------------->Start HDMI_WORK_QUEUE<-----------------\n");
 	struct hdmi_work_struct *work =
 			container_of(ws, struct hdmi_work_struct, work);
 	struct omap_dss_device *dssdev = get_hdmi_device();
@@ -1355,7 +1386,7 @@
 		"hdmi_power = %d", r, dssdev->state, hdmi_power);
 	if (r & (HDMI_CONNECT | HDMI_DISCONNECT))
 		action = (hdmi_is_connected()) ? HDMI_CONNECT : HDMI_DISCONNECT;
-
+	printk("action ::: %d\n",action);
 	if (action & HDMI_DISCONNECT) {
 		/* cancel auto-notify */
 		mutex_unlock(&hdmi.lock_aux);
@@ -1511,6 +1542,7 @@
 	mutex_unlock(&hdmi.lock_aux);
 	mutex_unlock(&hdmi.lock);
 	kfree(work);
+	printk("------------------->Exit HDMI_WORK_QUEUE<-----------------\n");
 }
 
 static inline void hdmi_handle_irq_work(int r)
@@ -1536,22 +1568,28 @@
 
 	/* process interrupt in critical section to handle conflicts */
 	spin_lock_irqsave(&irqstatus_lock, flags);
-
+	printk("=============Start IRQ Handler================= %s\n",__func__);
 	HDMI_W1_HPD_handler(&r);
 	DSSDBG("Received IRQ r=%08x\n", r);
 
+	printk("Received IRQ r=%08x\n", r);
+
 	if (((r & HDMI_CONNECT) || (r & HDMI_FIRST_HPD)) &&
 						video_power == HDMI_POWER_MIN)
+	{
+		printk("r=%d , HDMI_CONNECT=%d HDMI_FIRST_HPD=%d,video_power=%d, HDMI_POWER_MIN=%d\n",r,HDMI_CONNECT,HDMI_FIRST_HPD,video_power,HDMI_POWER_MIN);
 		hdmi_enable_clocks(1);
+	}
 	if (r & HDMI_CONNECT)
 		hdmi_connected = true;
 	if (r & HDMI_DISCONNECT)
 		hdmi_connected = false;
 
 	spin_unlock_irqrestore(&irqstatus_lock, flags);
-
+	printk("work-queue receives r |in_reset:%d\n",r | in_reset);	
 	hdmi_handle_irq_work(r | in_reset);
 
+	printk("==============Exit IRQ Handler==================== %s\n",__func__);
 	return IRQ_HANDLED;
 }
 
@@ -1609,12 +1647,13 @@
 		DSSERR("failed to start device\n");
 		goto err;
 	}
-
+#if 0
 	/* PAD0_HDMI_HPD_PAD1_HDMI_CEC */
 	omap_writel(0x01100110, 0x4A100098);
 	/* PAD0_HDMI_DDC_SCL_PAD1_HDMI_DDC_SDA */
 	omap_writel(0x01100110 , 0x4A10009C);
 	/* CONTROL_HDMI_TX_PHY */
+#endif
 	omap_writel(0x10000000, 0x4A100610);
 
 	if (dssdev->platform_enable)
@@ -1671,7 +1710,7 @@
 	/* turn on HDMI */
 	if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE && power_need)
 		r = hdmi_start_display(dssdev);
-
+	printk("hdmi_start_display called from hdmi_set_power, returns r=%d\n",r);
 	video_power = v_power;
 	v_suspended = suspend;
 	audio_on = _audio_on;
@@ -1679,8 +1718,10 @@
 	if (hdmi_power != power_need && r == 0) {
 		if (power_need == HDMI_POWER_FULL) {
 			r = hdmi_power_on(dssdev);
+			printk("power_need = %d called hdmi_power_on, returns r=%d\n",HDMI_POWER_FULL,r);
 		} else if (power_need == HDMI_POWER_MIN) {
 			r = hdmi_min_enable();
+			 printk("power_need = %d called hdmi_min_enable, returns r=%d\n",HDMI_POWER_MIN,r);
 		} else {
 			omap_dss_stop_device(dssdev);
 			hdmi_power_off(dssdev);
@@ -1719,6 +1760,7 @@
 static int set_video_power(struct omap_dss_device *dssdev,
 						enum hdmi_power_state v_power)
 {
+	printk("%s called with hdmi_power_state = %d\n",__func__,v_power);
 	return hdmi_set_power(dssdev, v_power, v_suspended, audio_on);
 }
 
@@ -1750,6 +1792,7 @@
 {
 	int r;
 	DSSDBG("ENTER hdmi_enable_hpd()\n");
+	printk("ENTER hdmi_enable_hpd()\n");
 
 	/* use at least min power, keep suspended state if set */
 	mutex_lock(&hdmi.lock);
@@ -1766,6 +1809,7 @@
 	int ret;
 	bool notify;
 	DSSDBG("ENTER hdmi_enable_video()\n");
+	printk("ENTER hdmi_enable_video()\n");
 
 	mutex_lock(&hdmi.lock);
 	mutex_lock(&hdmi.lock_aux);
@@ -1783,6 +1827,7 @@
 static void hdmi_disable_video(struct omap_dss_device *dssdev)
 {
 	DSSDBG("Enter hdmi_disable_video()\n");
+	printk("Enter hdmi_disable_video()\n");
 
 	mutex_lock(&hdmi.lock);
 	in_reset = HDMI_IN_RESET;
@@ -1812,6 +1857,7 @@
 {
 	int r = 0;
 
+	printk("hdmi_reset\n");
 	if (phase & OMAP_DSS_RESET_OFF) {
 		mutex_lock(&hdmi.lock);
 		mutex_lock(&hdmi.lock_aux);
@@ -1844,6 +1890,7 @@
 	int ret = 0;
 
 	DSSDBG("hdmi_suspend_video\n");
+	printk("hdmi_suspend_video\n");
 
 	mutex_lock(&hdmi.lock);
 	mutex_lock(&hdmi.lock_aux);
@@ -1867,6 +1914,7 @@
 	int ret = 0;
 
 	DSSDBG("hdmi_resume_video\n");
+	printk("hdmi_resume_video\n");
 
 	mutex_lock(&hdmi.lock);
 	mutex_lock(&hdmi.lock_aux);
@@ -2255,7 +2303,7 @@
 static int hdmi_read_edid(struct omap_video_timings *dp)
 {
 	int r = 0, ret = 0, code = 0;
-
+	printk("--Start [%s]--\n",__func__);
 	memset(edid, 0, HDMI_EDID_MAX_LENGTH);
 	if (!edid_set)
 		ret = HDMI_CORE_DDC_READEDID(HDMI_CORE_SYS, edid,
@@ -2269,13 +2317,16 @@
 				hdmi.s3d_enabled = hdmi_s3d_supported(edid);
 			}
 			/* search for timings of default resolution */
-			if (get_edid_timing_data((struct HDMI_EDID *) edid))
+			if (get_edid_timing_data((struct HDMI_EDID *) edid)){
 				edid_set = true;
+				printk("EDID_set is true here\n");
+				}
 		}
 	}
 
 	if (!edid_set) {
 		DSSDBG("fallback to VGA\n");
+		printk("fallback to VGA\n");
 		hdmi.code = 4; /*setting default value of 640 480 VGA*/
 		hdmi.mode = 0;
 	}
@@ -2288,7 +2339,7 @@
 
 	DSSDBG(KERN_INFO"hdmi read EDID:\n");
 	print_omap_video_timings(dp);
-
+	printk("--Exit [%s]--\n",__func__);
 	return r;
 }
 
