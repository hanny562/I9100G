From: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date: Wed, 12 Jan 2011 14:34:04 +0000 (+0530)
Subject: ARM: smp_twd: Fix the local timer library for DVFS
X-Git-Url: http://git.omapzoom.org/?p=kernel%2Fomap.git;a=commitdiff_plain;h=5c60f4aa046ab6e52e4bc157bf20db0c5bb78090

ARM: smp_twd: Fix the local timer library for DVFS

The local timers are clocked from mpu_clk/2 and gets changed when the
mpu lcok rate chnages as part of DVFS. This means the local timer
needs to recalibrated to mainatin the correct tick.

Select the lowest timer target clock freq so that with pre-scaler,
constant timer freq can be maintained for all OPPs

Constant freqency chosen here is 50 MHz. I was planning to choose 100 MHz,
but this marginally misses the DPLL cascading usecase where the MPU will
be @196 MHz and the timer is@98 MHz.

Also the re-calibration is done at only CPUFREQ_POSTCHANGE notifier
and not done in pre-notifier for good reasons.

Change-Id: Ia2d63873ab0487ca2334c1b21d8e9e23bd77e89e
Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
---

Index: Kernel/arch/arm/include/asm/localtimer.h
===================================================================
--- Kernel.orig/arch/arm/include/asm/localtimer.h	2011-01-11 03:51:39.022468699 +0530
+++ Kernel/arch/arm/include/asm/localtimer.h	2011-01-19 00:19:41.612697272 +0530
@@ -51,6 +51,9 @@
  * Setup a local timer interrupt for a CPU.
  */
 void local_timer_setup(struct clock_event_device *);
+void twd_timer_setup_with_clock(struct clock_event_device *,
+	unsigned long target_rate, unsigned long twd_clock_rate,
+	unsigned int arch_clock_divider);
 
 #else
 
Index: Kernel/arch/arm/include/asm/smp_twd.h
===================================================================
--- Kernel.orig/arch/arm/include/asm/smp_twd.h	2011-01-11 03:51:39.623718789 +0530
+++ Kernel/arch/arm/include/asm/smp_twd.h	2011-01-19 00:19:41.612697272 +0530
@@ -17,6 +17,7 @@
 #define TWD_TIMER_CONTROL_ONESHOT	(0 << 1)
 #define TWD_TIMER_CONTROL_PERIODIC	(1 << 1)
 #define TWD_TIMER_CONTROL_IT_ENABLE	(1 << 2)
+#define TWD_TIMER_CONTROL_PRESCALE_MASK	(0xFF << 8)
 
 struct clock_event_device;
 
@@ -25,5 +26,7 @@
 void twd_timer_stop(void);
 int twd_timer_ack(void);
 void twd_timer_setup(struct clock_event_device *);
-
+void twd_timer_setup_with_clock(struct clock_event_device *,
+	unsigned long target_rate, unsigned long twd_clk_rate,
+	unsigned int arch_clk_divider);
 #endif
Index: Kernel/arch/arm/kernel/smp_twd.c
===================================================================
--- Kernel.orig/arch/arm/kernel/smp_twd.c	2011-01-11 03:51:40.093094512 +0530
+++ Kernel/arch/arm/kernel/smp_twd.c	2011-01-19 00:19:41.612697272 +0530
@@ -17,6 +17,7 @@
 #include <linux/clockchips.h>
 #include <linux/irq.h>
 #include <linux/io.h>
+#include <linux/cpufreq.h>
 
 #include <asm/smp_twd.h>
 #include <asm/hardware/gic.h>
@@ -25,26 +26,29 @@
 void __iomem *twd_base;
 
 static unsigned long twd_timer_rate;
+static unsigned long twd_clock_ratio;
+static unsigned long twd_target_rate;
 
 static void twd_set_mode(enum clock_event_mode mode,
 			struct clock_event_device *clk)
 {
-	unsigned long ctrl;
+	unsigned long ctrl = __raw_readl(twd_base + TWD_TIMER_CONTROL);
+	ctrl &= TWD_TIMER_CONTROL_PRESCALE_MASK;
 
 	switch (mode) {
 	case CLOCK_EVT_MODE_PERIODIC:
 		/* timer load already set up */
-		ctrl = TWD_TIMER_CONTROL_ENABLE | TWD_TIMER_CONTROL_IT_ENABLE
+		ctrl |= TWD_TIMER_CONTROL_ENABLE | TWD_TIMER_CONTROL_IT_ENABLE
 			| TWD_TIMER_CONTROL_PERIODIC;
 		break;
 	case CLOCK_EVT_MODE_ONESHOT:
 		/* period set, and timer enabled in 'next_event' hook */
-		ctrl = TWD_TIMER_CONTROL_IT_ENABLE | TWD_TIMER_CONTROL_ONESHOT;
+		ctrl |= TWD_TIMER_CONTROL_IT_ENABLE | TWD_TIMER_CONTROL_ONESHOT;
 		break;
 	case CLOCK_EVT_MODE_UNUSED:
 	case CLOCK_EVT_MODE_SHUTDOWN:
 	default:
-		ctrl = 0;
+		break;
 	}
 
 	__raw_writel(ctrl, twd_base + TWD_TIMER_CONTROL);
@@ -63,6 +67,30 @@
 	return 0;
 }
 
+static void __twd_recalc_prescaler(unsigned long cpu_rate)
+{
+	u32 ctrl;
+	int prescaler;
+	unsigned long twd_clock_input;
+
+	WARN_ON(twd_clock_ratio == 0 || twd_timer_rate == 0);
+
+	twd_clock_input = cpu_rate / twd_clock_ratio;
+
+	prescaler = DIV_ROUND_CLOSEST(twd_clock_input, twd_timer_rate);
+	prescaler = clamp(prescaler - 1, 0, 0xFF);
+
+	pr_debug("CPU%d TWD prescaler= %d for input_clock %ldMHz "
+		"and target clock %ldMHz\n",
+		hard_smp_processor_id(), prescaler,
+		twd_clock_input/1000000, twd_timer_rate/1000000);
+
+	ctrl = __raw_readl(twd_base + TWD_TIMER_CONTROL);
+	ctrl &= ~TWD_TIMER_CONTROL_PRESCALE_MASK;
+	ctrl |= prescaler << 8;
+	__raw_writel(ctrl, twd_base + TWD_TIMER_CONTROL);
+}
+
 /*
  * local_timer_ack: checks for a local timer interrupt.
  *
@@ -79,17 +107,21 @@
 	return 0;
 }
 
-static void __cpuinit twd_calibrate_rate(void)
+static void __cpuinit twd_calibrate_rate(unsigned long target_rate,
+	unsigned int arch_clk_divider)
 {
 	unsigned long load, count;
 	u64 waitjiffies;
+	unsigned long cpu_rate;
+	static bool printed;
 
+	if (!printed)
+		pr_info("Calibrating local timer... ");
 	/*
 	 * If this is the first time round, we need to work out how fast
 	 * the timer ticks
 	 */
 	if (twd_timer_rate == 0) {
-		printk(KERN_INFO "Calibrating local timer... ");
 
 		/* Wait for a tick to start */
 		waitjiffies = get_jiffies_64() + 1;
@@ -100,10 +132,10 @@
 		/* OK, now the tick has started, let's get the timer going */
 		waitjiffies += 5;
 
-				 /* enable, no interrupt or reload */
+		/* enable, no interrupt or reload */
 		__raw_writel(0x1, twd_base + TWD_TIMER_CONTROL);
 
-				 /* maximum value */
+		/* maximum value */
 		__raw_writel(0xFFFFFFFFU, twd_base + TWD_TIMER_COUNTER);
 
 		while (get_jiffies_64() < waitjiffies)
@@ -112,9 +144,26 @@
 		count = __raw_readl(twd_base + TWD_TIMER_COUNTER);
 
 		twd_timer_rate = (0xFFFFFFFFU - count) * (HZ / 5);
+	}
 
-		printk("%lu.%02luMHz.\n", twd_timer_rate / 1000000,
-			(twd_timer_rate / 100000) % 100);
+	/*
+	 * If a target rate has been requested, adjust the TWD prescaler
+	 * to get the closest lower frequency.
+	 */
+	if (target_rate) {
+		twd_clock_ratio = arch_clk_divider;
+		twd_target_rate = target_rate;
+
+		cpu_rate = twd_timer_rate * arch_clk_divider;
+		twd_timer_rate = twd_target_rate;
+		__twd_recalc_prescaler(cpu_rate);
+	}
+
+	if (!printed) {
+		pr_info("%lu.%02luMHz.\n",
+			twd_timer_rate / 1000000,
+			(twd_timer_rate / 10000) % 100);
+		printed = 1;
 	}
 
 	load = twd_timer_rate / HZ;
@@ -125,11 +174,12 @@
 /*
  * Setup the local clock events for a CPU.
  */
-void __cpuinit twd_timer_setup(struct clock_event_device *clk)
+static void __cpuinit __twd_timer_setup(struct clock_event_device *clk,
+	unsigned long target_rate, unsigned int arch_clk_divider)
 {
 	unsigned long flags;
 
-	twd_calibrate_rate();
+	twd_calibrate_rate(target_rate, arch_clk_divider);
 
 	clk->name = "local_timer";
 
@@ -153,6 +203,77 @@
 	clockevents_register_device(clk);
 }
 
+#ifdef CONFIG_CPU_FREQ
+
+static void twd_recalc_prescaler_all_cpu(void *data)
+{
+	unsigned long cpu_rate = *(unsigned long *)data;
+	__twd_recalc_prescaler(cpu_rate);
+}
+
+static void twd_recalc_prescaler(unsigned int cpu, unsigned long cpu_rate)
+{
+	smp_call_function_any(cpumask_of(cpu),
+		twd_recalc_prescaler_all_cpu, &cpu_rate, 1);
+}
+
+static int twd_cpufreq_notifier(struct notifier_block *nb,
+				  unsigned long val, void *data)
+{
+	struct cpufreq_freqs *freq = data;
+
+	/*
+	 * FIXME: If we need to calibrate before freq change. Currently
+	 * only after CPU freq change is done, timer clock is recalibrated
+	 */
+	switch (val) {
+	case CPUFREQ_PRECHANGE:
+		break;
+	case CPUFREQ_POSTCHANGE:
+	case CPUFREQ_RESUMECHANGE:
+		if (!(freq->old == freq->new))
+			twd_recalc_prescaler(freq->cpu, freq->new * 1000);
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static struct notifier_block twd_cpufreq_notifier_block = {
+	.notifier_call  = twd_cpufreq_notifier
+};
+
+static int __init twd_init_cpufreq(void)
+{
+	if (!twd_timer_rate)
+		return 0;
+
+	if (cpufreq_register_notifier(&twd_cpufreq_notifier_block,
+				      CPUFREQ_TRANSITION_NOTIFIER))
+		pr_err("smp_twd: Failed to setup cpufreq notifier\n");
+
+	return 0;
+}
+late_initcall(twd_init_cpufreq);
+#endif
+
+void __cpuinit twd_timer_setup_with_clock(struct clock_event_device *clk,
+	 unsigned long twd_clock_rate, unsigned long target_rate,
+	unsigned int arch_clk_divider)
+{
+	if (twd_clock_rate)
+		twd_timer_rate = twd_clock_rate;
+
+	__twd_timer_setup(clk, target_rate, arch_clk_divider);
+}
+
+void __cpuinit twd_timer_setup(struct clock_event_device *clk)
+{
+	__twd_timer_setup(clk, 0, 0);
+}
+
 #ifdef CONFIG_HOTPLUG_CPU
 /*
  * take a local timer down
Index: Kernel/arch/arm/mach-omap2/timer-mpu.c
===================================================================
--- Kernel.orig/arch/arm/mach-omap2/timer-mpu.c	2011-01-13 22:29:43.944344380 +0530
+++ Kernel/arch/arm/mach-omap2/timer-mpu.c	2011-01-19 00:19:41.612697272 +0530
@@ -19,6 +19,8 @@
 #include <linux/init.h>
 #include <linux/smp.h>
 #include <linux/clockchips.h>
+#include <linux/clk.h>
+
 #include <asm/irq.h>
 #include <asm/smp_twd.h>
 #include <asm/localtimer.h>
@@ -28,7 +30,29 @@
  */
 void __cpuinit local_timer_setup(struct clock_event_device *evt)
 {
+#ifdef CONFIG_CPU_FREQ
+	struct clk *mpu_clk;
+	unsigned long timer_rate;
+
+	mpu_clk = clk_get(NULL, "dpll_mpu_ck");
+	if (!mpu_clk) {
+		pr_err("timer-mpu: Could not get mpu_clk\n");
+		BUG();
+	}
+	/* Timet clock = mpu clk/2 */
+	timer_rate = (clk_get_rate(mpu_clk)) >> 1;
+
+	/*
+	 * Select the lowest timer target clock freq so that
+	 * with pre-scaler, constant timer freq can be maintained
+	 * for all OPPs
+	 * Timer target_freq = 50 MHz
+	 */
+	evt->irq = OMAP44XX_IRQ_LOCALTIMER;
+	twd_timer_setup_with_clock(evt, timer_rate, 50000000, 2);
+#else
 	evt->irq = OMAP44XX_IRQ_LOCALTIMER;
 	twd_timer_setup(evt);
+#endif
 }
 
