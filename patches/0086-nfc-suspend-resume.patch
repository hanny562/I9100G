Index: Kernel/drivers/misc/pn544.c
===================================================================
--- Kernel.orig/drivers/misc/pn544.c	2011-01-19 15:35:31.292472028 +0530
+++ Kernel/drivers/misc/pn544.c	2011-01-19 19:39:23.973721733 +0530
@@ -136,6 +136,7 @@
 	struct pn544_dev  *pn544_dev;
 	char tmp[MAX_BUFFER_SIZE];
 	int ret;
+	int retry = 0;
 
 	pn544_dev = filp->private_data;
 
@@ -149,10 +150,21 @@
 
 	pr_debug("%s : writing %zu bytes.\n", __func__, count);
 	/* Write data */
-	ret = i2c_master_send(pn544_dev->client, tmp, count);
-	if (ret != count) {
-		pr_err("%s : i2c_master_send returned %d\n", __func__, ret);
-		ret = -EIO;
+	while(retry < 2){
+		ret = i2c_master_send(pn544_dev->client, tmp, count);
+		//printk("ret:%d" ,ret);
+		if (ret != count){
+			//printk("retry:%d\n",retry);
+			ret = -EIO;
+		} 
+		else{
+			break;
+		}
+		mdelay(100);
+		retry++;
+	}
+	if (ret == -EIO) {
+		pr_err("%s : i2c_master_send returned %d\n",__func__,ret);
 	}
 
 	return ret;
@@ -179,17 +191,14 @@
 	switch (cmd) {
 	case PN544_SET_PWR:
 		if (arg > 1) {  /* enable with firmware download */
-			pr_info("%s power on with firmware\n", __func__);
 			gpio_direction_output(pn544_dev->firm_gpio, 1);
 			gpio_direction_output(pn544_dev->ven_gpio, 1);
 			msleep(3);
 		} else if (arg == 1) {  /* enable */
-			pr_info("%s power on\n", __func__);
 			gpio_direction_output(pn544_dev->firm_gpio, 0);
 			gpio_direction_output(pn544_dev->ven_gpio, 1);
 			msleep(3);
 		} else {
-			pr_info("%s power off\n", __func__);
 			gpio_direction_output(pn544_dev->firm_gpio, 0);
 			gpio_direction_output(pn544_dev->ven_gpio, 0);
 			msleep(7);
@@ -220,7 +229,6 @@
 	struct pn544_dev *pn544_dev;
 
 	platform_data = client->dev.platform_data;
-	printk(KERN_ERR"NFC DRIVER CODE");
 	if (platform_data == NULL) {
 		pr_err("%s : nfc probe fail\n", __func__);
 		return  -ENODEV;
@@ -272,7 +280,6 @@
 	/* request irq.  the irq is set whenever the chip has data available
 	 * for reading.  it is cleared when all data has been read.
 	 */
-	pr_info("%s : requesting IRQ %d\n", __func__, client->irq);
 	pn544_dev->irq_enabled = true;
 	ret = request_irq(client->irq, pn544_dev_irq_handler,
 			  IRQF_TRIGGER_HIGH, client->name, pn544_dev);
@@ -299,6 +306,35 @@
 	return ret;
 }
 
+static int pn544_suspend(struct i2c_client * client, pm_message_t mesg)
+{
+        struct pn544_dev *pn544_dev;
+        pn544_dev = i2c_get_clientdata(client);
+
+        if (gpio_get_value(pn544_dev->ven_gpio)){
+                pn544_disable_irq(pn544_dev);
+                gpio_set_value(pn544_dev->ven_gpio,0);
+		udelay(7);
+		gpio_set_value(pn544_dev->ven_gpio,1);
+		udelay(40);
+		gpio_set_value(pn544_dev->ven_gpio,0);
+        }
+        return 0;
+}
+
+static int pn544_resume(struct i2c_client * client)
+{
+         struct pn544_dev *pn544_dev;
+        pn544_dev = i2c_get_clientdata(client);
+        if (!gpio_get_value(pn544_dev->ven_gpio)){
+              gpio_set_value(pn544_dev->ven_gpio,1);
+              msleep(3);
+        }
+        return 0;
+
+}
+
+
 static int pn544_remove(struct i2c_client *client)
 {
 	struct pn544_dev *pn544_dev;
@@ -328,6 +364,8 @@
 		.owner	= THIS_MODULE,
 		.name	= "pn544",
 	},
+	.suspend	= pn544_suspend,
+	.resume		= pn544_resume,
 };
 
 /*
@@ -336,14 +374,12 @@
 
 static int __init pn544_dev_init(void)
 {
-	pr_info("Loading pn544 driver\n");
 	return i2c_add_driver(&pn544_driver);
 }
 module_init(pn544_dev_init);
 
 static void __exit pn544_dev_exit(void)
 {
-	pr_info("Unloading pn544 driver\n");
 	i2c_del_driver(&pn544_driver);
 }
 module_exit(pn544_dev_exit);
